
F103.ENC28J60.ARP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080030f8  080030f8  000130f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08003410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003d0  200001ec  080035fc  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005bc  080035fc  000205bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019102  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000031f8  00000000  00000000  00039317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000813a  00000000  00000000  0003c50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b70  00000000  00000000  00044650  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e18  00000000  00000000  000451c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000069df  00000000  00000000  00045fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ef1  00000000  00000000  0004c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000508a8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027f4  00000000  00000000  00050924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080030e0 	.word	0x080030e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	080030e0 	.word	0x080030e0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000018 	.word	0x20000018
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 f90e 	bl	80023dc <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000260 	.word	0x20000260
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000260 	.word	0x20000260

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000304:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000308:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800030a:	2b02      	cmp	r3, #2
 800030c:	d003      	beq.n	8000316 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800030e:	2304      	movs	r3, #4
 8000310:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000316:	6803      	ldr	r3, [r0, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	f022 020e 	bic.w	r2, r2, #14
 800031e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	f022 0201 	bic.w	r2, r2, #1
 8000326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000328:	4a18      	ldr	r2, [pc, #96]	; (800038c <HAL_DMA_Abort_IT+0x88>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d01f      	beq.n	800036e <HAL_DMA_Abort_IT+0x6a>
 800032e:	3214      	adds	r2, #20
 8000330:	4293      	cmp	r3, r2
 8000332:	d01e      	beq.n	8000372 <HAL_DMA_Abort_IT+0x6e>
 8000334:	3214      	adds	r2, #20
 8000336:	4293      	cmp	r3, r2
 8000338:	d01d      	beq.n	8000376 <HAL_DMA_Abort_IT+0x72>
 800033a:	3214      	adds	r2, #20
 800033c:	4293      	cmp	r3, r2
 800033e:	d01d      	beq.n	800037c <HAL_DMA_Abort_IT+0x78>
 8000340:	3214      	adds	r2, #20
 8000342:	4293      	cmp	r3, r2
 8000344:	d01d      	beq.n	8000382 <HAL_DMA_Abort_IT+0x7e>
 8000346:	3214      	adds	r2, #20
 8000348:	4293      	cmp	r3, r2
 800034a:	bf0c      	ite	eq
 800034c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000350:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000356:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000358:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800035a:	2301      	movs	r3, #1
 800035c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000360:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000362:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000366:	b17b      	cbz	r3, 8000388 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000368:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800036a:	4620      	mov	r0, r4
 800036c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800036e:	2301      	movs	r3, #1
 8000370:	e7f0      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000372:	2310      	movs	r3, #16
 8000374:	e7ee      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800037a:	e7eb      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	e7e8      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	e7e5      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000388:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800038a:	bd10      	pop	{r4, pc}
 800038c:	40020008 	.word	0x40020008
 8000390:	40020000 	.word	0x40020000

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000398:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800039a:	4616      	mov	r6, r2
 800039c:	4b65      	ldr	r3, [pc, #404]	; (8000534 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800039e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000544 <HAL_GPIO_Init+0x1b0>
 80003a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000548 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80003a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	d17f      	bne.n	80004b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80003b8:	684d      	ldr	r5, [r1, #4]
 80003ba:	2d12      	cmp	r5, #18
 80003bc:	f000 80af 	beq.w	800051e <HAL_GPIO_Init+0x18a>
 80003c0:	f200 8088 	bhi.w	80004d4 <HAL_GPIO_Init+0x140>
 80003c4:	2d02      	cmp	r5, #2
 80003c6:	f000 80a7 	beq.w	8000518 <HAL_GPIO_Init+0x184>
 80003ca:	d87c      	bhi.n	80004c6 <HAL_GPIO_Init+0x132>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	f000 808e 	beq.w	80004ee <HAL_GPIO_Init+0x15a>
 80003d2:	2d01      	cmp	r5, #1
 80003d4:	f000 809e 	beq.w	8000514 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	bf93      	iteet	ls
 80003e0:	4682      	movls	sl, r0
 80003e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003e6:	3d08      	subhi	r5, #8
 80003e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ec:	bf92      	itee	ls
 80003ee:	00b5      	lslls	r5, r6, #2
 80003f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f6:	fa09 f805 	lsl.w	r8, r9, r5
 80003fa:	ea2b 0808 	bic.w	r8, fp, r8
 80003fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000402:	bf88      	it	hi
 8000404:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000408:	ea48 0505 	orr.w	r5, r8, r5
 800040c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000410:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000414:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000418:	d04e      	beq.n	80004b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4d47      	ldr	r5, [pc, #284]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041c:	4f46      	ldr	r7, [pc, #280]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041e:	69ad      	ldr	r5, [r5, #24]
 8000420:	f026 0803 	bic.w	r8, r6, #3
 8000424:	f045 0501 	orr.w	r5, r5, #1
 8000428:	61bd      	str	r5, [r7, #24]
 800042a:	69bd      	ldr	r5, [r7, #24]
 800042c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000430:	f005 0501 	and.w	r5, r5, #1
 8000434:	9501      	str	r5, [sp, #4]
 8000436:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000440:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000444:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000448:	fa09 f90b 	lsl.w	r9, r9, fp
 800044c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000450:	4d3a      	ldr	r5, [pc, #232]	; (800053c <HAL_GPIO_Init+0x1a8>)
 8000452:	42a8      	cmp	r0, r5
 8000454:	d068      	beq.n	8000528 <HAL_GPIO_Init+0x194>
 8000456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045a:	42a8      	cmp	r0, r5
 800045c:	d066      	beq.n	800052c <HAL_GPIO_Init+0x198>
 800045e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000462:	42a8      	cmp	r0, r5
 8000464:	d064      	beq.n	8000530 <HAL_GPIO_Init+0x19c>
 8000466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046a:	42a8      	cmp	r0, r5
 800046c:	bf0c      	ite	eq
 800046e:	2503      	moveq	r5, #3
 8000470:	2504      	movne	r5, #4
 8000472:	fa05 f50b 	lsl.w	r5, r5, fp
 8000476:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800047a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800047e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000480:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000484:	bf14      	ite	ne
 8000486:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000488:	43a5      	biceq	r5, r4
 800048a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800048c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000492:	bf14      	ite	ne
 8000494:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000496:	43a5      	biceq	r5, r4
 8000498:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800049a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a0:	bf14      	ite	ne
 80004a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004a4:	43a5      	biceq	r5, r4
 80004a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004ae:	bf14      	ite	ne
 80004b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004b2:	ea25 0404 	biceq.w	r4, r5, r4
 80004b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004b8:	3601      	adds	r6, #1
 80004ba:	2e10      	cmp	r6, #16
 80004bc:	f47f af73 	bne.w	80003a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80004c0:	b003      	add	sp, #12
 80004c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004c6:	2d03      	cmp	r5, #3
 80004c8:	d022      	beq.n	8000510 <HAL_GPIO_Init+0x17c>
 80004ca:	2d11      	cmp	r5, #17
 80004cc:	d184      	bne.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ce:	68ca      	ldr	r2, [r1, #12]
 80004d0:	3204      	adds	r2, #4
          break;
 80004d2:	e781      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004d4:	4f1a      	ldr	r7, [pc, #104]	; (8000540 <HAL_GPIO_Init+0x1ac>)
 80004d6:	42bd      	cmp	r5, r7
 80004d8:	d009      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004da:	d812      	bhi.n	8000502 <HAL_GPIO_Init+0x16e>
 80004dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800054c <HAL_GPIO_Init+0x1b8>
 80004e0:	454d      	cmp	r5, r9
 80004e2:	d004      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004e8:	454d      	cmp	r5, r9
 80004ea:	f47f af75 	bne.w	80003d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ee:	688a      	ldr	r2, [r1, #8]
 80004f0:	b1c2      	cbz	r2, 8000524 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004f4:	bf0c      	ite	eq
 80004f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fe:	2208      	movs	r2, #8
 8000500:	e76a      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000502:	4575      	cmp	r5, lr
 8000504:	d0f3      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 8000506:	4565      	cmp	r5, ip
 8000508:	d0f1      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 800050a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000550 <HAL_GPIO_Init+0x1bc>
 800050e:	e7eb      	b.n	80004e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000510:	2200      	movs	r2, #0
 8000512:	e761      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000514:	68ca      	ldr	r2, [r1, #12]
          break;
 8000516:	e75f      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000518:	68ca      	ldr	r2, [r1, #12]
 800051a:	3208      	adds	r2, #8
          break;
 800051c:	e75c      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051e:	68ca      	ldr	r2, [r1, #12]
 8000520:	320c      	adds	r2, #12
          break;
 8000522:	e759      	b.n	80003d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000524:	2204      	movs	r2, #4
 8000526:	e757      	b.n	80003d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000528:	2500      	movs	r5, #0
 800052a:	e7a2      	b.n	8000472 <HAL_GPIO_Init+0xde>
 800052c:	2501      	movs	r5, #1
 800052e:	e7a0      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000530:	2502      	movs	r5, #2
 8000532:	e79e      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000534:	40010400 	.word	0x40010400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	10210000 	.word	0x10210000
 8000544:	10310000 	.word	0x10310000
 8000548:	10320000 	.word	0x10320000
 800054c:	10110000 	.word	0x10110000
 8000550:	10220000 	.word	0x10220000

08000554 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000554:	b10a      	cbz	r2, 800055a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000556:	6101      	str	r1, [r0, #16]
 8000558:	4770      	bx	lr
 800055a:	0409      	lsls	r1, r1, #16
 800055c:	e7fb      	b.n	8000556 <HAL_GPIO_WritePin+0x2>
	...

08000560 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000560:	6803      	ldr	r3, [r0, #0]
{
 8000562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000566:	07db      	lsls	r3, r3, #31
{
 8000568:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056a:	d410      	bmi.n	800058e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056c:	682b      	ldr	r3, [r5, #0]
 800056e:	079f      	lsls	r7, r3, #30
 8000570:	d45e      	bmi.n	8000630 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000572:	682b      	ldr	r3, [r5, #0]
 8000574:	0719      	lsls	r1, r3, #28
 8000576:	f100 8095 	bmi.w	80006a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800057a:	682b      	ldr	r3, [r5, #0]
 800057c:	075a      	lsls	r2, r3, #29
 800057e:	f100 80bf 	bmi.w	8000700 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000582:	69ea      	ldr	r2, [r5, #28]
 8000584:	2a00      	cmp	r2, #0
 8000586:	f040 812d 	bne.w	80007e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800058a:	2000      	movs	r0, #0
 800058c:	e014      	b.n	80005b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800058e:	4c90      	ldr	r4, [pc, #576]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	f003 030c 	and.w	r3, r3, #12
 8000596:	2b04      	cmp	r3, #4
 8000598:	d007      	beq.n	80005aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	f003 030c 	and.w	r3, r3, #12
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d10c      	bne.n	80005be <HAL_RCC_OscConfig+0x5e>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	03de      	lsls	r6, r3, #15
 80005a8:	d509      	bpl.n	80005be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	039c      	lsls	r4, r3, #14
 80005ae:	d5dd      	bpl.n	800056c <HAL_RCC_OscConfig+0xc>
 80005b0:	686b      	ldr	r3, [r5, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1da      	bne.n	800056c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005b6:	2001      	movs	r0, #1
}
 80005b8:	b002      	add	sp, #8
 80005ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	686b      	ldr	r3, [r5, #4]
 80005c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005c4:	d110      	bne.n	80005e8 <HAL_RCC_OscConfig+0x88>
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ce:	f7ff fe07 	bl	80001e0 <HAL_GetTick>
 80005d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	0398      	lsls	r0, r3, #14
 80005d8:	d4c8      	bmi.n	800056c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe01 	bl	80001e0 <HAL_GetTick>
 80005de:	1b80      	subs	r0, r0, r6
 80005e0:	2864      	cmp	r0, #100	; 0x64
 80005e2:	d9f7      	bls.n	80005d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005e4:	2003      	movs	r0, #3
 80005e6:	e7e7      	b.n	80005b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e8:	b99b      	cbnz	r3, 8000612 <HAL_RCC_OscConfig+0xb2>
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f0:	6023      	str	r3, [r4, #0]
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005fa:	f7ff fdf1 	bl	80001e0 <HAL_GetTick>
 80005fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	0399      	lsls	r1, r3, #14
 8000604:	d5b2      	bpl.n	800056c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000606:	f7ff fdeb 	bl	80001e0 <HAL_GetTick>
 800060a:	1b80      	subs	r0, r0, r6
 800060c:	2864      	cmp	r0, #100	; 0x64
 800060e:	d9f7      	bls.n	8000600 <HAL_RCC_OscConfig+0xa0>
 8000610:	e7e8      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	d103      	bne.n	8000622 <HAL_RCC_OscConfig+0xc2>
 800061a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800061e:	6023      	str	r3, [r4, #0]
 8000620:	e7d1      	b.n	80005c6 <HAL_RCC_OscConfig+0x66>
 8000622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000626:	6023      	str	r3, [r4, #0]
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062e:	e7cd      	b.n	80005cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000630:	4c67      	ldr	r4, [pc, #412]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	f013 0f0c 	tst.w	r3, #12
 8000638:	d007      	beq.n	800064a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800063a:	6863      	ldr	r3, [r4, #4]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	2b08      	cmp	r3, #8
 8000642:	d110      	bne.n	8000666 <HAL_RCC_OscConfig+0x106>
 8000644:	6863      	ldr	r3, [r4, #4]
 8000646:	03da      	lsls	r2, r3, #15
 8000648:	d40d      	bmi.n	8000666 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	079b      	lsls	r3, r3, #30
 800064e:	d502      	bpl.n	8000656 <HAL_RCC_OscConfig+0xf6>
 8000650:	692b      	ldr	r3, [r5, #16]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1af      	bne.n	80005b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000656:	6823      	ldr	r3, [r4, #0]
 8000658:	696a      	ldr	r2, [r5, #20]
 800065a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800065e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000662:	6023      	str	r3, [r4, #0]
 8000664:	e785      	b.n	8000572 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000666:	692a      	ldr	r2, [r5, #16]
 8000668:	4b5a      	ldr	r3, [pc, #360]	; (80007d4 <HAL_RCC_OscConfig+0x274>)
 800066a:	b16a      	cbz	r2, 8000688 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000670:	f7ff fdb6 	bl	80001e0 <HAL_GetTick>
 8000674:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	079f      	lsls	r7, r3, #30
 800067a:	d4ec      	bmi.n	8000656 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067c:	f7ff fdb0 	bl	80001e0 <HAL_GetTick>
 8000680:	1b80      	subs	r0, r0, r6
 8000682:	2802      	cmp	r0, #2
 8000684:	d9f7      	bls.n	8000676 <HAL_RCC_OscConfig+0x116>
 8000686:	e7ad      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000688:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800068a:	f7ff fda9 	bl	80001e0 <HAL_GetTick>
 800068e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	0798      	lsls	r0, r3, #30
 8000694:	f57f af6d 	bpl.w	8000572 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fda2 	bl	80001e0 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x130>
 80006a2:	e79f      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006a4:	69aa      	ldr	r2, [r5, #24]
 80006a6:	4c4a      	ldr	r4, [pc, #296]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 80006a8:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <HAL_RCC_OscConfig+0x278>)
 80006aa:	b1da      	cbz	r2, 80006e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006b0:	f7ff fd96 	bl	80001e0 <HAL_GetTick>
 80006b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b8:	079b      	lsls	r3, r3, #30
 80006ba:	d50d      	bpl.n	80006d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <HAL_RCC_OscConfig+0x27c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006cc:	9b01      	ldr	r3, [sp, #4]
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f9      	bne.n	80006ca <HAL_RCC_OscConfig+0x16a>
 80006d6:	e750      	b.n	800057a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d8:	f7ff fd82 	bl	80001e0 <HAL_GetTick>
 80006dc:	1b80      	subs	r0, r0, r6
 80006de:	2802      	cmp	r0, #2
 80006e0:	d9e9      	bls.n	80006b6 <HAL_RCC_OscConfig+0x156>
 80006e2:	e77f      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006e6:	f7ff fd7b 	bl	80001e0 <HAL_GetTick>
 80006ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ee:	079f      	lsls	r7, r3, #30
 80006f0:	f57f af43 	bpl.w	800057a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff fd74 	bl	80001e0 <HAL_GetTick>
 80006f8:	1b80      	subs	r0, r0, r6
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0x18c>
 80006fe:	e771      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000700:	4c33      	ldr	r4, [pc, #204]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000702:	69e3      	ldr	r3, [r4, #28]
 8000704:	00d8      	lsls	r0, r3, #3
 8000706:	d424      	bmi.n	8000752 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000708:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	69e3      	ldr	r3, [r4, #28]
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	61e3      	str	r3, [r4, #28]
 8000712:	69e3      	ldr	r3, [r4, #28]
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800071c:	4e30      	ldr	r6, [pc, #192]	; (80007e0 <HAL_RCC_OscConfig+0x280>)
 800071e:	6833      	ldr	r3, [r6, #0]
 8000720:	05d9      	lsls	r1, r3, #23
 8000722:	d518      	bpl.n	8000756 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000724:	68eb      	ldr	r3, [r5, #12]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d126      	bne.n	8000778 <HAL_RCC_OscConfig+0x218>
 800072a:	6a23      	ldr	r3, [r4, #32]
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000732:	f7ff fd55 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000736:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800073a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800073c:	6a23      	ldr	r3, [r4, #32]
 800073e:	079b      	lsls	r3, r3, #30
 8000740:	d53f      	bpl.n	80007c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000742:	2f00      	cmp	r7, #0
 8000744:	f43f af1d 	beq.w	8000582 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000748:	69e3      	ldr	r3, [r4, #28]
 800074a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800074e:	61e3      	str	r3, [r4, #28]
 8000750:	e717      	b.n	8000582 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000752:	2700      	movs	r7, #0
 8000754:	e7e2      	b.n	800071c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000756:	6833      	ldr	r3, [r6, #0]
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd3f 	bl	80001e0 <HAL_GetTick>
 8000762:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000764:	6833      	ldr	r3, [r6, #0]
 8000766:	05da      	lsls	r2, r3, #23
 8000768:	d4dc      	bmi.n	8000724 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800076a:	f7ff fd39 	bl	80001e0 <HAL_GetTick>
 800076e:	eba0 0008 	sub.w	r0, r0, r8
 8000772:	2864      	cmp	r0, #100	; 0x64
 8000774:	d9f6      	bls.n	8000764 <HAL_RCC_OscConfig+0x204>
 8000776:	e735      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000778:	b9ab      	cbnz	r3, 80007a6 <HAL_RCC_OscConfig+0x246>
 800077a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6223      	str	r3, [r4, #32]
 8000786:	6a23      	ldr	r3, [r4, #32]
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800078e:	f7ff fd27 	bl	80001e0 <HAL_GetTick>
 8000792:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000794:	6a23      	ldr	r3, [r4, #32]
 8000796:	0798      	lsls	r0, r3, #30
 8000798:	d5d3      	bpl.n	8000742 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079a:	f7ff fd21 	bl	80001e0 <HAL_GetTick>
 800079e:	1b80      	subs	r0, r0, r6
 80007a0:	4540      	cmp	r0, r8
 80007a2:	d9f7      	bls.n	8000794 <HAL_RCC_OscConfig+0x234>
 80007a4:	e71e      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	6a23      	ldr	r3, [r4, #32]
 80007aa:	d103      	bne.n	80007b4 <HAL_RCC_OscConfig+0x254>
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6223      	str	r3, [r4, #32]
 80007b2:	e7ba      	b.n	800072a <HAL_RCC_OscConfig+0x1ca>
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	6223      	str	r3, [r4, #32]
 80007ba:	6a23      	ldr	r3, [r4, #32]
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	e7b6      	b.n	8000730 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c2:	f7ff fd0d 	bl	80001e0 <HAL_GetTick>
 80007c6:	eba0 0008 	sub.w	r0, r0, r8
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d9b6      	bls.n	800073c <HAL_RCC_OscConfig+0x1dc>
 80007ce:	e709      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
 80007d0:	40021000 	.word	0x40021000
 80007d4:	42420000 	.word	0x42420000
 80007d8:	42420480 	.word	0x42420480
 80007dc:	20000018 	.word	0x20000018
 80007e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e4:	4c22      	ldr	r4, [pc, #136]	; (8000870 <HAL_RCC_OscConfig+0x310>)
 80007e6:	6863      	ldr	r3, [r4, #4]
 80007e8:	f003 030c 	and.w	r3, r3, #12
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	f43f aee2 	beq.w	80005b6 <HAL_RCC_OscConfig+0x56>
 80007f2:	2300      	movs	r3, #0
 80007f4:	4e1f      	ldr	r6, [pc, #124]	; (8000874 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007fa:	d12b      	bne.n	8000854 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007fc:	f7ff fcf0 	bl	80001e0 <HAL_GetTick>
 8000800:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	0199      	lsls	r1, r3, #6
 8000806:	d41f      	bmi.n	8000848 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000808:	6a2b      	ldr	r3, [r5, #32]
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080e:	d105      	bne.n	800081c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000810:	6862      	ldr	r2, [r4, #4]
 8000812:	68a9      	ldr	r1, [r5, #8]
 8000814:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000818:	430a      	orrs	r2, r1
 800081a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800081c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800081e:	6862      	ldr	r2, [r4, #4]
 8000820:	430b      	orrs	r3, r1
 8000822:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000826:	4313      	orrs	r3, r2
 8000828:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800082a:	2301      	movs	r3, #1
 800082c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800082e:	f7ff fcd7 	bl	80001e0 <HAL_GetTick>
 8000832:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000834:	6823      	ldr	r3, [r4, #0]
 8000836:	019a      	lsls	r2, r3, #6
 8000838:	f53f aea7 	bmi.w	800058a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800083c:	f7ff fcd0 	bl	80001e0 <HAL_GetTick>
 8000840:	1b40      	subs	r0, r0, r5
 8000842:	2802      	cmp	r0, #2
 8000844:	d9f6      	bls.n	8000834 <HAL_RCC_OscConfig+0x2d4>
 8000846:	e6cd      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000848:	f7ff fcca 	bl	80001e0 <HAL_GetTick>
 800084c:	1bc0      	subs	r0, r0, r7
 800084e:	2802      	cmp	r0, #2
 8000850:	d9d7      	bls.n	8000802 <HAL_RCC_OscConfig+0x2a2>
 8000852:	e6c7      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000854:	f7ff fcc4 	bl	80001e0 <HAL_GetTick>
 8000858:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	f57f ae94 	bpl.w	800058a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000862:	f7ff fcbd 	bl	80001e0 <HAL_GetTick>
 8000866:	1b40      	subs	r0, r0, r5
 8000868:	2802      	cmp	r0, #2
 800086a:	d9f6      	bls.n	800085a <HAL_RCC_OscConfig+0x2fa>
 800086c:	e6ba      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	42420060 	.word	0x42420060

08000878 <HAL_RCC_GetSysClockFreq>:
{
 8000878:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800087c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800087e:	ac02      	add	r4, sp, #8
 8000880:	f103 0510 	add.w	r5, r3, #16
 8000884:	4622      	mov	r2, r4
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	6859      	ldr	r1, [r3, #4]
 800088a:	3308      	adds	r3, #8
 800088c:	c203      	stmia	r2!, {r0, r1}
 800088e:	42ab      	cmp	r3, r5
 8000890:	4614      	mov	r4, r2
 8000892:	d1f7      	bne.n	8000884 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000894:	2301      	movs	r3, #1
 8000896:	f88d 3004 	strb.w	r3, [sp, #4]
 800089a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800089c:	4911      	ldr	r1, [pc, #68]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800089e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008a4:	f003 020c 	and.w	r2, r3, #12
 80008a8:	2a08      	cmp	r2, #8
 80008aa:	d117      	bne.n	80008dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008b0:	a806      	add	r0, sp, #24
 80008b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ba:	d50c      	bpl.n	80008d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c6:	aa06      	add	r2, sp, #24
 80008c8:	4413      	add	r3, r2
 80008ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008d2:	b007      	add	sp, #28
 80008d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_RCC_GetSysClockFreq+0x74>)
 80008d8:	4350      	muls	r0, r2
 80008da:	e7fa      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008de:	e7f8      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80008e0:	080030f8 	.word	0x080030f8
 80008e4:	40021000 	.word	0x40021000
 80008e8:	007a1200 	.word	0x007a1200
 80008ec:	003d0900 	.word	0x003d0900

080008f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f0:	4a4d      	ldr	r2, [pc, #308]	; (8000a28 <HAL_RCC_ClockConfig+0x138>)
{
 80008f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	6813      	ldr	r3, [r2, #0]
{
 80008f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	428b      	cmp	r3, r1
{
 8000900:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000902:	d328      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000904:	682a      	ldr	r2, [r5, #0]
 8000906:	0791      	lsls	r1, r2, #30
 8000908:	d432      	bmi.n	8000970 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800090a:	07d2      	lsls	r2, r2, #31
 800090c:	d438      	bmi.n	8000980 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_RCC_ClockConfig+0x138>)
 8000910:	6813      	ldr	r3, [r2, #0]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	429e      	cmp	r6, r3
 8000918:	d373      	bcc.n	8000a02 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800091a:	682a      	ldr	r2, [r5, #0]
 800091c:	4c43      	ldr	r4, [pc, #268]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 800091e:	f012 0f04 	tst.w	r2, #4
 8000922:	d179      	bne.n	8000a18 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000924:	0713      	lsls	r3, r2, #28
 8000926:	d506      	bpl.n	8000936 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	692a      	ldr	r2, [r5, #16]
 800092c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000930:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000934:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000936:	f7ff ff9f 	bl	8000878 <HAL_RCC_GetSysClockFreq>
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	4a3c      	ldr	r2, [pc, #240]	; (8000a30 <HAL_RCC_ClockConfig+0x140>)
 800093e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	40d8      	lsrs	r0, r3
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <HAL_RCC_ClockConfig+0x144>)
 8000948:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fc06 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
}
 8000952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	4299      	cmp	r1, r3
 8000968:	d0cc      	beq.n	8000904 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
 800096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000970:	492e      	ldr	r1, [pc, #184]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 8000972:	68a8      	ldr	r0, [r5, #8]
 8000974:	684b      	ldr	r3, [r1, #4]
 8000976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800097a:	4303      	orrs	r3, r0
 800097c:	604b      	str	r3, [r1, #4]
 800097e:	e7c4      	b.n	800090a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000980:	686a      	ldr	r2, [r5, #4]
 8000982:	4c2a      	ldr	r4, [pc, #168]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 8000984:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000986:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000988:	d11c      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098e:	d0ec      	beq.n	800096a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000990:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000992:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000996:	f023 0303 	bic.w	r3, r3, #3
 800099a:	4313      	orrs	r3, r2
 800099c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800099e:	f7ff fc1f 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d114      	bne.n	80009d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009aa:	6863      	ldr	r3, [r4, #4]
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d0ac      	beq.n	800090e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b4:	f7ff fc14 	bl	80001e0 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	4540      	cmp	r0, r8
 80009bc:	d9f5      	bls.n	80009aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80009be:	2003      	movs	r0, #3
 80009c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c4:	2a02      	cmp	r2, #2
 80009c6:	d102      	bne.n	80009ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009cc:	e7df      	b.n	800098e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ce:	f013 0f02 	tst.w	r3, #2
 80009d2:	e7dc      	b.n	800098e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d10f      	bne.n	80009f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	f003 030c 	and.w	r3, r3, #12
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d095      	beq.n	800090e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e2:	f7ff fbfd 	bl	80001e0 <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	4540      	cmp	r0, r8
 80009ea:	d9f5      	bls.n	80009d8 <HAL_RCC_ClockConfig+0xe8>
 80009ec:	e7e7      	b.n	80009be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ee:	f7ff fbf7 	bl	80001e0 <HAL_GetTick>
 80009f2:	1bc0      	subs	r0, r0, r7
 80009f4:	4540      	cmp	r0, r8
 80009f6:	d8e2      	bhi.n	80009be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009f8:	6863      	ldr	r3, [r4, #4]
 80009fa:	f013 0f0c 	tst.w	r3, #12
 80009fe:	d1f6      	bne.n	80009ee <HAL_RCC_ClockConfig+0xfe>
 8000a00:	e785      	b.n	800090e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	f023 0307 	bic.w	r3, r3, #7
 8000a08:	4333      	orrs	r3, r6
 8000a0a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a0c:	6813      	ldr	r3, [r2, #0]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	429e      	cmp	r6, r3
 8000a14:	d1a9      	bne.n	800096a <HAL_RCC_ClockConfig+0x7a>
 8000a16:	e780      	b.n	800091a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	68e9      	ldr	r1, [r5, #12]
 8000a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a20:	430b      	orrs	r3, r1
 8000a22:	6063      	str	r3, [r4, #4]
 8000a24:	e77e      	b.n	8000924 <HAL_RCC_ClockConfig+0x34>
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	080032b2 	.word	0x080032b2
 8000a34:	20000018 	.word	0x20000018

08000a38 <HAL_RCC_GetHCLKFreq>:
}
 8000a38:	4b01      	ldr	r3, [pc, #4]	; (8000a40 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000018 	.word	0x20000018

08000a44 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a52:	6810      	ldr	r0, [r2, #0]
}    
 8000a54:	40d8      	lsrs	r0, r3
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	080032c2 	.word	0x080032c2
 8000a60:	20000018 	.word	0x20000018

08000a64 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a72:	6810      	ldr	r0, [r2, #0]
} 
 8000a74:	40d8      	lsrs	r0, r3
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	080032c2 	.word	0x080032c2
 8000a80:	20000018 	.word	0x20000018

08000a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a88:	4604      	mov	r4, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	4617      	mov	r7, r2
 8000a8e:	461d      	mov	r5, r3
 8000a90:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000a92:	6822      	ldr	r2, [r4, #0]
 8000a94:	6893      	ldr	r3, [r2, #8]
 8000a96:	ea38 0303 	bics.w	r3, r8, r3
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d102      	bne.n	8000aaa <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000aa4:	2000      	movs	r0, #0
}
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000aaa:	1c6b      	adds	r3, r5, #1
 8000aac:	d0f2      	beq.n	8000a94 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000aae:	bb55      	cbnz	r5, 8000b06 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ab8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000aba:	6862      	ldr	r2, [r4, #4]
 8000abc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ac0:	d10a      	bne.n	8000ad8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000ac2:	68a2      	ldr	r2, [r4, #8]
 8000ac4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ac8:	d002      	beq.n	8000ad0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000aca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ace:	d103      	bne.n	8000ad8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ad6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ada:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ade:	d109      	bne.n	8000af4 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ae6:	0412      	lsls	r2, r2, #16
 8000ae8:	0c12      	lsrs	r2, r2, #16
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000af2:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000afa:	2300      	movs	r3, #0
 8000afc:	2003      	movs	r0, #3
 8000afe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b06:	f7ff fb6b 	bl	80001e0 <HAL_GetTick>
 8000b0a:	1b80      	subs	r0, r0, r6
 8000b0c:	4285      	cmp	r5, r0
 8000b0e:	d8c0      	bhi.n	8000a92 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000b10:	e7ce      	b.n	8000ab0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000b12 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b12:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b14:	460b      	mov	r3, r1
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	2200      	movs	r2, #0
{
 8000b1c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b1e:	f7ff ffb1 	bl	8000a84 <SPI_WaitFlagStateUntilTimeout>
 8000b22:	b120      	cbz	r0, 8000b2e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000b24:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b28:	f043 0320 	orr.w	r3, r3, #32
 8000b2c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd10      	pop	{r4, pc}

08000b32 <HAL_SPI_TransmitReceive>:
{
 8000b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b36:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000b38:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b3c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000b3e:	2b01      	cmp	r3, #1
{
 8000b40:	4604      	mov	r4, r0
 8000b42:	460d      	mov	r5, r1
 8000b44:	4616      	mov	r6, r2
 8000b46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000b48:	f000 80ee 	beq.w	8000d28 <HAL_SPI_TransmitReceive+0x1f6>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b52:	f7ff fb45 	bl	80001e0 <HAL_GetTick>
  tmp  = hspi->State;
 8000b56:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000b5a:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000b5c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b5e:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000b60:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b62:	d00a      	beq.n	8000b7a <HAL_SPI_TransmitReceive+0x48>
 8000b64:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000b68:	f040 80dc 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000b6c:	68a2      	ldr	r2, [r4, #8]
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	f040 80d8 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	f040 80d5 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d04e      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d04c      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
 8000b82:	f1b9 0f00 	cmp.w	r9, #0
 8000b86:	d049      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000b88:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000b8c:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000b8e:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000b90:	bf04      	itt	eq
 8000b92:	2305      	moveq	r3, #5
 8000b94:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000b9c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000b9e:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ba0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000ba2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000ba6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000baa:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000bac:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bb0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000bb2:	bf58      	it	pl
 8000bb4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000bb6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000bb8:	bf58      	it	pl
 8000bba:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000bbe:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000bc2:	bf58      	it	pl
 8000bc4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bc6:	68e2      	ldr	r2, [r4, #12]
 8000bc8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000bcc:	d15d      	bne.n	8000c8a <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000bce:	b119      	cbz	r1, 8000bd8 <HAL_SPI_TransmitReceive+0xa6>
 8000bd0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	2a01      	cmp	r2, #1
 8000bd6:	d106      	bne.n	8000be6 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000bd8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000bdc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000bde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000be6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b9bb      	cbnz	r3, 8000c20 <HAL_SPI_TransmitReceive+0xee>
 8000bf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b9a3      	cbnz	r3, 8000c20 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000bf6:	f8cd 8000 	str.w	r8, [sp]
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff3f 	bl	8000a84 <SPI_WaitFlagStateUntilTimeout>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d135      	bne.n	8000c76 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff ff7f 	bl	8000b12 <SPI_CheckFlag_BSY>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d07a      	beq.n	8000d0e <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	e02b      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000c20:	f1b9 0f00 	cmp.w	r9, #0
 8000c24:	d00f      	beq.n	8000c46 <HAL_SPI_TransmitReceive+0x114>
 8000c26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b163      	cbz	r3, 8000c46 <HAL_SPI_TransmitReceive+0x114>
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	0791      	lsls	r1, r2, #30
 8000c32:	d508      	bpl.n	8000c46 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000c34:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c38:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c3c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000c46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b163      	cbz	r3, 8000c66 <HAL_SPI_TransmitReceive+0x134>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	07d2      	lsls	r2, r2, #31
 8000c52:	d508      	bpl.n	8000c66 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000c54:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000c5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000c66:	1c78      	adds	r0, r7, #1
 8000c68:	d0bf      	beq.n	8000bea <HAL_SPI_TransmitReceive+0xb8>
 8000c6a:	f7ff fab9 	bl	80001e0 <HAL_GetTick>
 8000c6e:	eba0 0008 	sub.w	r0, r0, r8
 8000c72:	4287      	cmp	r7, r0
 8000c74:	d8b9      	bhi.n	8000bea <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c84:	b005      	add	sp, #20
 8000c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c8a:	b119      	cbz	r1, 8000c94 <HAL_SPI_TransmitReceive+0x162>
 8000c8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d106      	bne.n	8000ca2 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000c94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000c98:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000ca2:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ca6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b91b      	cbnz	r3, 8000cb4 <HAL_SPI_TransmitReceive+0x182>
 8000cac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0a0      	beq.n	8000bf6 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000cb4:	f1b9 0f00 	cmp.w	r9, #0
 8000cb8:	d00f      	beq.n	8000cda <HAL_SPI_TransmitReceive+0x1a8>
 8000cba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b163      	cbz	r3, 8000cda <HAL_SPI_TransmitReceive+0x1a8>
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	0791      	lsls	r1, r2, #30
 8000cc6:	d508      	bpl.n	8000cda <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000cc8:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000ccc:	782a      	ldrb	r2, [r5, #0]
 8000cce:	3501      	adds	r5, #1
 8000cd0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000cd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000cda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b16b      	cbz	r3, 8000cfc <HAL_SPI_TransmitReceive+0x1ca>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	07d2      	lsls	r2, r2, #31
 8000ce6:	d509      	bpl.n	8000cfc <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000ce8:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3601      	adds	r6, #1
 8000cf0:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000cf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000cfc:	1c7b      	adds	r3, r7, #1
 8000cfe:	d0d2      	beq.n	8000ca6 <HAL_SPI_TransmitReceive+0x174>
 8000d00:	f7ff fa6e 	bl	80001e0 <HAL_GetTick>
 8000d04:	eba0 0008 	sub.w	r0, r0, r8
 8000d08:	4287      	cmp	r7, r0
 8000d0a:	d8cc      	bhi.n	8000ca6 <HAL_SPI_TransmitReceive+0x174>
 8000d0c:	e7b3      	b.n	8000c76 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d0e:	68a3      	ldr	r3, [r4, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1b1      	bne.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	9003      	str	r0, [sp, #12]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	9203      	str	r2, [sp, #12]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	e7a9      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000d24:	2002      	movs	r0, #2
 8000d26:	e7a7      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	e7ab      	b.n	8000c84 <HAL_SPI_TransmitReceive+0x152>

08000d2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d2c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000d2e:	4604      	mov	r4, r0
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d034      	beq.n	8000d9e <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d38:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d3c:	b90b      	cbnz	r3, 8000d42 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d3e:	f001 fb91 	bl	8002464 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d42:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d44:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d4a:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d4c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d52:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	69a2      	ldr	r2, [r4, #24]
 8000d58:	4303      	orrs	r3, r0
 8000d5a:	68e0      	ldr	r0, [r4, #12]
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	6920      	ldr	r0, [r4, #16]
 8000d60:	4303      	orrs	r3, r0
 8000d62:	6960      	ldr	r0, [r4, #20]
 8000d64:	4303      	orrs	r3, r0
 8000d66:	69e0      	ldr	r0, [r4, #28]
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	6a20      	ldr	r0, [r4, #32]
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d70:	4303      	orrs	r3, r0
 8000d72:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000d76:	4303      	orrs	r3, r0
 8000d78:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d7a:	0c12      	lsrs	r2, r2, #16
 8000d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d7e:	f002 0204 	and.w	r2, r2, #4
 8000d82:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d86:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d88:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d8a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d8c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d92:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000d94:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d96:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000d98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000d9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
}
 8000da0:	bd10      	pop	{r4, pc}

08000da2 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000da2:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000da4:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	4770      	bx	lr

08000db8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000db8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000dbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	f04f 0302 	mov.w	r3, #2
 8000dc4:	d01c      	beq.n	8000e00 <HAL_TIM_ConfigClockSource+0x48>
 8000dc6:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000dc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000dcc:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000dce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000dd2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dd4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000dd8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000ddc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000dde:	680a      	ldr	r2, [r1, #0]
 8000de0:	2a40      	cmp	r2, #64	; 0x40
 8000de2:	d079      	beq.n	8000ed8 <HAL_TIM_ConfigClockSource+0x120>
 8000de4:	d819      	bhi.n	8000e1a <HAL_TIM_ConfigClockSource+0x62>
 8000de6:	2a10      	cmp	r2, #16
 8000de8:	f000 8093 	beq.w	8000f12 <HAL_TIM_ConfigClockSource+0x15a>
 8000dec:	d80a      	bhi.n	8000e04 <HAL_TIM_ConfigClockSource+0x4c>
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	f000 8089 	beq.w	8000f06 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000e00:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e04:	2a20      	cmp	r2, #32
 8000e06:	f000 808a 	beq.w	8000f1e <HAL_TIM_ConfigClockSource+0x166>
 8000e0a:	2a30      	cmp	r2, #48	; 0x30
 8000e0c:	d1f2      	bne.n	8000df4 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e0e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e14:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000e18:	e036      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e1a:	2a70      	cmp	r2, #112	; 0x70
 8000e1c:	d036      	beq.n	8000e8c <HAL_TIM_ConfigClockSource+0xd4>
 8000e1e:	d81b      	bhi.n	8000e58 <HAL_TIM_ConfigClockSource+0xa0>
 8000e20:	2a50      	cmp	r2, #80	; 0x50
 8000e22:	d042      	beq.n	8000eaa <HAL_TIM_ConfigClockSource+0xf2>
 8000e24:	2a60      	cmp	r2, #96	; 0x60
 8000e26:	d1e5      	bne.n	8000df4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e28:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e2a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e2c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e30:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e32:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e34:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000e36:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e38:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e40:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e44:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e48:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e4a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000e4c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e52:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000e56:	e017      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000e5c:	d011      	beq.n	8000e82 <HAL_TIM_ConfigClockSource+0xca>
 8000e5e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e62:	d1c7      	bne.n	8000df4 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e64:	688a      	ldr	r2, [r1, #8]
 8000e66:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e68:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e6a:	68c9      	ldr	r1, [r1, #12]
 8000e6c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e6e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e76:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e78:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e80:	e002      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	e7b3      	b.n	8000df4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e8c:	688a      	ldr	r2, [r1, #8]
 8000e8e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e90:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e92:	68c9      	ldr	r1, [r1, #12]
 8000e94:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e96:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e9e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000ea0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ea2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ea4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ea8:	e7ee      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000eaa:	684c      	ldr	r4, [r1, #4]
 8000eac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000eae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eb0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000eb2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000eb6:	f025 0501 	bic.w	r5, r5, #1
 8000eba:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ebc:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000ebe:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ec0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ec4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000eca:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ecc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ece:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ed2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000ed6:	e7d7      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ed8:	684c      	ldr	r4, [r1, #4]
 8000eda:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000edc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ede:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ee0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ee4:	f025 0501 	bic.w	r5, r5, #1
 8000ee8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000eea:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000eec:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000eee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000ef2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ef8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000efa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f00:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000f04:	e7c0      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f06:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f0c:	f042 0207 	orr.w	r2, r2, #7
 8000f10:	e7ba      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f18:	f042 0217 	orr.w	r2, r2, #23
 8000f1c:	e7b4      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f1e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f24:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000f28:	e7ae      	b.n	8000e88 <HAL_TIM_ConfigClockSource+0xd0>

08000f2a <HAL_TIM_OC_DelayElapsedCallback>:
 8000f2a:	4770      	bx	lr

08000f2c <HAL_TIM_IC_CaptureCallback>:
 8000f2c:	4770      	bx	lr

08000f2e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f2e:	4770      	bx	lr

08000f30 <HAL_TIM_TriggerCallback>:
 8000f30:	4770      	bx	lr

08000f32 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f32:	6803      	ldr	r3, [r0, #0]
{
 8000f34:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f36:	691a      	ldr	r2, [r3, #16]
{
 8000f38:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f3a:	0791      	lsls	r1, r2, #30
 8000f3c:	d50e      	bpl.n	8000f5c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	0792      	lsls	r2, r2, #30
 8000f42:	d50b      	bpl.n	8000f5c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f44:	f06f 0202 	mvn.w	r2, #2
 8000f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f4a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f4c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f4e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f50:	079b      	lsls	r3, r3, #30
 8000f52:	d077      	beq.n	8001044 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f54:	f7ff ffea 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	0750      	lsls	r0, r2, #29
 8000f62:	d510      	bpl.n	8000f86 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	0751      	lsls	r1, r2, #29
 8000f68:	d50d      	bpl.n	8000f86 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f6a:	f06f 0204 	mvn.w	r2, #4
 8000f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f70:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f72:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f74:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f76:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f7a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f7c:	d068      	beq.n	8001050 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f7e:	f7ff ffd5 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f82:	2300      	movs	r3, #0
 8000f84:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	0712      	lsls	r2, r2, #28
 8000f8c:	d50f      	bpl.n	8000fae <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	0710      	lsls	r0, r2, #28
 8000f92:	d50c      	bpl.n	8000fae <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f94:	f06f 0208 	mvn.w	r2, #8
 8000f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f9a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f9c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f9e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fa0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000fa2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fa4:	d05a      	beq.n	800105c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fa6:	f7ff ffc1 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000faa:	2300      	movs	r3, #0
 8000fac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	691a      	ldr	r2, [r3, #16]
 8000fb2:	06d2      	lsls	r2, r2, #27
 8000fb4:	d510      	bpl.n	8000fd8 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	06d0      	lsls	r0, r2, #27
 8000fba:	d50d      	bpl.n	8000fd8 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fbc:	f06f 0210 	mvn.w	r2, #16
 8000fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fc2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fc4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fc6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fc8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000fcc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fce:	d04b      	beq.n	8001068 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fd0:	f7ff ffac 	bl	8000f2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	07d1      	lsls	r1, r2, #31
 8000fde:	d508      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	07d2      	lsls	r2, r2, #31
 8000fe4:	d505      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fe6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fee:	f001 f80b 	bl	8002008 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	0610      	lsls	r0, r2, #24
 8000ff8:	d508      	bpl.n	800100c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	0611      	lsls	r1, r2, #24
 8000ffe:	d505      	bpl.n	800100c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001000:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001004:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001006:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001008:	f000 f8ab 	bl	8001162 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	0652      	lsls	r2, r2, #25
 8001012:	d508      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	0650      	lsls	r0, r2, #25
 8001018:	d505      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800101a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800101e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001020:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001022:	f7ff ff85 	bl	8000f30 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	0691      	lsls	r1, r2, #26
 800102c:	d522      	bpl.n	8001074 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	0692      	lsls	r2, r2, #26
 8001032:	d51f      	bpl.n	8001074 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001034:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001038:	4620      	mov	r0, r4
}
 800103a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800103e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001040:	f000 b88e 	b.w	8001160 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001044:	f7ff ff71 	bl	8000f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff ff70 	bl	8000f2e <HAL_TIM_PWM_PulseFinishedCallback>
 800104e:	e783      	b.n	8000f58 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001050:	f7ff ff6b 	bl	8000f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001054:	4620      	mov	r0, r4
 8001056:	f7ff ff6a 	bl	8000f2e <HAL_TIM_PWM_PulseFinishedCallback>
 800105a:	e792      	b.n	8000f82 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800105c:	f7ff ff65 	bl	8000f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff ff64 	bl	8000f2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001066:	e7a0      	b.n	8000faa <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001068:	f7ff ff5f 	bl	8000f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff ff5e 	bl	8000f2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001072:	e7af      	b.n	8000fd4 <HAL_TIM_IRQHandler+0xa2>
 8001074:	bd10      	pop	{r4, pc}
	...

08001078 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001078:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800107a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800107c:	4290      	cmp	r0, r2
 800107e:	d00a      	beq.n	8001096 <TIM_Base_SetConfig+0x1e>
 8001080:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001084:	d007      	beq.n	8001096 <TIM_Base_SetConfig+0x1e>
 8001086:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800108a:	4290      	cmp	r0, r2
 800108c:	d003      	beq.n	8001096 <TIM_Base_SetConfig+0x1e>
 800108e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001092:	4290      	cmp	r0, r2
 8001094:	d115      	bne.n	80010c2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001096:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800109c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <TIM_Base_SetConfig+0x6c>)
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d00a      	beq.n	80010ba <TIM_Base_SetConfig+0x42>
 80010a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010a8:	d007      	beq.n	80010ba <TIM_Base_SetConfig+0x42>
 80010aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010ae:	4290      	cmp	r0, r2
 80010b0:	d003      	beq.n	80010ba <TIM_Base_SetConfig+0x42>
 80010b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b6:	4290      	cmp	r0, r2
 80010b8:	d103      	bne.n	80010c2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010ba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80010bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010c0:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80010c2:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80010c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80010c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80010ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010cc:	688b      	ldr	r3, [r1, #8]
 80010ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80010d0:	680b      	ldr	r3, [r1, #0]
 80010d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <TIM_Base_SetConfig+0x6c>)
 80010d6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80010d8:	bf04      	itt	eq
 80010da:	690b      	ldreq	r3, [r1, #16]
 80010dc:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80010de:	2301      	movs	r3, #1
 80010e0:	6143      	str	r3, [r0, #20]
 80010e2:	4770      	bx	lr
 80010e4:	40012c00 	.word	0x40012c00

080010e8 <HAL_TIM_Base_Init>:
{
 80010e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80010ea:	4604      	mov	r4, r0
 80010ec:	b1a0      	cbz	r0, 8001118 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010f6:	b91b      	cbnz	r3, 8001100 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010fc:	f001 f9dc 	bl	80024b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001100:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001102:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001108:	1d21      	adds	r1, r4, #4
 800110a:	f7ff ffb5 	bl	8001078 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800110e:	2301      	movs	r3, #1
  return HAL_OK;
 8001110:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001116:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
}
 800111a:	bd10      	pop	{r4, pc}

0800111c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800111c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001120:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001122:	2b01      	cmp	r3, #1
 8001124:	f04f 0302 	mov.w	r3, #2
 8001128:	d018      	beq.n	800115c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800112a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800112e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001130:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001132:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001134:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001136:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800113a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4322      	orrs	r2, r4
 8001140:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001148:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	430a      	orrs	r2, r1
 800114e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001150:	2301      	movs	r3, #1
 8001152:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001156:	2300      	movs	r3, #0
 8001158:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800115c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800115e:	bd10      	pop	{r4, pc}

08001160 <HAL_TIMEx_CommutationCallback>:
 8001160:	4770      	bx	lr

08001162 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001162:	4770      	bx	lr

08001164 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800116c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001176:	2320      	movs	r3, #32
 8001178:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800117c:	4770      	bx	lr
	...

08001180 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001184:	6805      	ldr	r5, [r0, #0]
 8001186:	68c2      	ldr	r2, [r0, #12]
 8001188:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800118a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800118c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001190:	4313      	orrs	r3, r2
 8001192:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001194:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001196:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001198:	430b      	orrs	r3, r1
 800119a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800119c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80011a0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80011a4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011aa:	696b      	ldr	r3, [r5, #20]
 80011ac:	6982      	ldr	r2, [r0, #24]
 80011ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b2:	4313      	orrs	r3, r2
 80011b4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <UART_SetConfig+0x138>)
{
 80011b8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80011ba:	429d      	cmp	r5, r3
 80011bc:	f04f 0419 	mov.w	r4, #25
 80011c0:	d146      	bne.n	8001250 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011c2:	f7ff fc4f 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 80011c6:	fb04 f300 	mul.w	r3, r4, r0
 80011ca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80011ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011d2:	00b6      	lsls	r6, r6, #2
 80011d4:	fbb3 f3f6 	udiv	r3, r3, r6
 80011d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80011dc:	011e      	lsls	r6, r3, #4
 80011de:	f7ff fc41 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 80011e2:	4360      	muls	r0, r4
 80011e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fbb0 f7f3 	udiv	r7, r0, r3
 80011ee:	f7ff fc39 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 80011f2:	4360      	muls	r0, r4
 80011f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001202:	fb08 7313 	mls	r3, r8, r3, r7
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	3332      	adds	r3, #50	; 0x32
 800120a:	fbb3 f3f8 	udiv	r3, r3, r8
 800120e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001212:	f7ff fc27 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8001216:	4360      	muls	r0, r4
 8001218:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	fbb0 faf2 	udiv	sl, r0, r2
 8001222:	f7ff fc1f 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001226:	4360      	muls	r0, r4
 8001228:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	fbb3 f3f8 	udiv	r3, r3, r8
 8001236:	fb08 a313 	mls	r3, r8, r3, sl
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	3332      	adds	r3, #50	; 0x32
 800123e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	433b      	orrs	r3, r7
 8001248:	4433      	add	r3, r6
 800124a:	60ab      	str	r3, [r5, #8]
 800124c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001250:	f7ff fbf8 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8001254:	fb04 f300 	mul.w	r3, r4, r0
 8001258:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800125c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001260:	00b6      	lsls	r6, r6, #2
 8001262:	fbb3 f3f6 	udiv	r3, r3, r6
 8001266:	fbb3 f3f8 	udiv	r3, r3, r8
 800126a:	011e      	lsls	r6, r3, #4
 800126c:	f7ff fbea 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8001270:	4360      	muls	r0, r4
 8001272:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fbb0 f7f3 	udiv	r7, r0, r3
 800127c:	f7ff fbe2 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8001280:	4360      	muls	r0, r4
 8001282:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fbb0 f3f3 	udiv	r3, r0, r3
 800128c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001290:	fb08 7313 	mls	r3, r8, r3, r7
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	3332      	adds	r3, #50	; 0x32
 8001298:	fbb3 f3f8 	udiv	r3, r3, r8
 800129c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80012a0:	f7ff fbd0 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 80012a4:	4360      	muls	r0, r4
 80012a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	fbb0 faf2 	udiv	sl, r0, r2
 80012b0:	f7ff fbc8 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 80012b4:	e7b7      	b.n	8001226 <UART_SetConfig+0xa6>
 80012b6:	bf00      	nop
 80012b8:	40013800 	.word	0x40013800

080012bc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	4604      	mov	r4, r0
 80012c0:	460e      	mov	r6, r1
 80012c2:	4617      	mov	r7, r2
 80012c4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80012c6:	6821      	ldr	r1, [r4, #0]
 80012c8:	680b      	ldr	r3, [r1, #0]
 80012ca:	ea36 0303 	bics.w	r3, r6, r3
 80012ce:	d101      	bne.n	80012d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012d0:	2000      	movs	r0, #0
}
 80012d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012d4:	1c6b      	adds	r3, r5, #1
 80012d6:	d0f7      	beq.n	80012c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012d8:	b995      	cbnz	r5, 8001300 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012da:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80012dc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012ee:	2320      	movs	r3, #32
 80012f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012f8:	2300      	movs	r3, #0
 80012fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001300:	f7fe ff6e 	bl	80001e0 <HAL_GetTick>
 8001304:	1bc0      	subs	r0, r0, r7
 8001306:	4285      	cmp	r5, r0
 8001308:	d2dd      	bcs.n	80012c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800130a:	e7e6      	b.n	80012da <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800130c <HAL_UART_Init>:
{
 800130c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800130e:	4604      	mov	r4, r0
 8001310:	b340      	cbz	r0, 8001364 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001312:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800131a:	b91b      	cbnz	r3, 8001324 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800131c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001320:	f001 f8e6 	bl	80024f0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001324:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001326:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001328:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800132c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800132e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001334:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001336:	f7ff ff23 	bl	8001180 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800133a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800133c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800134c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001354:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001356:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001358:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800135a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800135e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001362:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
}
 8001366:	bd10      	pop	{r4, pc}

08001368 <HAL_UART_Transmit>:
{
 8001368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800136c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800136e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001372:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001374:	2b20      	cmp	r3, #32
{
 8001376:	460d      	mov	r5, r1
 8001378:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800137a:	d14e      	bne.n	800141a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 800137c:	2900      	cmp	r1, #0
 800137e:	d049      	beq.n	8001414 <HAL_UART_Transmit+0xac>
 8001380:	2a00      	cmp	r2, #0
 8001382:	d047      	beq.n	8001414 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001384:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001388:	2b01      	cmp	r3, #1
 800138a:	d046      	beq.n	800141a <HAL_UART_Transmit+0xb2>
 800138c:	2301      	movs	r3, #1
 800138e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001392:	2300      	movs	r3, #0
 8001394:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001396:	2321      	movs	r3, #33	; 0x21
 8001398:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800139c:	f7fe ff20 	bl	80001e0 <HAL_GetTick>
 80013a0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80013a2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80013a6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80013aa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b96b      	cbnz	r3, 80013cc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4632      	mov	r2, r6
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff80 	bl	80012bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013bc:	b9a8      	cbnz	r0, 80013ea <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80013be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80013c0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80013c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ce:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80013d0:	3b01      	subs	r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013d6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013d8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013de:	4620      	mov	r0, r4
 80013e0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013e2:	d10e      	bne.n	8001402 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e4:	f7ff ff6a 	bl	80012bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013e8:	b110      	cbz	r0, 80013f0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80013ea:	2003      	movs	r0, #3
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013f0:	882b      	ldrh	r3, [r5, #0]
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80013fa:	6923      	ldr	r3, [r4, #16]
 80013fc:	b943      	cbnz	r3, 8001410 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80013fe:	3502      	adds	r5, #2
 8001400:	e7d3      	b.n	80013aa <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001402:	f7ff ff5b 	bl	80012bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001406:	2800      	cmp	r0, #0
 8001408:	d1ef      	bne.n	80013ea <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	782a      	ldrb	r2, [r5, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	3501      	adds	r5, #1
 8001412:	e7ca      	b.n	80013aa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001414:	2001      	movs	r0, #1
 8001416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800141a:	2002      	movs	r0, #2
}
 800141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001420 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001420:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001424:	2b20      	cmp	r3, #32
 8001426:	d120      	bne.n	800146a <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8001428:	b1e9      	cbz	r1, 8001466 <HAL_UART_Receive_IT+0x46>
 800142a:	b1e2      	cbz	r2, 8001466 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800142c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001430:	2b01      	cmp	r3, #1
 8001432:	d01a      	beq.n	800146a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001434:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001436:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800143a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800143c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800143e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001442:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001444:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001446:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001448:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800144c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001450:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001452:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8001454:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001456:	f041 0101 	orr.w	r1, r1, #1
 800145a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800145c:	68d1      	ldr	r1, [r2, #12]
 800145e:	f041 0120 	orr.w	r1, r1, #32
 8001462:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001464:	4770      	bx	lr
      return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	4770      	bx	lr
    return HAL_BUSY;
 800146a:	2002      	movs	r0, #2
}
 800146c:	4770      	bx	lr

0800146e <HAL_UART_TxCpltCallback>:
 800146e:	4770      	bx	lr

08001470 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001470:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001474:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001476:	2b22      	cmp	r3, #34	; 0x22
 8001478:	d136      	bne.n	80014e8 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800147a:	6883      	ldr	r3, [r0, #8]
 800147c:	6901      	ldr	r1, [r0, #16]
 800147e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001486:	d123      	bne.n	80014d0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001488:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800148a:	b9e9      	cbnz	r1, 80014c8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800148c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001490:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001494:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001496:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001498:	3c01      	subs	r4, #1
 800149a:	b2a4      	uxth	r4, r4
 800149c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800149e:	b98c      	cbnz	r4, 80014c4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	f022 0220 	bic.w	r2, r2, #32
 80014a8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b0:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80014ba:	2320      	movs	r3, #32
 80014bc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80014c0:	f000 fd9a 	bl	8001ff8 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80014c4:	2000      	movs	r0, #0
}
 80014c6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	f823 2b01 	strh.w	r2, [r3], #1
 80014ce:	e7e1      	b.n	8001494 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014d0:	b921      	cbnz	r1, 80014dc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	6852      	ldr	r2, [r2, #4]
 80014d6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e7dc      	b.n	8001496 <UART_Receive_IT+0x26>
 80014dc:	6852      	ldr	r2, [r2, #4]
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	6281      	str	r1, [r0, #40]	; 0x28
 80014e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014e6:	e7f7      	b.n	80014d8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80014e8:	2002      	movs	r0, #2
 80014ea:	bd10      	pop	{r4, pc}

080014ec <HAL_UART_ErrorCallback>:
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014f0:	6803      	ldr	r3, [r0, #0]
{
 80014f2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014f4:	681a      	ldr	r2, [r3, #0]
{
 80014f6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80014f8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014fa:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014fc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80014fe:	d107      	bne.n	8001510 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001500:	0696      	lsls	r6, r2, #26
 8001502:	d55a      	bpl.n	80015ba <HAL_UART_IRQHandler+0xca>
 8001504:	068d      	lsls	r5, r1, #26
 8001506:	d558      	bpl.n	80015ba <HAL_UART_IRQHandler+0xca>
}
 8001508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800150c:	f7ff bfb0 	b.w	8001470 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001510:	f015 0501 	ands.w	r5, r5, #1
 8001514:	d102      	bne.n	800151c <HAL_UART_IRQHandler+0x2c>
 8001516:	f411 7f90 	tst.w	r1, #288	; 0x120
 800151a:	d04e      	beq.n	80015ba <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800151c:	07d3      	lsls	r3, r2, #31
 800151e:	d505      	bpl.n	800152c <HAL_UART_IRQHandler+0x3c>
 8001520:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001522:	bf42      	ittt	mi
 8001524:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001526:	f043 0301 	orrmi.w	r3, r3, #1
 800152a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800152c:	0750      	lsls	r0, r2, #29
 800152e:	d504      	bpl.n	800153a <HAL_UART_IRQHandler+0x4a>
 8001530:	b11d      	cbz	r5, 800153a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800153a:	0793      	lsls	r3, r2, #30
 800153c:	d504      	bpl.n	8001548 <HAL_UART_IRQHandler+0x58>
 800153e:	b11d      	cbz	r5, 8001548 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001548:	0716      	lsls	r6, r2, #28
 800154a:	d504      	bpl.n	8001556 <HAL_UART_IRQHandler+0x66>
 800154c:	b11d      	cbz	r5, 8001556 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800154e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001556:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001558:	2b00      	cmp	r3, #0
 800155a:	d066      	beq.n	800162a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800155c:	0695      	lsls	r5, r2, #26
 800155e:	d504      	bpl.n	800156a <HAL_UART_IRQHandler+0x7a>
 8001560:	0688      	lsls	r0, r1, #26
 8001562:	d502      	bpl.n	800156a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff83 	bl	8001470 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800156a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800156c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800156e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001570:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001572:	0711      	lsls	r1, r2, #28
 8001574:	d402      	bmi.n	800157c <HAL_UART_IRQHandler+0x8c>
 8001576:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800157a:	d01a      	beq.n	80015b2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800157c:	f7ff fdf2 	bl	8001164 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	0652      	lsls	r2, r2, #25
 8001586:	d510      	bpl.n	80015aa <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001588:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800158a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800158c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001590:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001592:	b150      	cbz	r0, 80015aa <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <HAL_UART_IRQHandler+0x13c>)
 8001596:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001598:	f7fe feb4 	bl	8000304 <HAL_DMA_Abort_IT>
 800159c:	2800      	cmp	r0, #0
 800159e:	d044      	beq.n	800162a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80015a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015a8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ff9e 	bl	80014ec <HAL_UART_ErrorCallback>
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80015b2:	f7ff ff9b 	bl	80014ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015ba:	0616      	lsls	r6, r2, #24
 80015bc:	d527      	bpl.n	800160e <HAL_UART_IRQHandler+0x11e>
 80015be:	060d      	lsls	r5, r1, #24
 80015c0:	d525      	bpl.n	800160e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80015c2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80015c6:	2a21      	cmp	r2, #33	; 0x21
 80015c8:	d12f      	bne.n	800162a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015ca:	68a2      	ldr	r2, [r4, #8]
 80015cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015d0:	6a22      	ldr	r2, [r4, #32]
 80015d2:	d117      	bne.n	8001604 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015d4:	8811      	ldrh	r1, [r2, #0]
 80015d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80015da:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015dc:	6921      	ldr	r1, [r4, #16]
 80015de:	b979      	cbnz	r1, 8001600 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80015e0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80015e2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80015e4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015e6:	3a01      	subs	r2, #1
 80015e8:	b292      	uxth	r2, r2
 80015ea:	84e2      	strh	r2, [r4, #38]	; 0x26
 80015ec:	b9ea      	cbnz	r2, 800162a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001600:	3201      	adds	r2, #1
 8001602:	e7ee      	b.n	80015e2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001604:	1c51      	adds	r1, r2, #1
 8001606:	6221      	str	r1, [r4, #32]
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	e7ea      	b.n	80015e4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800160e:	0650      	lsls	r0, r2, #25
 8001610:	d50b      	bpl.n	800162a <HAL_UART_IRQHandler+0x13a>
 8001612:	064a      	lsls	r2, r1, #25
 8001614:	d509      	bpl.n	800162a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001616:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001618:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800161a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800161e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001620:	2320      	movs	r3, #32
 8001622:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001626:	f7ff ff22 	bl	800146e <HAL_UART_TxCpltCallback>
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	08001631 	.word	0x08001631

08001630 <UART_DMAAbortOnError>:
{
 8001630:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001632:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001634:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001636:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001638:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800163a:	f7ff ff57 	bl	80014ec <HAL_UART_ErrorCallback>
 800163e:	bd08      	pop	{r3, pc}

08001640 <arp_read>:
//--------------------------------------------------
uint8_t arp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
  uint8_t res=0;
  arp_msg_ptr *msg=(void*)(frame->data);
  if (len>=sizeof(arp_msg_ptr))
 8001640:	291b      	cmp	r1, #27
{
 8001642:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001644:	4604      	mov	r4, r0
  if (len>=sizeof(arp_msg_ptr))
 8001646:	f240 80e1 	bls.w	800180c <arp_read+0x1cc>
  {
    if ((msg->net_tp==ARP_ETH)&&(msg->proto_tp==ARP_IP))
 800164a:	89c3      	ldrh	r3, [r0, #14]
 800164c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001650:	f040 80dc 	bne.w	800180c <arp_read+0x1cc>
 8001654:	8a03      	ldrh	r3, [r0, #16]
 8001656:	2b08      	cmp	r3, #8
 8001658:	f040 80d8 	bne.w	800180c <arp_read+0x1cc>
    {
	   if (!memcmp(msg->ipaddr_dst,ipaddr,4)) // loc thong diep cac arp gui den dia chi ethernet shield enc28j60
 800165c:	2204      	movs	r2, #4
 800165e:	496c      	ldr	r1, [pc, #432]	; (8001810 <arp_read+0x1d0>)
 8001660:	3026      	adds	r0, #38	; 0x26
 8001662:	f001 f809 	bl	8002678 <memcmp>
 8001666:	2800      	cmp	r0, #0
 8001668:	f040 80d0 	bne.w	800180c <arp_read+0x1cc>
	   {
	      if (msg->op==ARP_REQUEST) // noi dung thong diep arp la request
 800166c:	8aa3      	ldrh	r3, [r4, #20]
 800166e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001672:	d164      	bne.n	800173e <arp_read+0xfe>
          {
	        sprintf(str1,"request\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001674:	7ee1      	ldrb	r1, [r4, #27]
 8001676:	7de3      	ldrb	r3, [r4, #23]
 8001678:	9103      	str	r1, [sp, #12]
 800167a:	7ea1      	ldrb	r1, [r4, #26]
 800167c:	7da2      	ldrb	r2, [r4, #22]
 800167e:	9102      	str	r1, [sp, #8]
 8001680:	7e61      	ldrb	r1, [r4, #25]
 8001682:	4864      	ldr	r0, [pc, #400]	; (8001814 <arp_read+0x1d4>)
 8001684:	9101      	str	r1, [sp, #4]
 8001686:	7e21      	ldrb	r1, [r4, #24]
 8001688:	9100      	str	r1, [sp, #0]
 800168a:	4963      	ldr	r1, [pc, #396]	; (8001818 <arp_read+0x1d8>)
 800168c:	f001 f80c 	bl	80026a8 <siprintf>
              msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
              HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001690:	4860      	ldr	r0, [pc, #384]	; (8001814 <arp_read+0x1d4>)
 8001692:	f7fe fd5b 	bl	800014c <strlen>
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	b282      	uxth	r2, r0
 800169c:	495d      	ldr	r1, [pc, #372]	; (8001814 <arp_read+0x1d4>)
 800169e:	485f      	ldr	r0, [pc, #380]	; (800181c <arp_read+0x1dc>)
 80016a0:	f7ff fe62 	bl	8001368 <HAL_UART_Transmit>
            sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 80016a4:	7fe1      	ldrb	r1, [r4, #31]
 80016a6:	7f63      	ldrb	r3, [r4, #29]
 80016a8:	9101      	str	r1, [sp, #4]
 80016aa:	7fa1      	ldrb	r1, [r4, #30]
 80016ac:	7f22      	ldrb	r2, [r4, #28]
 80016ae:	9100      	str	r1, [sp, #0]
 80016b0:	4858      	ldr	r0, [pc, #352]	; (8001814 <arp_read+0x1d4>)
 80016b2:	495b      	ldr	r1, [pc, #364]	; (8001820 <arp_read+0x1e0>)
 80016b4:	f000 fff8 	bl	80026a8 <siprintf>
              msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
              HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80016b8:	4856      	ldr	r0, [pc, #344]	; (8001814 <arp_read+0x1d4>)
 80016ba:	f7fe fd47 	bl	800014c <strlen>
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	b282      	uxth	r2, r0
 80016c4:	4953      	ldr	r1, [pc, #332]	; (8001814 <arp_read+0x1d4>)
 80016c6:	4855      	ldr	r0, [pc, #340]	; (800181c <arp_read+0x1dc>)
 80016c8:	f7ff fe4e 	bl	8001368 <HAL_UART_Transmit>
            sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
 80016cc:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80016d0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80016d4:	9103      	str	r1, [sp, #12]
 80016d6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80016da:	f894 2020 	ldrb.w	r2, [r4, #32]
 80016de:	9102      	str	r1, [sp, #8]
 80016e0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80016e4:	484b      	ldr	r0, [pc, #300]	; (8001814 <arp_read+0x1d4>)
 80016e6:	9101      	str	r1, [sp, #4]
 80016e8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80016ec:	9100      	str	r1, [sp, #0]
 80016ee:	494d      	ldr	r1, [pc, #308]	; (8001824 <arp_read+0x1e4>)
 80016f0:	f000 ffda 	bl	80026a8 <siprintf>
              HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80016f4:	4847      	ldr	r0, [pc, #284]	; (8001814 <arp_read+0x1d4>)
 80016f6:	f7fe fd29 	bl	800014c <strlen>
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	b282      	uxth	r2, r0
 8001700:	4944      	ldr	r1, [pc, #272]	; (8001814 <arp_read+0x1d4>)
 8001702:	4846      	ldr	r0, [pc, #280]	; (800181c <arp_read+0x1dc>)
 8001704:	f7ff fe30 	bl	8001368 <HAL_UART_Transmit>
            sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 8001708:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800170c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8001710:	9101      	str	r1, [sp, #4]
 8001712:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001716:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800171a:	9100      	str	r1, [sp, #0]
 800171c:	483d      	ldr	r0, [pc, #244]	; (8001814 <arp_read+0x1d4>)
 800171e:	4942      	ldr	r1, [pc, #264]	; (8001828 <arp_read+0x1e8>)
 8001720:	f000 ffc2 	bl	80026a8 <siprintf>
              msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
              HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001724:	483b      	ldr	r0, [pc, #236]	; (8001814 <arp_read+0x1d4>)
 8001726:	f7fe fd11 	bl	800014c <strlen>
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	b282      	uxth	r2, r0
 8001730:	4938      	ldr	r1, [pc, #224]	; (8001814 <arp_read+0x1d4>)
 8001732:	483a      	ldr	r0, [pc, #232]	; (800181c <arp_read+0x1dc>)
 8001734:	f7ff fe18 	bl	8001368 <HAL_UART_Transmit>
            res=1; // Detect arp message request
 8001738:	2001      	movs	r0, #1
	      }
	   }
    }
  }
	return res;
}
 800173a:	b004      	add	sp, #16
 800173c:	bd10      	pop	{r4, pc}
	      else if(msg->op==ARP_REPLY) // noi dung thong diep arp la reply
 800173e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001742:	d1fa      	bne.n	800173a <arp_read+0xfa>
	        sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],
 8001744:	7ee1      	ldrb	r1, [r4, #27]
 8001746:	7de3      	ldrb	r3, [r4, #23]
 8001748:	9103      	str	r1, [sp, #12]
 800174a:	7ea1      	ldrb	r1, [r4, #26]
 800174c:	7da2      	ldrb	r2, [r4, #22]
 800174e:	9102      	str	r1, [sp, #8]
 8001750:	7e61      	ldrb	r1, [r4, #25]
 8001752:	4830      	ldr	r0, [pc, #192]	; (8001814 <arp_read+0x1d4>)
 8001754:	9101      	str	r1, [sp, #4]
 8001756:	7e21      	ldrb	r1, [r4, #24]
 8001758:	9100      	str	r1, [sp, #0]
 800175a:	4934      	ldr	r1, [pc, #208]	; (800182c <arp_read+0x1ec>)
 800175c:	f000 ffa4 	bl	80026a8 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001760:	482c      	ldr	r0, [pc, #176]	; (8001814 <arp_read+0x1d4>)
 8001762:	f7fe fcf3 	bl	800014c <strlen>
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	b282      	uxth	r2, r0
 800176c:	4929      	ldr	r1, [pc, #164]	; (8001814 <arp_read+0x1d4>)
 800176e:	482b      	ldr	r0, [pc, #172]	; (800181c <arp_read+0x1dc>)
 8001770:	f7ff fdfa 	bl	8001368 <HAL_UART_Transmit>
	        sprintf(str1,"ip_src %d.%d.%d.%d\r\n",msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 8001774:	7fe1      	ldrb	r1, [r4, #31]
 8001776:	7f63      	ldrb	r3, [r4, #29]
 8001778:	9101      	str	r1, [sp, #4]
 800177a:	7fa1      	ldrb	r1, [r4, #30]
 800177c:	7f22      	ldrb	r2, [r4, #28]
 800177e:	9100      	str	r1, [sp, #0]
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <arp_read+0x1d4>)
 8001782:	4927      	ldr	r1, [pc, #156]	; (8001820 <arp_read+0x1e0>)
 8001784:	f000 ff90 	bl	80026a8 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001788:	4822      	ldr	r0, [pc, #136]	; (8001814 <arp_read+0x1d4>)
 800178a:	f7fe fcdf 	bl	800014c <strlen>
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	b282      	uxth	r2, r0
 8001794:	491f      	ldr	r1, [pc, #124]	; (8001814 <arp_read+0x1d4>)
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <arp_read+0x1dc>)
 8001798:	f7ff fde6 	bl	8001368 <HAL_UART_Transmit>
	        sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],
 800179c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80017a0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80017a4:	9103      	str	r1, [sp, #12]
 80017a6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80017aa:	f894 2020 	ldrb.w	r2, [r4, #32]
 80017ae:	9102      	str	r1, [sp, #8]
 80017b0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80017b4:	4817      	ldr	r0, [pc, #92]	; (8001814 <arp_read+0x1d4>)
 80017b6:	9101      	str	r1, [sp, #4]
 80017b8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80017bc:	9100      	str	r1, [sp, #0]
 80017be:	4919      	ldr	r1, [pc, #100]	; (8001824 <arp_read+0x1e4>)
 80017c0:	f000 ff72 	bl	80026a8 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <arp_read+0x1d4>)
 80017c6:	f7fe fcc1 	bl	800014c <strlen>
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	b282      	uxth	r2, r0
 80017d0:	4910      	ldr	r1, [pc, #64]	; (8001814 <arp_read+0x1d4>)
 80017d2:	4812      	ldr	r0, [pc, #72]	; (800181c <arp_read+0x1dc>)
 80017d4:	f7ff fdc8 	bl	8001368 <HAL_UART_Transmit>
	        sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 80017d8:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80017dc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80017e0:	9101      	str	r1, [sp, #4]
 80017e2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80017e6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80017ea:	9100      	str	r1, [sp, #0]
 80017ec:	4809      	ldr	r0, [pc, #36]	; (8001814 <arp_read+0x1d4>)
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <arp_read+0x1e8>)
 80017f0:	f000 ff5a 	bl	80026a8 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <arp_read+0x1d4>)
 80017f6:	f7fe fca9 	bl	800014c <strlen>
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	b282      	uxth	r2, r0
 8001800:	4904      	ldr	r1, [pc, #16]	; (8001814 <arp_read+0x1d4>)
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <arp_read+0x1dc>)
 8001804:	f7ff fdb0 	bl	8001368 <HAL_UART_Transmit>
	        res=2;
 8001808:	2002      	movs	r0, #2
 800180a:	e796      	b.n	800173a <arp_read+0xfa>
  uint8_t res=0;
 800180c:	2000      	movs	r0, #0
 800180e:	e794      	b.n	800173a <arp_read+0xfa>
 8001810:	20000014 	.word	0x20000014
 8001814:	20000218 	.word	0x20000218
 8001818:	08003108 	.word	0x08003108
 800181c:	200002b4 	.word	0x200002b4
 8001820:	08003139 	.word	0x08003139
 8001824:	0800314e 	.word	0x0800314e
 8001828:	08003176 	.word	0x08003176
 800182c:	0800318b 	.word	0x0800318b

08001830 <arp_send>:
//--------------------------------------------------
void arp_send(enc28j60_frame_ptr *frame)
{
  arp_msg_ptr *msg = (void*)frame->data;
  msg->op = ARP_REPLY;
 8001830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001834:	8282      	strh	r2, [r0, #20]
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 8001836:	4602      	mov	r2, r0
{
 8001838:	b410      	push	{r4}
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 800183a:	f852 1f16 	ldr.w	r1, [r2, #22]!
 800183e:	6201      	str	r1, [r0, #32]
 8001840:	8891      	ldrh	r1, [r2, #4]
 8001842:	8481      	strh	r1, [r0, #36]	; 0x24
  memcpy(msg->macaddr_src,macaddr,6);
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <arp_send+0x34>)
 8001846:	680c      	ldr	r4, [r1, #0]
 8001848:	8889      	ldrh	r1, [r1, #4]
 800184a:	f8c0 4016 	str.w	r4, [r0, #22]
 800184e:	8091      	strh	r1, [r2, #4]
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 8001850:	69c2      	ldr	r2, [r0, #28]
  memcpy(msg->ipaddr_src,ipaddr,4);
  eth_send(frame,sizeof(arp_msg_ptr));
 8001852:	211c      	movs	r1, #28
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 8001854:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <arp_send+0x38>)
}
 800185a:	bc10      	pop	{r4}
  memcpy(msg->ipaddr_src,ipaddr,4);
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	61c2      	str	r2, [r0, #28]
  eth_send(frame,sizeof(arp_msg_ptr));
 8001860:	f000 bc28 	b.w	80020b4 <eth_send>
 8001864:	2000000e 	.word	0x2000000e
 8001868:	20000014 	.word	0x20000014

0800186c <arp_request>:
//--------------------------------------------------
uint8_t arp_request(uint8_t *ip_addr)
{
 800186c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001870:	4605      	mov	r5, r0
 8001872:	2400      	movs	r4, #0
  uint8_t i;
  // Kiem tra xem dia chi da ton tai trong bang ARP hay chua va da qua thoi gian
  for(i=0;i<5;i++)
  {
	  if ((clock_cnt-arp_rec[i].sec)>43200)
 8001874:	f64a 09c0 	movw	r9, #43200	; 0xa8c0
 8001878:	4e40      	ldr	r6, [pc, #256]	; (800197c <arp_request+0x110>)
 800187a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800199c <arp_request+0x130>
{
 800187e:	b08b      	sub	sp, #44	; 0x2c
 8001880:	19a7      	adds	r7, r4, r6
	  if ((clock_cnt-arp_rec[i].sec)>43200)
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f8d8 3000 	ldr.w	r3, [r8]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	454b      	cmp	r3, r9
 800188c:	d905      	bls.n	800189a <arp_request+0x2e>
	  {
	     memset(arp_rec+(sizeof(arp_record_ptr)*i),0,sizeof(arp_record_ptr));// xoa het dua ve null
 800188e:	2210      	movs	r2, #16
 8001890:	2100      	movs	r1, #0
 8001892:	eb06 1004 	add.w	r0, r6, r4, lsl #4
 8001896:	f000 fefe 	bl	8002696 <memset>
	  }
	  if (!memcmp(arp_rec[i].ipaddr,ip_addr,4))
 800189a:	2204      	movs	r2, #4
 800189c:	4629      	mov	r1, r5
 800189e:	4638      	mov	r0, r7
 80018a0:	f000 feea 	bl	8002678 <memcmp>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d135      	bne.n	8001914 <arp_request+0xa8>
 80018a8:	4c34      	ldr	r4, [pc, #208]	; (800197c <arp_request+0x110>)
	  {
		  for(i=0;i<5;i++)
		  {
		  sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80018aa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80019a0 <arp_request+0x134>
 80018ae:	4d34      	ldr	r5, [pc, #208]	; (8001980 <arp_request+0x114>)
		    arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],(unsigned long)arp_rec[i].sec);
		  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80018b0:	4f34      	ldr	r7, [pc, #208]	; (8001984 <arp_request+0x118>)
 80018b2:	f104 0650 	add.w	r6, r4, #80	; 0x50
		  sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80018b6:	68e1      	ldr	r1, [r4, #12]
 80018b8:	7863      	ldrb	r3, [r4, #1]
 80018ba:	7822      	ldrb	r2, [r4, #0]
 80018bc:	9108      	str	r1, [sp, #32]
 80018be:	7a61      	ldrb	r1, [r4, #9]
 80018c0:	4628      	mov	r0, r5
 80018c2:	9107      	str	r1, [sp, #28]
 80018c4:	7a21      	ldrb	r1, [r4, #8]
 80018c6:	3410      	adds	r4, #16
 80018c8:	9106      	str	r1, [sp, #24]
 80018ca:	f814 1c09 	ldrb.w	r1, [r4, #-9]
 80018ce:	9105      	str	r1, [sp, #20]
 80018d0:	f814 1c0a 	ldrb.w	r1, [r4, #-10]
 80018d4:	9104      	str	r1, [sp, #16]
 80018d6:	f814 1c0b 	ldrb.w	r1, [r4, #-11]
 80018da:	9103      	str	r1, [sp, #12]
 80018dc:	f814 1c0c 	ldrb.w	r1, [r4, #-12]
 80018e0:	9102      	str	r1, [sp, #8]
 80018e2:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
 80018e6:	9101      	str	r1, [sp, #4]
 80018e8:	f814 1c0e 	ldrb.w	r1, [r4, #-14]
 80018ec:	9100      	str	r1, [sp, #0]
 80018ee:	4641      	mov	r1, r8
 80018f0:	f000 feda 	bl	80026a8 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80018f4:	4628      	mov	r0, r5
 80018f6:	f7fe fc29 	bl	800014c <strlen>
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	b282      	uxth	r2, r0
 8001900:	4629      	mov	r1, r5
 8001902:	4638      	mov	r0, r7
 8001904:	f7ff fd30 	bl	8001368 <HAL_UART_Transmit>
		  for(i=0;i<5;i++)
 8001908:	42a6      	cmp	r6, r4
 800190a:	d1d4      	bne.n	80018b6 <arp_request+0x4a>
		  }
	    return 0;
 800190c:	2000      	movs	r0, #0
  memcpy(frame->addr_dest,macbroadcast,6);
  memcpy(frame->addr_src,macaddr,6);
  frame->type = ETH_ARP;
  enc28j60_packetSend((void*)frame,sizeof(arp_msg_ptr) + sizeof(enc28j60_frame_ptr));
  return 1;
}
 800190e:	b00b      	add	sp, #44	; 0x2c
 8001910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001914:	3410      	adds	r4, #16
  for(i=0;i<5;i++)
 8001916:	2c50      	cmp	r4, #80	; 0x50
 8001918:	d1b2      	bne.n	8001880 <arp_request+0x14>
  msg->net_tp = ARP_ETH;
 800191a:	2300      	movs	r3, #0
  msg->ipaddr_len = 4;
 800191c:	2604      	movs	r6, #4
  msg->net_tp = ARP_ETH;
 800191e:	2401      	movs	r4, #1
  msg->proto_tp = ARP_IP;
 8001920:	2108      	movs	r1, #8
  msg->macaddr_len = 6;
 8001922:	2206      	movs	r2, #6
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001924:	4f18      	ldr	r7, [pc, #96]	; (8001988 <arp_request+0x11c>)
  msg->net_tp = ARP_ETH;
 8001926:	4819      	ldr	r0, [pc, #100]	; (800198c <arp_request+0x120>)
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001928:	683f      	ldr	r7, [r7, #0]
  msg->net_tp = ARP_ETH;
 800192a:	7383      	strb	r3, [r0, #14]
  msg->proto_tp = ARP_IP;
 800192c:	7443      	strb	r3, [r0, #17]
  msg->op = ARP_REQUEST;
 800192e:	7503      	strb	r3, [r0, #20]
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001930:	61c7      	str	r7, [r0, #28]
  memcpy(msg->macaddr_src,macaddr,6);
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <arp_request+0x124>)
  memcpy(msg->macaddr_dst,macnull,6);
 8001934:	4f17      	ldr	r7, [pc, #92]	; (8001994 <arp_request+0x128>)
  msg->ipaddr_len = 4;
 8001936:	74c6      	strb	r6, [r0, #19]
  memcpy(msg->macaddr_dst,macnull,6);
 8001938:	f8d7 e000 	ldr.w	lr, [r7]
  memcpy(msg->macaddr_src,macaddr,6);
 800193c:	681e      	ldr	r6, [r3, #0]
  memcpy(msg->macaddr_dst,macnull,6);
 800193e:	88bf      	ldrh	r7, [r7, #4]
  memcpy(msg->macaddr_src,macaddr,6);
 8001940:	889b      	ldrh	r3, [r3, #4]
  msg->proto_tp = ARP_IP;
 8001942:	7401      	strb	r1, [r0, #16]
  memcpy(msg->macaddr_dst,macnull,6);
 8001944:	8487      	strh	r7, [r0, #36]	; 0x24
  msg->net_tp = ARP_ETH;
 8001946:	73c4      	strb	r4, [r0, #15]
  msg->macaddr_len = 6;
 8001948:	7482      	strb	r2, [r0, #18]
  msg->op = ARP_REQUEST;
 800194a:	7544      	strb	r4, [r0, #21]
  memcpy(msg->macaddr_src,macaddr,6);
 800194c:	f8c0 6016 	str.w	r6, [r0, #22]
 8001950:	8343      	strh	r3, [r0, #26]
  memcpy(msg->macaddr_dst,macnull,6);
 8001952:	f8c0 e020 	str.w	lr, [r0, #32]
  memcpy(msg->ipaddr_dst,ip_addr,4);
 8001956:	682d      	ldr	r5, [r5, #0]
  frame->type = ETH_ARP;
 8001958:	7301      	strb	r1, [r0, #12]
  memcpy(msg->ipaddr_dst,ip_addr,4);
 800195a:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
  memcpy(frame->addr_dest,macbroadcast,6);
 800195e:	4d0e      	ldr	r5, [pc, #56]	; (8001998 <arp_request+0x12c>)
  memcpy(frame->addr_src,macaddr,6);
 8001960:	f8c0 6006 	str.w	r6, [r0, #6]
  memcpy(frame->addr_dest,macbroadcast,6);
 8001964:	682f      	ldr	r7, [r5, #0]
 8001966:	88ad      	ldrh	r5, [r5, #4]
 8001968:	6007      	str	r7, [r0, #0]
 800196a:	8085      	strh	r5, [r0, #4]
  memcpy(frame->addr_src,macaddr,6);
 800196c:	8143      	strh	r3, [r0, #10]
  frame->type = ETH_ARP;
 800196e:	7342      	strb	r2, [r0, #13]
  enc28j60_packetSend((void*)frame,sizeof(arp_msg_ptr) + sizeof(enc28j60_frame_ptr));
 8001970:	212a      	movs	r1, #42	; 0x2a
 8001972:	f000 fa27 	bl	8001dc4 <enc28j60_packetSend>
  return 1;
 8001976:	4620      	mov	r0, r4
 8001978:	e7c9      	b.n	800190e <arp_request+0xa2>
 800197a:	bf00      	nop
 800197c:	20000264 	.word	0x20000264
 8001980:	20000218 	.word	0x20000218
 8001984:	200002b4 	.word	0x200002b4
 8001988:	20000014 	.word	0x20000014
 800198c:	200003b6 	.word	0x200003b6
 8001990:	2000000e 	.word	0x2000000e
 8001994:	20000209 	.word	0x20000209
 8001998:	20000008 	.word	0x20000008
 800199c:	20000214 	.word	0x20000214
 80019a0:	080031bc 	.word	0x080031bc

080019a4 <arp_table_fill>:
//--------------------------------------------------
void arp_table_fill(enc28j60_frame_ptr *frame)
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;
  arp_msg_ptr *msg = (void*)frame->data;
  memcpy(arp_rec[current_arp_index].ipaddr,msg->ipaddr_src,4);
 80019a8:	4d26      	ldr	r5, [pc, #152]	; (8001a44 <arp_table_fill+0xa0>)
 80019aa:	69c2      	ldr	r2, [r0, #28]
 80019ac:	7829      	ldrb	r1, [r5, #0]
 80019ae:	4c26      	ldr	r4, [pc, #152]	; (8001a48 <arp_table_fill+0xa4>)
 80019b0:	010b      	lsls	r3, r1, #4
 80019b2:	511a      	str	r2, [r3, r4]
 80019b4:	191e      	adds	r6, r3, r4
  memcpy(arp_rec[current_arp_index].macaddr,msg->macaddr_src,6);
 80019b6:	1d1a      	adds	r2, r3, #4
 80019b8:	4603      	mov	r3, r0
 80019ba:	f853 0f16 	ldr.w	r0, [r3, #22]!
 80019be:	1917      	adds	r7, r2, r4
 80019c0:	5110      	str	r0, [r2, r4]
 80019c2:	889b      	ldrh	r3, [r3, #4]
  arp_rec[current_arp_index].sec = clock_cnt;
  if(current_arp_index<4) current_arp_index++;
 80019c4:	2903      	cmp	r1, #3
  memcpy(arp_rec[current_arp_index].macaddr,msg->macaddr_src,6);
 80019c6:	80bb      	strh	r3, [r7, #4]
  arp_rec[current_arp_index].sec = clock_cnt;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <arp_table_fill+0xa8>)
{
 80019ca:	b08a      	sub	sp, #40	; 0x28
  arp_rec[current_arp_index].sec = clock_cnt;
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60f3      	str	r3, [r6, #12]
  if(current_arp_index<4) current_arp_index++;
 80019d0:	d835      	bhi.n	8001a3e <arp_table_fill+0x9a>
 80019d2:	3101      	adds	r1, #1
 80019d4:	7029      	strb	r1, [r5, #0]
 80019d6:	4c1c      	ldr	r4, [pc, #112]	; (8001a48 <arp_table_fill+0xa4>)
  else current_arp_index=0;
  // In bang ARP
  for(i=0;i<5;i++)
  {
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80019d8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001a58 <arp_table_fill+0xb4>
 80019dc:	4d1c      	ldr	r5, [pc, #112]	; (8001a50 <arp_table_fill+0xac>)
      arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],(unsigned long)arp_rec[i].sec);
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019de:	4f1d      	ldr	r7, [pc, #116]	; (8001a54 <arp_table_fill+0xb0>)
 80019e0:	f104 0650 	add.w	r6, r4, #80	; 0x50
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80019e4:	68e1      	ldr	r1, [r4, #12]
 80019e6:	7863      	ldrb	r3, [r4, #1]
 80019e8:	9108      	str	r1, [sp, #32]
 80019ea:	7a61      	ldrb	r1, [r4, #9]
 80019ec:	7822      	ldrb	r2, [r4, #0]
 80019ee:	9107      	str	r1, [sp, #28]
 80019f0:	7a21      	ldrb	r1, [r4, #8]
 80019f2:	4628      	mov	r0, r5
 80019f4:	9106      	str	r1, [sp, #24]
 80019f6:	79e1      	ldrb	r1, [r4, #7]
 80019f8:	3410      	adds	r4, #16
 80019fa:	9105      	str	r1, [sp, #20]
 80019fc:	f814 1c0a 	ldrb.w	r1, [r4, #-10]
 8001a00:	9104      	str	r1, [sp, #16]
 8001a02:	f814 1c0b 	ldrb.w	r1, [r4, #-11]
 8001a06:	9103      	str	r1, [sp, #12]
 8001a08:	f814 1c0c 	ldrb.w	r1, [r4, #-12]
 8001a0c:	9102      	str	r1, [sp, #8]
 8001a0e:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
 8001a12:	9101      	str	r1, [sp, #4]
 8001a14:	f814 1c0e 	ldrb.w	r1, [r4, #-14]
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	f000 fe44 	bl	80026a8 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001a20:	4628      	mov	r0, r5
 8001a22:	f7fe fb93 	bl	800014c <strlen>
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	b282      	uxth	r2, r0
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4638      	mov	r0, r7
 8001a30:	f7ff fc9a 	bl	8001368 <HAL_UART_Transmit>
  for(i=0;i<5;i++)
 8001a34:	42a6      	cmp	r6, r4
 8001a36:	d1d5      	bne.n	80019e4 <arp_table_fill+0x40>
  }
}
 8001a38:	b00a      	add	sp, #40	; 0x28
 8001a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else current_arp_index=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	702b      	strb	r3, [r5, #0]
 8001a42:	e7c8      	b.n	80019d6 <arp_table_fill+0x32>
 8001a44:	20000208 	.word	0x20000208
 8001a48:	20000264 	.word	0x20000264
 8001a4c:	20000214 	.word	0x20000214
 8001a50:	20000218 	.word	0x20000218
 8001a54:	200002b4 	.word	0x200002b4
 8001a58:	080031bc 	.word	0x080031bc

08001a5c <SPIx_WriteRead>:
{
 LD_ON;
}
//--------------------------------------------------
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001a5c:	b510      	push	{r4, lr}
  uint8_t receivedbyte = 0;
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  uint8_t receivedbyte = 0;
 8001a62:	2400      	movs	r4, #0
{
 8001a64:	b086      	sub	sp, #24
  uint8_t receivedbyte = 0;
 8001a66:	aa06      	add	r2, sp, #24
{
 8001a68:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t receivedbyte = 0;
 8001a6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001a70:	f10d 010f 	add.w	r1, sp, #15
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <SPIx_WriteRead+0x38>)
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f7ff f85a 	bl	8000b32 <HAL_SPI_TransmitReceive>
 8001a7e:	b120      	cbz	r0, 8001a8a <SPIx_WriteRead+0x2e>
 LD_ON;
 8001a80:	4622      	mov	r2, r4
 8001a82:	2120      	movs	r1, #32
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <SPIx_WriteRead+0x3c>)
 8001a86:	f7fe fd65 	bl	8000554 <HAL_GPIO_WritePin>
  {
    Error();
  }
  return receivedbyte;
}
 8001a8a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	200002f4 	.word	0x200002f4
 8001a98:	40010c00 	.word	0x40010c00

08001a9c <enc28j60_readBuf>:
  SS_DESELECT();
  return result;
}
//--------------------------------------------------
static void enc28j60_readBuf(uint16_t len,uint8_t* data)
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 SS_SELECT();
 8001a9e:	2200      	movs	r2, #0
{
 8001aa0:	4605      	mov	r5, r0
 8001aa2:	460c      	mov	r4, r1
 SS_SELECT();
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <enc28j60_readBuf+0x38>)
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	f7fe fd54 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001aac:	203a      	movs	r0, #58	; 0x3a
 8001aae:	f7ff ffd5 	bl	8001a5c <SPIx_WriteRead>
 8001ab2:	4425      	add	r5, r4
 SPI_SendByte(ENC28J60_READ_BUF_MEM);
 while(len--){
 8001ab4:	42ac      	cmp	r4, r5
 8001ab6:	d106      	bne.n	8001ac6 <enc28j60_readBuf+0x2a>
  *data++=SPIx_WriteRead(0x00);
 }
 SS_DESELECT();
 8001ab8:	2201      	movs	r2, #1
}
 8001aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 SS_DESELECT();
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <enc28j60_readBuf+0x38>)
 8001ac2:	f7fe bd47 	b.w	8000554 <HAL_GPIO_WritePin>
  *data++=SPIx_WriteRead(0x00);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff ffc8 	bl	8001a5c <SPIx_WriteRead>
 8001acc:	f804 0b01 	strb.w	r0, [r4], #1
 8001ad0:	e7f0      	b.n	8001ab4 <enc28j60_readBuf+0x18>
 8001ad2:	bf00      	nop
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <enc28j60_writeBuf>:
//--------------------------------------------------
static void enc28j60_writeBuf(uint16_t len,uint8_t* data)
{
 8001ad8:	b538      	push	{r3, r4, r5, lr}
  SS_SELECT();
 8001ada:	2200      	movs	r2, #0
{
 8001adc:	4605      	mov	r5, r0
 8001ade:	460c      	mov	r4, r1
  SS_SELECT();
 8001ae0:	480a      	ldr	r0, [pc, #40]	; (8001b0c <enc28j60_writeBuf+0x34>)
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	f7fe fd36 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001ae8:	207a      	movs	r0, #122	; 0x7a
 8001aea:	f7ff ffb7 	bl	8001a5c <SPIx_WriteRead>
 8001aee:	4425      	add	r5, r4
  SPI_SendByte(ENC28J60_WRITE_BUF_MEM);
  while(len--)
 8001af0:	42ac      	cmp	r4, r5
 8001af2:	d106      	bne.n	8001b02 <enc28j60_writeBuf+0x2a>
    SPI_SendByte(*data++);
  SS_DESELECT();
 8001af4:	2201      	movs	r2, #1
}
 8001af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SS_DESELECT();
 8001afa:	2110      	movs	r1, #16
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <enc28j60_writeBuf+0x34>)
 8001afe:	f7fe bd29 	b.w	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001b02:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001b06:	f7ff ffa9 	bl	8001a5c <SPIx_WriteRead>
 8001b0a:	e7f1      	b.n	8001af0 <enc28j60_writeBuf+0x18>
 8001b0c:	40010800 	.word	0x40010800

08001b10 <SPI_ReceiveByte>:
 uint8_t bt = SPIx_WriteRead(0xFF);
 8001b10:	20ff      	movs	r0, #255	; 0xff
 8001b12:	f7ff bfa3 	b.w	8001a5c <SPIx_WriteRead>
	...

08001b18 <enc28j60_readOp.constprop.0>:
static uint8_t enc28j60_readOp(uint8_t op,uint8_t addres)
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	4604      	mov	r4, r0
 SS_SELECT();
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2110      	movs	r1, #16
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <enc28j60_readOp.constprop.0+0x3c>)
 SPI_SendByte(op|(addres&ADDR_MASK));
 8001b22:	b264      	sxtb	r4, r4
 SS_SELECT();
 8001b24:	f7fe fd16 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001b28:	f004 001f 	and.w	r0, r4, #31
 8001b2c:	f7ff ff96 	bl	8001a5c <SPIx_WriteRead>
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff ff93 	bl	8001a5c <SPIx_WriteRead>
  if(addres & 0x80) SPI_ReceiveByte();
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	da01      	bge.n	8001b3e <enc28j60_readOp.constprop.0+0x26>
 8001b3a:	f7ff ffe9 	bl	8001b10 <SPI_ReceiveByte>
 result=SPI_ReceiveByte();
 8001b3e:	f7ff ffe7 	bl	8001b10 <SPI_ReceiveByte>
 8001b42:	4604      	mov	r4, r0
  SS_DESELECT();
 8001b44:	2201      	movs	r2, #1
 8001b46:	2110      	movs	r1, #16
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <enc28j60_readOp.constprop.0+0x3c>)
 8001b4a:	f7fe fd03 	bl	8000554 <HAL_GPIO_WritePin>
}
 8001b4e:	4620      	mov	r0, r4
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	bf00      	nop
 8001b54:	40010800 	.word	0x40010800

08001b58 <enc28j60_writeOp>:
{
 8001b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4607      	mov	r7, r0
 8001b5e:	4616      	mov	r6, r2
 SS_SELECT();
 8001b60:	4d0a      	ldr	r5, [pc, #40]	; (8001b8c <enc28j60_writeOp+0x34>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	4628      	mov	r0, r5
 8001b68:	f7fe fcf4 	bl	8000554 <HAL_GPIO_WritePin>
 SPI_SendByte(op|(addres&ADDR_MASK));
 8001b6c:	f004 001f 	and.w	r0, r4, #31
 SPIx_WriteRead(bt);
 8001b70:	4338      	orrs	r0, r7
 8001b72:	f7ff ff73 	bl	8001a5c <SPIx_WriteRead>
 8001b76:	4630      	mov	r0, r6
 8001b78:	f7ff ff70 	bl	8001a5c <SPIx_WriteRead>
 SS_DESELECT();
 8001b7c:	4628      	mov	r0, r5
}
 8001b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 SS_DESELECT();
 8001b82:	2201      	movs	r2, #1
 8001b84:	2110      	movs	r1, #16
 8001b86:	f7fe bce5 	b.w	8000554 <HAL_GPIO_WritePin>
 8001b8a:	bf00      	nop
 8001b8c:	40010800 	.word	0x40010800

08001b90 <enc28j60_SetBank>:
//--------------------------------------------------
static void enc28j60_SetBank(uint8_t addres)
{
 8001b90:	b538      	push	{r3, r4, r5, lr}
 if ((addres&BANK_MASK)!=Enc28j60Bank)
 8001b92:	4d0a      	ldr	r5, [pc, #40]	; (8001bbc <enc28j60_SetBank+0x2c>)
 8001b94:	f000 0460 	and.w	r4, r0, #96	; 0x60
 8001b98:	782b      	ldrb	r3, [r5, #0]
 8001b9a:	42a3      	cmp	r3, r4
 8001b9c:	d00c      	beq.n	8001bb8 <enc28j60_SetBank+0x28>
 {
  enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_BSEL1|ECON1_BSEL0);
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	211f      	movs	r1, #31
 8001ba2:	20a0      	movs	r0, #160	; 0xa0
 8001ba4:	f7ff ffd8 	bl	8001b58 <enc28j60_writeOp>
  Enc28j60Bank = addres&BANK_MASK;
 8001ba8:	702c      	strb	r4, [r5, #0]
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8001baa:	0962      	lsrs	r2, r4, #5
 8001bac:	211f      	movs	r1, #31
 }
}
 8001bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8001bb2:	2080      	movs	r0, #128	; 0x80
 8001bb4:	f7ff bfd0 	b.w	8001b58 <enc28j60_writeOp>
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000020f 	.word	0x2000020f

08001bc0 <enc28j60_readRegByte>:
 enc28j60_SetBank(addres);
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
}
//--------------------------------------------------
static uint8_t enc28j60_readRegByte(uint8_t addres)
{
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4604      	mov	r4, r0
 enc28j60_SetBank(addres);
 8001bc4:	f7ff ffe4 	bl	8001b90 <enc28j60_SetBank>
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 8001bc8:	4620      	mov	r0, r4
}
 8001bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 8001bce:	f7ff bfa3 	b.w	8001b18 <enc28j60_readOp.constprop.0>

08001bd2 <enc28j60_writeRegByte>:
{
 8001bd2:	b538      	push	{r3, r4, r5, lr}
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	460d      	mov	r5, r1
 enc28j60_SetBank(addres);
 8001bd8:	f7ff ffda 	bl	8001b90 <enc28j60_SetBank>
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 8001bdc:	462a      	mov	r2, r5
 8001bde:	4621      	mov	r1, r4
}
 8001be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 8001be4:	2040      	movs	r0, #64	; 0x40
 8001be6:	f7ff bfb7 	b.w	8001b58 <enc28j60_writeOp>

08001bea <enc28j60_writeReg>:
//--------------------------------------------------
static void enc28j60_writeReg(uint8_t addres,uint16_t data)
{
 8001bea:	b538      	push	{r3, r4, r5, lr}
 8001bec:	4604      	mov	r4, r0
 8001bee:	460d      	mov	r5, r1
 enc28j60_writeRegByte(addres, data);
 8001bf0:	b2c9      	uxtb	r1, r1
 8001bf2:	f7ff ffee 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(addres+1, data>>8);
 8001bf6:	1c60      	adds	r0, r4, #1
 8001bf8:	0a29      	lsrs	r1, r5, #8
 8001bfa:	b2c0      	uxtb	r0, r0
}
 8001bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeRegByte(addres+1, data>>8);
 8001c00:	f7ff bfe7 	b.w	8001bd2 <enc28j60_writeRegByte>

08001c04 <enc28j60_writePhy>:
//--------------------------------------------------
static void enc28j60_writePhy(uint8_t addres,uint16_t data)
{
 8001c04:	b510      	push	{r4, lr}
 8001c06:	460c      	mov	r4, r1
  enc28j60_writeRegByte(MIREGADR, addres);
 8001c08:	4601      	mov	r1, r0
 8001c0a:	20d4      	movs	r0, #212	; 0xd4
 8001c0c:	f7ff ffe1 	bl	8001bd2 <enc28j60_writeRegByte>
  enc28j60_writeReg(MIWR, data);
 8001c10:	4621      	mov	r1, r4
 8001c12:	20d6      	movs	r0, #214	; 0xd6
 8001c14:	f7ff ffe9 	bl	8001bea <enc28j60_writeReg>
  while(enc28j60_readRegByte(MISTAT)&MISTAT_BUSY)
 8001c18:	20ea      	movs	r0, #234	; 0xea
 8001c1a:	f7ff ffd1 	bl	8001bc0 <enc28j60_readRegByte>
 8001c1e:	07c3      	lsls	r3, r0, #31
 8001c20:	d4fa      	bmi.n	8001c18 <enc28j60_writePhy+0x14>
  ;
}
 8001c22:	bd10      	pop	{r4, pc}

08001c24 <enc28j60_ini>:
//--------------------------------------------------
void enc28j60_ini(void)
{
 8001c24:	b510      	push	{r4, lr}
 LD_OFF;
 8001c26:	2201      	movs	r2, #1
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4843      	ldr	r0, [pc, #268]	; (8001d38 <enc28j60_ini+0x114>)
 8001c2c:	f7fe fc92 	bl	8000554 <HAL_GPIO_WritePin>
 enc28j60_writeOp(ENC28J60_SOFT_RESET,0,ENC28J60_SOFT_RESET);
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	2100      	movs	r1, #0
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7ff ff8f 	bl	8001b58 <enc28j60_writeOp>
 HAL_Delay(2);
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7fe fad6 	bl	80001ec <HAL_Delay>
 //Kiem tra lai moi thu da khoi dong lai chua
 while(!enc28j60_readOp(ENC28J60_READ_CTRL_REG,ESTAT)&ESTAT_CLKRDY)
 8001c40:	201d      	movs	r0, #29
 8001c42:	f7ff ff69 	bl	8001b18 <enc28j60_readOp.constprop.0>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	d0fa      	beq.n	8001c40 <enc28j60_ini+0x1c>
 ;
 // Cau hinh bo dem 
 enc28j60_writeReg(ERXST,RXSTART_INIT);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f7ff ffcc 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeReg(ERXRDPT,RXSTART_INIT);
 8001c52:	2100      	movs	r1, #0
 8001c54:	200c      	movs	r0, #12
 8001c56:	f7ff ffc8 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeReg(ERXND,RXSTOP_INIT);
 8001c5a:	f640 31ff 	movw	r1, #3071	; 0xbff
 8001c5e:	200a      	movs	r0, #10
 8001c60:	f7ff ffc3 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeReg(ETXST,TXSTART_INIT);
 8001c64:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f7ff ffbe 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeReg(ETXND,TXSTOP_INIT);
 8001c6e:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8001c72:	2006      	movs	r0, #6
 8001c74:	f7ff ffb9 	bl	8001bea <enc28j60_writeReg>
 // Enable Broadcast
 enc28j60_writeRegByte(ERXFCON,enc28j60_readRegByte(ERXFCON)|ERXFCON_BCEN);
 8001c78:	2038      	movs	r0, #56	; 0x38
 8001c7a:	f7ff ffa1 	bl	8001bc0 <enc28j60_readRegByte>
 8001c7e:	f040 0101 	orr.w	r1, r0, #1
 8001c82:	b2c9      	uxtb	r1, r1
 8001c84:	2038      	movs	r0, #56	; 0x38
 8001c86:	f7ff ffa4 	bl	8001bd2 <enc28j60_writeRegByte>
 // Cau hinh lop lien ket
 enc28j60_writeRegByte(MACON1,MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8001c8a:	210d      	movs	r1, #13
 8001c8c:	20c0      	movs	r0, #192	; 0xc0
 8001c8e:	f7ff ffa0 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MACON2,0x00);
 8001c92:	2100      	movs	r1, #0
 8001c94:	20c1      	movs	r0, #193	; 0xc1
 8001c96:	f7ff ff9c 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,MACON3,MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8001c9a:	2232      	movs	r2, #50	; 0x32
 8001c9c:	21c2      	movs	r1, #194	; 0xc2
 8001c9e:	2080      	movs	r0, #128	; 0x80
 8001ca0:	f7ff ff5a 	bl	8001b58 <enc28j60_writeOp>
 enc28j60_writeReg(MAIPG,0x0C12);
 8001ca4:	f640 4112 	movw	r1, #3090	; 0xc12
 8001ca8:	20c6      	movs	r0, #198	; 0xc6
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8001caa:	4c24      	ldr	r4, [pc, #144]	; (8001d3c <enc28j60_ini+0x118>)
 enc28j60_writeReg(MAIPG,0x0C12);
 8001cac:	f7ff ff9d 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 8001cb0:	2112      	movs	r1, #18
 8001cb2:	20c4      	movs	r0, #196	; 0xc4
 8001cb4:	f7ff ff8d 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 8001cb8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001cbc:	20ca      	movs	r0, #202	; 0xca
 8001cbe:	f7ff ff94 	bl	8001bea <enc28j60_writeReg>
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8001cc2:	7821      	ldrb	r1, [r4, #0]
 8001cc4:	20e4      	movs	r0, #228	; 0xe4
 8001cc6:	f7ff ff84 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR4,macaddr[1]);
 8001cca:	7861      	ldrb	r1, [r4, #1]
 8001ccc:	20e5      	movs	r0, #229	; 0xe5
 8001cce:	f7ff ff80 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR3,macaddr[2]);
 8001cd2:	78a1      	ldrb	r1, [r4, #2]
 8001cd4:	20e2      	movs	r0, #226	; 0xe2
 8001cd6:	f7ff ff7c 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR2,macaddr[3]);
 8001cda:	78e1      	ldrb	r1, [r4, #3]
 8001cdc:	20e3      	movs	r0, #227	; 0xe3
 8001cde:	f7ff ff78 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR1,macaddr[4]);
 8001ce2:	7921      	ldrb	r1, [r4, #4]
 8001ce4:	20e0      	movs	r0, #224	; 0xe0
 8001ce6:	f7ff ff74 	bl	8001bd2 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR0,macaddr[5]);
 8001cea:	7961      	ldrb	r1, [r4, #5]
 8001cec:	20e1      	movs	r0, #225	; 0xe1
 8001cee:	f7ff ff70 	bl	8001bd2 <enc28j60_writeRegByte>
 // Dieu chinh lop vat ly 
 enc28j60_writePhy(PHCON2,PHCON2_HDLDIS);//vo hieu hoa loopback
 8001cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f7ff ff84 	bl	8001c04 <enc28j60_writePhy>
 enc28j60_writePhy(PHLCON,PHLCON_LACFG2|PHLCON_LBCFG2|PHLCON_LBCFG1|PHLCON_LBCFG0|PHLCON_LFRQ0|PHLCON_STRCH); // Den LED
 8001cfc:	f240 4176 	movw	r1, #1142	; 0x476
 8001d00:	2014      	movs	r0, #20
 8001d02:	f7ff ff7f 	bl	8001c04 <enc28j60_writePhy>
 enc28j60_SetBank (ECON1);
 8001d06:	201f      	movs	r0, #31
 8001d08:	f7ff ff42 	bl	8001b90 <enc28j60_SetBank>
 //enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN); // allow receiving packets
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	211f      	movs	r1, #31
 8001d10:	2080      	movs	r0, #128	; 0x80
 8001d12:	f7ff ff21 	bl	8001b58 <enc28j60_writeOp>
 // Switch on the frequency divider of the generator 2, that is, the frequency will be 12.5 MHz
 enc28j60_writeRegByte(ECOCON,0x02);
 8001d16:	2102      	movs	r1, #2
 8001d18:	2075      	movs	r0, #117	; 0x75
 8001d1a:	f7ff ff5a 	bl	8001bd2 <enc28j60_writeRegByte>
	micros *= (SystemCoreClock / 1000000) / 5;
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <enc28j60_ini+0x11c>)
 8001d20:	4908      	ldr	r1, [pc, #32]	; (8001d44 <enc28j60_ini+0x120>)
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	230f      	movs	r3, #15
 8001d26:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d2a:	4353      	muls	r3, r2
	while (micros--)
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d1fb      	bne.n	8001d2c <enc28j60_ini+0x108>
 DelayMicro(15);
}
 8001d34:	bd10      	pop	{r4, pc}
 8001d36:	bf00      	nop
 8001d38:	40010c00 	.word	0x40010c00
 8001d3c:	2000000e 	.word	0x2000000e
 8001d40:	20000018 	.word	0x20000018
 8001d44:	004c4b40 	.word	0x004c4b40

08001d48 <enc28j60_packetReceive>:
//--------------------------------------------------
uint16_t enc28j60_packetReceive(uint8_t *buf,uint16_t buflen)
{
 8001d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d4a:	4605      	mov	r5, r0
 uint16_t len=0;
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001d4c:	2039      	movs	r0, #57	; 0x39
{
 8001d4e:	460e      	mov	r6, r1
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001d50:	f7ff ff36 	bl	8001bc0 <enc28j60_readRegByte>
 8001d54:	b388      	cbz	r0, 8001dba <enc28j60_packetReceive+0x72>
 {
   enc28j60_writeReg(ERDPT,gNextPacketPtr);
 8001d56:	4f1a      	ldr	r7, [pc, #104]	; (8001dc0 <enc28j60_packetReceive+0x78>)
 8001d58:	2000      	movs	r0, #0
 8001d5a:	8839      	ldrh	r1, [r7, #0]
 8001d5c:	f7ff ff45 	bl	8001bea <enc28j60_writeReg>
   struct{
    uint16_t nextPacket;
    uint16_t byteCount;
    uint16_t status;
   } header;
	 enc28j60_readBuf(sizeof header,(uint8_t*)&header);
 8001d60:	2006      	movs	r0, #6
 8001d62:	4669      	mov	r1, sp
 8001d64:	f7ff fe9a 	bl	8001a9c <enc28j60_readBuf>
	 gNextPacketPtr=header.nextPacket;
	 len=header.byteCount-4;//remove the CRC count
	 if(len>buflen) len=buflen;
	 if((header.status&0x80)==0) len=0;
 8001d68:	f8bd 0004 	ldrh.w	r0, [sp, #4]
	 gNextPacketPtr=header.nextPacket;
 8001d6c:	f8bd 3000 	ldrh.w	r3, [sp]
	 if((header.status&0x80)==0) len=0;
 8001d70:	f010 0480 	ands.w	r4, r0, #128	; 0x80
	 gNextPacketPtr=header.nextPacket;
 8001d74:	603b      	str	r3, [r7, #0]
	 if((header.status&0x80)==0) len=0;
 8001d76:	d00a      	beq.n	8001d8e <enc28j60_packetReceive+0x46>
	 len=header.byteCount-4;//remove the CRC count
 8001d78:	f8bd 4002 	ldrh.w	r4, [sp, #2]
   else enc28j60_readBuf(len, buf);
 8001d7c:	4629      	mov	r1, r5
	 len=header.byteCount-4;//remove the CRC count
 8001d7e:	3c04      	subs	r4, #4
 8001d80:	b2a4      	uxth	r4, r4
 8001d82:	42b4      	cmp	r4, r6
 8001d84:	bf28      	it	cs
 8001d86:	4634      	movcs	r4, r6
   else enc28j60_readBuf(len, buf);
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fe87 	bl	8001a9c <enc28j60_readBuf>
	 buf[len]=0;
 8001d8e:	2300      	movs	r3, #0
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 8001d90:	6839      	ldr	r1, [r7, #0]
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
   else
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d92:	200c      	movs	r0, #12
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 8001d94:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d98:	bfd6      	itet	le
 8001d9a:	f101 31ff 	addle.w	r1, r1, #4294967295
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
 8001d9e:	f640 31ff 	movwgt	r1, #3071	; 0xbff
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001da2:	b289      	uxthle	r1, r1
	 buf[len]=0;
 8001da4:	552b      	strb	r3, [r5, r4]
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001da6:	f7ff ff20 	bl	8001bea <enc28j60_writeReg>
	 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON2,ECON2_PKTDEC);
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	211e      	movs	r1, #30
 8001dae:	2080      	movs	r0, #128	; 0x80
 8001db0:	f7ff fed2 	bl	8001b58 <enc28j60_writeOp>
 }
 return len;
}
 8001db4:	4620      	mov	r0, r4
 8001db6:	b003      	add	sp, #12
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 uint16_t len=0;
 8001dba:	4604      	mov	r4, r0
 8001dbc:	e7fa      	b.n	8001db4 <enc28j60_packetReceive+0x6c>
 8001dbe:	bf00      	nop
 8001dc0:	20000210 	.word	0x20000210

08001dc4 <enc28j60_packetSend>:
//--------------------------------------------------
void enc28j60_packetSend(uint8_t *buf,uint16_t buflen)
{
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	460c      	mov	r4, r1
  while(enc28j60_readOp(ENC28J60_READ_CTRL_REG,ECON1)&ECON1_TXRTS)
 8001dca:	201f      	movs	r0, #31
 8001dcc:	f7ff fea4 	bl	8001b18 <enc28j60_readOp.constprop.0>
 8001dd0:	0703      	lsls	r3, r0, #28
 8001dd2:	d41c      	bmi.n	8001e0e <enc28j60_packetSend+0x4a>
    {
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
    }
  }
  enc28j60_writeReg(EWRPT,TXSTART_INIT);
 8001dd4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff ff06 	bl	8001bea <enc28j60_writeReg>
  enc28j60_writeReg(ETXND,TXSTART_INIT+buflen);
 8001dde:	f504 6140 	add.w	r1, r4, #3072	; 0xc00
 8001de2:	b289      	uxth	r1, r1
 8001de4:	2006      	movs	r0, #6
 8001de6:	f7ff ff00 	bl	8001bea <enc28j60_writeReg>
  enc28j60_writeBuf(1,(uint8_t*)"x00");
 8001dea:	4911      	ldr	r1, [pc, #68]	; (8001e30 <enc28j60_packetSend+0x6c>)
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff fe73 	bl	8001ad8 <enc28j60_writeBuf>
  enc28j60_writeBuf(buflen,buf);
 8001df2:	4629      	mov	r1, r5
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff fe6f 	bl	8001ad8 <enc28j60_writeBuf>
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRTS);
 8001dfa:	2080      	movs	r0, #128	; 0x80
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	211f      	movs	r1, #31
 8001e00:	f7ff feaa 	bl	8001b58 <enc28j60_writeOp>
  // a small delay, for some reason without it does not work in downloaded networks
  HAL_Delay(1);
}
 8001e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(1);
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7fe b9ef 	b.w	80001ec <HAL_Delay>
		if(enc28j60_readRegByte(EIR)& EIR_TXERIF)
 8001e0e:	201c      	movs	r0, #28
 8001e10:	f7ff fed6 	bl	8001bc0 <enc28j60_readRegByte>
 8001e14:	0782      	lsls	r2, r0, #30
 8001e16:	d5d8      	bpl.n	8001dca <enc28j60_packetSend+0x6>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	211f      	movs	r1, #31
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f7ff fe9b 	bl	8001b58 <enc28j60_writeOp>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	211f      	movs	r1, #31
 8001e26:	20a0      	movs	r0, #160	; 0xa0
 8001e28:	f7ff fe96 	bl	8001b58 <enc28j60_writeOp>
 8001e2c:	e7cd      	b.n	8001dca <enc28j60_packetSend+0x6>
 8001e2e:	bf00      	nop
 8001e30:	080031ef 	.word	0x080031ef

08001e34 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001e38:	b530      	push	{r4, r5, lr}
 8001e3a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e3c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e3e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e40:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e42:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e44:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001e46:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e4a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e4c:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e4e:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e50:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001e54:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e56:	f7fe fb83 	bl	8000560 <HAL_RCC_OscConfig>
 8001e5a:	b100      	cbz	r0, 8001e5e <SystemClock_Config+0x2a>
 8001e5c:	e7fe      	b.n	8001e5c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5e:	230f      	movs	r3, #15
 8001e60:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e66:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e68:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e70:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e72:	f7fe fd3d 	bl	80008f0 <HAL_RCC_ClockConfig>
 8001e76:	4604      	mov	r4, r0
 8001e78:	b100      	cbz	r0, 8001e7c <SystemClock_Config+0x48>
 8001e7a:	e7fe      	b.n	8001e7a <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e7c:	f7fe fddc 	bl	8000a38 <HAL_RCC_GetHCLKFreq>
 8001e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e84:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e88:	f7fe fa14 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f7fe fa27 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e92:	4622      	mov	r2, r4
 8001e94:	4621      	mov	r1, r4
 8001e96:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9a:	f7fe f9cb 	bl	8000234 <HAL_NVIC_SetPriority>
}
 8001e9e:	b011      	add	sp, #68	; 0x44
 8001ea0:	bd30      	pop	{r4, r5, pc}
	...

08001ea4 <main>:
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001ea8:	f7fe f97c 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001eac:	f7ff ffc2 	bl	8001e34 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eb2:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eb6:	4848      	ldr	r0, [pc, #288]	; (8001fd8 <main+0x134>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	f002 0220 	and.w	r2, r2, #32
 8001ec6:	9201      	str	r2, [sp, #4]
 8001ec8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ecc:	2720      	movs	r7, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	f042 0204 	orr.w	r2, r2, #4
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	f002 0204 	and.w	r2, r2, #4
 8001eda:	9202      	str	r2, [sp, #8]
 8001edc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	f042 0208 	orr.w	r2, r2, #8
 8001ee4:	619a      	str	r2, [r3, #24]
 8001ee6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	9303      	str	r3, [sp, #12]
 8001ef0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ef2:	f7fe fb2f 	bl	8000554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2120      	movs	r1, #32
 8001efa:	4838      	ldr	r0, [pc, #224]	; (8001fdc <main+0x138>)
 8001efc:	f7fe fb2a 	bl	8000554 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f00:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	a906      	add	r1, sp, #24
 8001f04:	4834      	ldr	r0, [pc, #208]	; (8001fd8 <main+0x134>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f06:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f08:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f0a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f7fe fa42 	bl	8000394 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	4832      	ldr	r0, [pc, #200]	; (8001fdc <main+0x138>)
 8001f12:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f14:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f18:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f7fe fa3b 	bl	8000394 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1e:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 8001f22:	482f      	ldr	r0, [pc, #188]	; (8001fe0 <main+0x13c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <main+0x140>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f26:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2e:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f30:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f32:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f34:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f36:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f38:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f3a:	2208      	movs	r2, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f3e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f40:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f42:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f44:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001f46:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f48:	f7fe fef0 	bl	8000d2c <HAL_SPI_Init>
 8001f4c:	b100      	cbz	r0, 8001f50 <main+0xac>
 8001f4e:	e7fe      	b.n	8001f4e <main+0xaa>
  huart1.Init.BaudRate = 230400;
 8001f50:	f44f 3361 	mov.w	r3, #230400	; 0x38400
  huart1.Instance = USART1;
 8001f54:	4d24      	ldr	r5, [pc, #144]	; (8001fe8 <main+0x144>)
  huart1.Init.BaudRate = 230400;
 8001f56:	4925      	ldr	r1, [pc, #148]	; (8001fec <main+0x148>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f58:	60a8      	str	r0, [r5, #8]
  huart1.Init.BaudRate = 230400;
 8001f5a:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5e:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f62:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f64:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f66:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f68:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6a:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6c:	f7ff f9ce 	bl	800130c <HAL_UART_Init>
 8001f70:	b100      	cbz	r0, 8001f74 <main+0xd0>
 8001f72:	e7fe      	b.n	8001f72 <main+0xce>
  htim2.Init.Prescaler = 39999;
 8001f74:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8001f78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001f7c:	4c1c      	ldr	r4, [pc, #112]	; (8001ff0 <main+0x14c>)
  htim2.Init.Prescaler = 39999;
 8001f7e:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 1000;
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f88:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f8c:	4620      	mov	r0, r4
  htim2.Init.Period = 1000;
 8001f8e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f90:	f7ff f8aa 	bl	80010e8 <HAL_TIM_Base_Init>
 8001f94:	b100      	cbz	r0, 8001f98 <main+0xf4>
 8001f96:	e7fe      	b.n	8001f96 <main+0xf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f9c:	a906      	add	r1, sp, #24
 8001f9e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f7fe ff09 	bl	8000db8 <HAL_TIM_ConfigClockSource>
 8001fa6:	b100      	cbz	r0, 8001faa <main+0x106>
 8001fa8:	e7fe      	b.n	8001fa8 <main+0x104>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fac:	a904      	add	r1, sp, #16
 8001fae:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fb0:	9704      	str	r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fb2:	f7ff f8b3 	bl	800111c <HAL_TIMEx_MasterConfigSynchronization>
 8001fb6:	b100      	cbz	r0, 8001fba <main+0x116>
 8001fb8:	e7fe      	b.n	8001fb8 <main+0x114>
  net_ini();
 8001fba:	f000 f82d 	bl	8002018 <net_ini>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str,1);
 8001fbe:	4632      	mov	r2, r6
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <main+0x150>)
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	f7ff fa2c 	bl	8001420 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f7fe feea 	bl	8000da2 <HAL_TIM_Base_Start_IT>
	  net_poll();
 8001fce:	f000 f9c7 	bl	8002360 <net_poll>
 8001fd2:	e7fc      	b.n	8001fce <main+0x12a>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	200002f4 	.word	0x200002f4
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	200002b4 	.word	0x200002b4
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	2000034c 	.word	0x2000034c
 8001ff4:	2000038c 	.word	0x2000038c

08001ff8 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart1) {
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_UART_RxCpltCallback+0xc>)
 8001ffa:	4283      	cmp	r3, r0
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_RxCpltCallback+0xa>
		UART1_RxCpltCallback();
 8001ffe:	f000 b959 	b.w	80022b4 <UART1_RxCpltCallback>
 8002002:	4770      	bx	lr
 8002004:	200002b4 	.word	0x200002b4

08002008 <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
   if(htim==&htim2) {
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800200a:	4283      	cmp	r3, r0
 800200c:	d101      	bne.n	8002012 <HAL_TIM_PeriodElapsedCallback+0xa>
        TIM_PeriodElapsedCallback();
 800200e:	f000 b9dd 	b.w	80023cc <TIM_PeriodElapsedCallback>
 8002012:	4770      	bx	lr
 8002014:	2000034c 	.word	0x2000034c

08002018 <net_ini>:
extern char str[20];
uint32_t clock_cnt=0; // so giay
//--------------------------------------------------
void net_ini(void)
{
  usartprop.usart_buf[0]=0;
 8002018:	2200      	movs	r2, #0
{
 800201a:	b510      	push	{r4, lr}
  usartprop.usart_cnt=0;
  usartprop.is_ip=0;
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <net_ini+0x34>)
  usartprop.usart_buf[0]=0;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <net_ini+0x38>)
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <net_ini+0x3c>)
 8002022:	4620      	mov	r0, r4
  usartprop.usart_buf[0]=0;
 8002024:	701a      	strb	r2, [r3, #0]
  usartprop.usart_cnt=0;
 8002026:	751a      	strb	r2, [r3, #20]
  usartprop.is_ip=0;
 8002028:	755a      	strb	r2, [r3, #21]
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 800202a:	f000 fb6f 	bl	800270c <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800202e:	4620      	mov	r0, r4
 8002030:	f7fe f88c 	bl	800014c <strlen>
 8002034:	4621      	mov	r1, r4
 8002036:	b282      	uxth	r2, r0
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	4806      	ldr	r0, [pc, #24]	; (8002058 <net_ini+0x40>)
 800203e:	f7ff f993 	bl	8001368 <HAL_UART_Transmit>
  enc28j60_ini();
}
 8002042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  enc28j60_ini();
 8002046:	f7ff bded 	b.w	8001c24 <enc28j60_ini>
 800204a:	bf00      	nop
 800204c:	20000218 	.word	0x20000218
 8002050:	200003a0 	.word	0x200003a0
 8002054:	0800328f 	.word	0x0800328f
 8002058:	200002b4 	.word	0x200002b4

0800205c <checksum>:
//--------------------------------------------------
uint16_t checksum(uint8_t *ptr, uint16_t len)
{
  uint32_t sum = 0;
 800205c:	2300      	movs	r3, #0
{
 800205e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002060:	084c      	lsrs	r4, r1, #1
 8002062:	eb00 0544 	add.w	r5, r0, r4, lsl #1
 8002066:	1c42      	adds	r2, r0, #1
 8002068:	3503      	adds	r5, #3
 800206a:	3202      	adds	r2, #2
	while(len>1)
 800206c:	4295      	cmp	r5, r2
 800206e:	d114      	bne.n	800209a <checksum+0x3e>
  {
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
	ptr+=2;
    len-=2;
  }
	if(len) sum+=((uint32_t)*ptr)<<8;
 8002070:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
 8002074:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8002078:	b289      	uxth	r1, r1
 800207a:	b119      	cbz	r1, 8002084 <checksum+0x28>
 800207c:	f810 2014 	ldrb.w	r2, [r0, r4, lsl #1]
 8002080:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 8002084:	0c1a      	lsrs	r2, r3, #16
 8002086:	d110      	bne.n	80020aa <checksum+0x4e>
	return ~be16toword((uint16_t)sum);
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <checksum+0x54>)
 800208a:	ea00 2003 	and.w	r0, r0, r3, lsl #8
 800208e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002092:	4303      	orrs	r3, r0
 8002094:	43d8      	mvns	r0, r3
}
 8002096:	b280      	uxth	r0, r0
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 800209a:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 800209e:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 80020a2:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80020a6:	4433      	add	r3, r6
 80020a8:	e7df      	b.n	800206a <checksum+0xe>
 80020aa:	b29b      	uxth	r3, r3
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 80020ac:	4413      	add	r3, r2
 80020ae:	e7e9      	b.n	8002084 <checksum+0x28>
 80020b0:	00ffff00 	.word	0x00ffff00

080020b4 <eth_send>:
  }
}
//--------------------------------------------------
void eth_send(enc28j60_frame_ptr *frame, uint16_t len)
{
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020b4:	4603      	mov	r3, r0
{
 80020b6:	b430      	push	{r4, r5}
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020b8:	f853 4f06 	ldr.w	r4, [r3, #6]!
  memcpy(frame->addr_src,macaddr,6);
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020bc:	310e      	adds	r1, #14
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020be:	6004      	str	r4, [r0, #0]
 80020c0:	889c      	ldrh	r4, [r3, #4]
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020c2:	b289      	uxth	r1, r1
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020c4:	8084      	strh	r4, [r0, #4]
  memcpy(frame->addr_src,macaddr,6);
 80020c6:	4c04      	ldr	r4, [pc, #16]	; (80020d8 <eth_send+0x24>)
 80020c8:	6825      	ldr	r5, [r4, #0]
 80020ca:	f8c0 5006 	str.w	r5, [r0, #6]
 80020ce:	88a2      	ldrh	r2, [r4, #4]
 80020d0:	809a      	strh	r2, [r3, #4]
}
 80020d2:	bc30      	pop	{r4, r5}
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020d4:	f7ff be76 	b.w	8001dc4 <enc28j60_packetSend>
 80020d8:	2000000e 	.word	0x2000000e

080020dc <ip_send>:
  ip_pkt->len=be16toword(len);
 80020dc:	ba4b      	rev16	r3, r1
{
 80020de:	b570      	push	{r4, r5, r6, lr}
  ip_pkt->len=be16toword(len);
 80020e0:	8203      	strh	r3, [r0, #16]
  ip_pkt->ttl=128;
 80020e2:	2380      	movs	r3, #128	; 0x80
  ip_pkt->fl_frg_of=0;
 80020e4:	2500      	movs	r5, #0
  ip_pkt->ttl=128;
 80020e6:	7583      	strb	r3, [r0, #22]
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 80020e8:	f8d0 301a 	ldr.w	r3, [r0, #26]
{
 80020ec:	4604      	mov	r4, r0
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 80020ee:	f8c0 301e 	str.w	r3, [r0, #30]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <ip_send+0x3c>)
{
 80020f4:	460e      	mov	r6, r1
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 80020f6:	681b      	ldr	r3, [r3, #0]
  ip_pkt->fl_frg_of=0;
 80020f8:	8285      	strh	r5, [r0, #20]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 80020fa:	f8c0 301a 	str.w	r3, [r0, #26]
  ip_pkt->cs = 0;
 80020fe:	8305      	strh	r5, [r0, #24]
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr));
 8002100:	2114      	movs	r1, #20
 8002102:	300e      	adds	r0, #14
 8002104:	f7ff ffaa 	bl	800205c <checksum>
  eth_send(frame,len);
 8002108:	4631      	mov	r1, r6
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr));
 800210a:	8320      	strh	r0, [r4, #24]
  eth_send(frame,len);
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff ffd1 	bl	80020b4 <eth_send>
}
 8002112:	4628      	mov	r0, r5
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	bf00      	nop
 8002118:	20000014 	.word	0x20000014

0800211c <icmp_read>:
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 800211c:	2907      	cmp	r1, #7
{
 800211e:	b538      	push	{r3, r4, r5, lr}
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 8002124:	d921      	bls.n	800216a <icmp_read+0x4e>
 8002126:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11d      	bne.n	800216a <icmp_read+0x4e>
    sprintf(str1,"icmp request\r\n");
 800212e:	4910      	ldr	r1, [pc, #64]	; (8002170 <icmp_read+0x54>)
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <icmp_read+0x58>)
 8002132:	f000 faeb 	bl	800270c <strcpy>
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8002136:	480f      	ldr	r0, [pc, #60]	; (8002174 <icmp_read+0x58>)
 8002138:	f7fe f808 	bl	800014c <strlen>
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	b282      	uxth	r2, r0
 8002142:	490c      	ldr	r1, [pc, #48]	; (8002174 <icmp_read+0x58>)
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <icmp_read+0x5c>)
 8002146:	f7ff f90f 	bl	8001368 <HAL_UART_Transmit>
	icmp_pkt->msg_tp=ICMP_REPLY;
 800214a:	2300      	movs	r3, #0
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 800214c:	4629      	mov	r1, r5
	icmp_pkt->msg_tp=ICMP_REPLY;
 800214e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    icmp_pkt->cs=0;
 8002152:	84a3      	strh	r3, [r4, #36]	; 0x24
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 8002154:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8002158:	f7ff ff80 	bl	800205c <checksum>
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 800215c:	f105 0114 	add.w	r1, r5, #20
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 8002160:	84a0      	strh	r0, [r4, #36]	; 0x24
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 8002162:	b289      	uxth	r1, r1
 8002164:	4620      	mov	r0, r4
 8002166:	f7ff ffb9 	bl	80020dc <ip_send>
}
 800216a:	2000      	movs	r0, #0
 800216c:	bd38      	pop	{r3, r4, r5, pc}
 800216e:	bf00      	nop
 8002170:	08003280 	.word	0x08003280
 8002174:	20000218 	.word	0x20000218
 8002178:	200002b4 	.word	0x200002b4

0800217c <ip_read>:
{
 800217c:	b510      	push	{r4, lr}
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 800217e:	7b83      	ldrb	r3, [r0, #14]
{
 8002180:	4604      	mov	r4, r0
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 8002182:	2b45      	cmp	r3, #69	; 0x45
 8002184:	d111      	bne.n	80021aa <ip_read+0x2e>
 8002186:	2204      	movs	r2, #4
 8002188:	4909      	ldr	r1, [pc, #36]	; (80021b0 <ip_read+0x34>)
 800218a:	301e      	adds	r0, #30
 800218c:	f000 fa74 	bl	8002678 <memcmp>
 8002190:	b958      	cbnz	r0, 80021aa <ip_read+0x2e>
		if (ip_pkt->prt==IP_ICMP)
 8002192:	7de3      	ldrb	r3, [r4, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <ip_read+0x2e>
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 8002198:	8a23      	ldrh	r3, [r4, #16]
      icmp_read(frame,len1);
 800219a:	4620      	mov	r0, r4
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 800219c:	0219      	lsls	r1, r3, #8
 800219e:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
 80021a2:	3914      	subs	r1, #20
      icmp_read(frame,len1);
 80021a4:	b289      	uxth	r1, r1
 80021a6:	f7ff ffb9 	bl	800211c <icmp_read>
}
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd10      	pop	{r4, pc}
 80021ae:	bf00      	nop
 80021b0:	20000014 	.word	0x20000014

080021b4 <eth_read>:
{
 80021b4:	b530      	push	{r4, r5, lr}
	if (len>=sizeof(enc28j60_frame_ptr))
 80021b6:	290d      	cmp	r1, #13
{
 80021b8:	b08d      	sub	sp, #52	; 0x34
 80021ba:	4604      	mov	r4, r0
 80021bc:	460d      	mov	r5, r1
	if (len>=sizeof(enc28j60_frame_ptr))
 80021be:	d96e      	bls.n	800229e <eth_read+0xea>
    if(frame->type==ETH_ARP)
 80021c0:	8983      	ldrh	r3, [r0, #12]
 80021c2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80021c6:	d13a      	bne.n	800223e <eth_read+0x8a>
     sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; arp\r\n",
 80021c8:	79c3      	ldrb	r3, [r0, #7]
 80021ca:	7982      	ldrb	r2, [r0, #6]
 80021cc:	910a      	str	r1, [sp, #40]	; 0x28
 80021ce:	7941      	ldrb	r1, [r0, #5]
 80021d0:	9109      	str	r1, [sp, #36]	; 0x24
 80021d2:	7901      	ldrb	r1, [r0, #4]
 80021d4:	9108      	str	r1, [sp, #32]
 80021d6:	78c1      	ldrb	r1, [r0, #3]
 80021d8:	9107      	str	r1, [sp, #28]
 80021da:	7881      	ldrb	r1, [r0, #2]
 80021dc:	9106      	str	r1, [sp, #24]
 80021de:	7841      	ldrb	r1, [r0, #1]
 80021e0:	9105      	str	r1, [sp, #20]
 80021e2:	7801      	ldrb	r1, [r0, #0]
 80021e4:	9104      	str	r1, [sp, #16]
 80021e6:	7ac1      	ldrb	r1, [r0, #11]
 80021e8:	9103      	str	r1, [sp, #12]
 80021ea:	7a81      	ldrb	r1, [r0, #10]
 80021ec:	9102      	str	r1, [sp, #8]
 80021ee:	7a41      	ldrb	r1, [r0, #9]
 80021f0:	9101      	str	r1, [sp, #4]
 80021f2:	7a01      	ldrb	r1, [r0, #8]
 80021f4:	482b      	ldr	r0, [pc, #172]	; (80022a4 <eth_read+0xf0>)
 80021f6:	9100      	str	r1, [sp, #0]
 80021f8:	492b      	ldr	r1, [pc, #172]	; (80022a8 <eth_read+0xf4>)
 80021fa:	f000 fa55 	bl	80026a8 <siprintf>
     HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80021fe:	4829      	ldr	r0, [pc, #164]	; (80022a4 <eth_read+0xf0>)
 8002200:	f7fd ffa4 	bl	800014c <strlen>
 8002204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002208:	b282      	uxth	r2, r0
 800220a:	4926      	ldr	r1, [pc, #152]	; (80022a4 <eth_read+0xf0>)
 800220c:	4827      	ldr	r0, [pc, #156]	; (80022ac <eth_read+0xf8>)
 800220e:	f7ff f8ab 	bl	8001368 <HAL_UART_Transmit>
     res = arp_read(frame,len-sizeof(enc28j60_frame_ptr));
 8002212:	f1a5 010e 	sub.w	r1, r5, #14
 8002216:	b289      	uxth	r1, r1
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff fa11 	bl	8001640 <arp_read>
		 if (res == 1) // Ham sizeof voi struct se bo qua thanh phan mang[] nen ta chi doc kich thuoc data (payload) khong doc lai header ethernet frame
 800221e:	2801      	cmp	r0, #1
 8002220:	d105      	bne.n	800222e <eth_read+0x7a>
			 arp_send(frame); // Reply
 8002222:	4620      	mov	r0, r4
}
 8002224:	b00d      	add	sp, #52	; 0x34
 8002226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			 arp_send(frame); // Reply
 800222a:	f7ff bb01 	b.w	8001830 <arp_send>
		 } else if (res == 2) // Reply for other ARP send to
 800222e:	2802      	cmp	r0, #2
 8002230:	d135      	bne.n	800229e <eth_read+0xea>
			 arp_table_fill(frame); // Bang nay se thu thap tat ca cac ARP reply (do ta su dung arp_request cac arp se reply )
 8002232:	4620      	mov	r0, r4
}
 8002234:	b00d      	add	sp, #52	; 0x34
 8002236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			 arp_table_fill(frame); // Bang nay se thu thap tat ca cac ARP reply (do ta su dung arp_request cac arp se reply )
 800223a:	f7ff bbb3 	b.w	80019a4 <arp_table_fill>
    else if (frame->type==ETH_IP)
 800223e:	2b08      	cmp	r3, #8
 8002240:	d12d      	bne.n	800229e <eth_read+0xea>
     sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 8002242:	79c3      	ldrb	r3, [r0, #7]
 8002244:	7982      	ldrb	r2, [r0, #6]
 8002246:	910a      	str	r1, [sp, #40]	; 0x28
 8002248:	7941      	ldrb	r1, [r0, #5]
 800224a:	9109      	str	r1, [sp, #36]	; 0x24
 800224c:	7901      	ldrb	r1, [r0, #4]
 800224e:	9108      	str	r1, [sp, #32]
 8002250:	78c1      	ldrb	r1, [r0, #3]
 8002252:	9107      	str	r1, [sp, #28]
 8002254:	7881      	ldrb	r1, [r0, #2]
 8002256:	9106      	str	r1, [sp, #24]
 8002258:	7841      	ldrb	r1, [r0, #1]
 800225a:	9105      	str	r1, [sp, #20]
 800225c:	7801      	ldrb	r1, [r0, #0]
 800225e:	9104      	str	r1, [sp, #16]
 8002260:	7ac1      	ldrb	r1, [r0, #11]
 8002262:	9103      	str	r1, [sp, #12]
 8002264:	7a81      	ldrb	r1, [r0, #10]
 8002266:	9102      	str	r1, [sp, #8]
 8002268:	7a41      	ldrb	r1, [r0, #9]
 800226a:	9101      	str	r1, [sp, #4]
 800226c:	7a01      	ldrb	r1, [r0, #8]
 800226e:	480d      	ldr	r0, [pc, #52]	; (80022a4 <eth_read+0xf0>)
 8002270:	9100      	str	r1, [sp, #0]
 8002272:	490f      	ldr	r1, [pc, #60]	; (80022b0 <eth_read+0xfc>)
 8002274:	f000 fa18 	bl	80026a8 <siprintf>
     HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <eth_read+0xf0>)
 800227a:	f7fd ff67 	bl	800014c <strlen>
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	b282      	uxth	r2, r0
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <eth_read+0xf0>)
 8002286:	4809      	ldr	r0, [pc, #36]	; (80022ac <eth_read+0xf8>)
 8002288:	f7ff f86e 	bl	8001368 <HAL_UART_Transmit>
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 800228c:	4620      	mov	r0, r4
 800228e:	f1a5 010e 	sub.w	r1, r5, #14
 8002292:	b289      	uxth	r1, r1
}
 8002294:	b00d      	add	sp, #52	; 0x34
 8002296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 800229a:	f7ff bf6f 	b.w	800217c <ip_read>
}
 800229e:	b00d      	add	sp, #52	; 0x34
 80022a0:	bd30      	pop	{r4, r5, pc}
 80022a2:	bf00      	nop
 80022a4:	20000218 	.word	0x20000218
 80022a8:	080031f3 	.word	0x080031f3
 80022ac:	200002b4 	.word	0x200002b4
 80022b0:	0800323a 	.word	0x0800323a

080022b4 <UART1_RxCpltCallback>:
void UART1_RxCpltCallback(void)
{
	uint8_t b;
	b = str[0];
	// Neu chung ta vuot qua do dai bo dem
	if (usartprop.usart_cnt>20)
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <UART1_RxCpltCallback+0x2c>)
 80022b6:	7d1a      	ldrb	r2, [r3, #20]
 80022b8:	2a14      	cmp	r2, #20
 80022ba:	d902      	bls.n	80022c2 <UART1_RxCpltCallback+0xe>
	{
	usartprop.usart_cnt=0;
 80022bc:	2200      	movs	r2, #0
	usartprop.is_ip=1;//Trang thai yeu cau ARP
	}
	else
	{
	usartprop.usart_buf[usartprop.usart_cnt] = b;
	usartprop.usart_cnt++;
 80022be:	751a      	strb	r2, [r3, #20]
 80022c0:	e005      	b.n	80022ce <UART1_RxCpltCallback+0x1a>
	b = str[0];
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <UART1_RxCpltCallback+0x30>)
 80022c4:	7809      	ldrb	r1, [r1, #0]
	else if (b == 'a')
 80022c6:	2961      	cmp	r1, #97	; 0x61
 80022c8:	d106      	bne.n	80022d8 <UART1_RxCpltCallback+0x24>
	usartprop.is_ip=1;//Trang thai yeu cau ARP
 80022ca:	2201      	movs	r2, #1
 80022cc:	755a      	strb	r2, [r3, #21]
	}
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str,1); // Nhan ngat va luu vao str[0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <UART1_RxCpltCallback+0x30>)
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <UART1_RxCpltCallback+0x34>)
 80022d4:	f7ff b8a4 	b.w	8001420 <HAL_UART_Receive_IT>
	usartprop.usart_buf[usartprop.usart_cnt] = b;
 80022d8:	5499      	strb	r1, [r3, r2]
	usartprop.usart_cnt++;
 80022da:	3201      	adds	r2, #1
 80022dc:	e7ef      	b.n	80022be <UART1_RxCpltCallback+0xa>
 80022de:	bf00      	nop
 80022e0:	200003a0 	.word	0x200003a0
 80022e4:	2000038c 	.word	0x2000038c
 80022e8:	200002b4 	.word	0x200002b4

080022ec <ip_extract>:
}
//-----------------------------------------------
// Chuyen doi gia tri chuoi IP thanh so 32bit
void ip_extract(char* ip_str,uint8_t len, uint8_t* ipextr)
{
 80022ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t offset = 0;
  uint8_t i;
  char ss2[5] = {0};
 80022f0:	2500      	movs	r5, #0
{
 80022f2:	4606      	mov	r6, r0
 80022f4:	468a      	mov	sl, r1
 80022f6:	4617      	mov	r7, r2
  char ss2[5] = {0};
 80022f8:	9500      	str	r5, [sp, #0]
 80022fa:	f88d 5004 	strb.w	r5, [sp, #4]
 80022fe:	f102 38ff 	add.w	r8, r2, #4294967295
 8002302:	f102 0902 	add.w	r9, r2, #2
  char *ss1;
  int ch = '.';
  for(i=0;i<3;i++)
  {
    ss1 = strchr(ip_str,ch);
 8002306:	212e      	movs	r1, #46	; 0x2e
 8002308:	4630      	mov	r0, r6
 800230a:	f000 f9f1 	bl	80026f0 <strchr>
    offset = ss1-ip_str+1;
 800230e:	1b80      	subs	r0, r0, r6
 8002310:	3001      	adds	r0, #1
 8002312:	b2c4      	uxtb	r4, r0
    strncpy(ss2,ip_str,offset);
 8002314:	4622      	mov	r2, r4
 8002316:	4631      	mov	r1, r6
 8002318:	4668      	mov	r0, sp
 800231a:	f000 f9ff 	bl	800271c <strncpy>
    ss2[offset]=0;
 800231e:	ab02      	add	r3, sp, #8
 8002320:	4423      	add	r3, r4
    ipextr[i] = atoi(ss2);
 8002322:	4668      	mov	r0, sp
    ss2[offset]=0;
 8002324:	f803 5c08 	strb.w	r5, [r3, #-8]
    ipextr[i] = atoi(ss2);
 8002328:	f000 f97d 	bl	8002626 <atoi>
 800232c:	f808 0f01 	strb.w	r0, [r8, #1]!
    ip_str+=offset;
 8002330:	4426      	add	r6, r4
  for(i=0;i<3;i++)
 8002332:	45c1      	cmp	r9, r8
    len-=offset;
 8002334:	ebaa 0404 	sub.w	r4, sl, r4
 8002338:	fa5f fa84 	uxtb.w	sl, r4
  for(i=0;i<3;i++)
 800233c:	d1e3      	bne.n	8002306 <ip_extract+0x1a>
  }
  strncpy(ss2,ip_str,len);
 800233e:	4652      	mov	r2, sl
 8002340:	4631      	mov	r1, r6
 8002342:	4668      	mov	r0, sp
 8002344:	f000 f9ea 	bl	800271c <strncpy>
  ss2[len]=0;
 8002348:	ab02      	add	r3, sp, #8
 800234a:	eb03 040a 	add.w	r4, r3, sl
  ipextr[3] = atoi(ss2);
 800234e:	4668      	mov	r0, sp
  ss2[len]=0;
 8002350:	f804 5c08 	strb.w	r5, [r4, #-8]
  ipextr[3] = atoi(ss2);
 8002354:	f000 f967 	bl	8002626 <atoi>
 8002358:	70f8      	strb	r0, [r7, #3]
}
 800235a:	b002      	add	sp, #8
 800235c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002360 <net_poll>:
  uint8_t ip[4]={0};
 8002360:	2300      	movs	r3, #0
{
 8002362:	b537      	push	{r0, r1, r2, r4, r5, lr}
	while ((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 8002364:	4d15      	ldr	r5, [pc, #84]	; (80023bc <net_poll+0x5c>)
    if (usartprop.is_ip==1) //Trang thai yeu cau ARP
 8002366:	4c16      	ldr	r4, [pc, #88]	; (80023c0 <net_poll+0x60>)
  uint8_t ip[4]={0};
 8002368:	9301      	str	r3, [sp, #4]
	while ((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 800236a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236e:	4813      	ldr	r0, [pc, #76]	; (80023bc <net_poll+0x5c>)
 8002370:	f7ff fcea 	bl	8001d48 <enc28j60_packetReceive>
 8002374:	4601      	mov	r1, r0
 8002376:	b908      	cbnz	r0, 800237c <net_poll+0x1c>
}
 8002378:	b003      	add	sp, #12
 800237a:	bd30      	pop	{r4, r5, pc}
    eth_read(frame,len);
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff ff19 	bl	80021b4 <eth_read>
    if (usartprop.is_ip==1) //Trang thai yeu cau ARP
 8002382:	7d63      	ldrb	r3, [r4, #21]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d1f0      	bne.n	800236a <net_poll+0xa>
      HAL_UART_Transmit(&huart1,usartprop.usart_buf,usartprop.usart_cnt,0x1000);
 8002388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238c:	7d22      	ldrb	r2, [r4, #20]
 800238e:	4621      	mov	r1, r4
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <net_poll+0x64>)
 8002392:	f7fe ffe9 	bl	8001368 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 8002396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239a:	2202      	movs	r2, #2
 800239c:	490a      	ldr	r1, [pc, #40]	; (80023c8 <net_poll+0x68>)
 800239e:	4809      	ldr	r0, [pc, #36]	; (80023c4 <net_poll+0x64>)
 80023a0:	f7fe ffe2 	bl	8001368 <HAL_UART_Transmit>
      ip_extract((char*)usartprop.usart_buf,usartprop.usart_cnt,ip);
 80023a4:	aa01      	add	r2, sp, #4
 80023a6:	7d21      	ldrb	r1, [r4, #20]
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff ff9f 	bl	80022ec <ip_extract>
      arp_request(ip);
 80023ae:	a801      	add	r0, sp, #4
 80023b0:	f7ff fa5c 	bl	800186c <arp_request>
      usartprop.is_ip = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	7563      	strb	r3, [r4, #21]
      usartprop.usart_cnt=0;
 80023b8:	7523      	strb	r3, [r4, #20]
 80023ba:	e7d6      	b.n	800236a <net_poll+0xa>
 80023bc:	200003b6 	.word	0x200003b6
 80023c0:	200003a0 	.word	0x200003a0
 80023c4:	200002b4 	.word	0x200002b4
 80023c8:	080032af 	.word	0x080032af

080023cc <TIM_PeriodElapsedCallback>:
//-----------------------------------------------
void TIM_PeriodElapsedCallback(void)
{
  clock_cnt++; // Lay giay va viet chung vao clock_cnt
 80023cc:	4a02      	ldr	r2, [pc, #8]	; (80023d8 <TIM_PeriodElapsedCallback+0xc>)
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000214 	.word	0x20000214

080023dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_MspInit+0x80>)
{
 80023de:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023e0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	619a      	str	r2, [r3, #24]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f4:	f7fd ff0c 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	f06f 000b 	mvn.w	r0, #11
 80023fe:	4611      	mov	r1, r2
 8002400:	f7fd ff18 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	f06f 000a 	mvn.w	r0, #10
 800240a:	4611      	mov	r1, r2
 800240c:	f7fd ff12 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	f06f 0009 	mvn.w	r0, #9
 8002416:	4611      	mov	r1, r2
 8002418:	f7fd ff0c 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	f06f 0004 	mvn.w	r0, #4
 8002422:	4611      	mov	r1, r2
 8002424:	f7fd ff06 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	f06f 0003 	mvn.w	r0, #3
 800242e:	4611      	mov	r1, r2
 8002430:	f7fd ff00 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	f06f 0001 	mvn.w	r0, #1
 800243a:	4611      	mov	r1, r2
 800243c:	f7fd fefa 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
 8002446:	4611      	mov	r1, r2
 8002448:	f7fd fef4 	bl	8000234 <HAL_NVIC_SetPriority>

    /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
    */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_MspInit+0x84>)
 800244e:	6853      	ldr	r3, [r2, #4]
 8002450:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	b003      	add	sp, #12
 8002458:	f85d fb04 	ldr.w	pc, [sp], #4
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000

08002464 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002464:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002466:	6802      	ldr	r2, [r0, #0]
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_SPI_MspInit+0x4c>)
 800246a:	429a      	cmp	r2, r3
 800246c:	d11d      	bne.n	80024aa <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800246e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002472:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002488:	23a0      	movs	r3, #160	; 0xa0
 800248a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f7fd ff7e 	bl	8000394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002498:	2340      	movs	r3, #64	; 0x40
 800249a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	a902      	add	r1, sp, #8
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f7fd ff75 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024aa:	b007      	add	sp, #28
 80024ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80024b0:	40013000 	.word	0x40013000
 80024b4:	40010800 	.word	0x40010800

080024b8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80024b8:	6803      	ldr	r3, [r0, #0]
{
 80024ba:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c0:	d112      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024c6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024c8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024de:	f7fd fea9 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e2:	201c      	movs	r0, #28
 80024e4:	f7fd feda 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024e8:	b003      	add	sp, #12
 80024ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080024f0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80024f2:	6802      	ldr	r2, [r0, #0]
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_UART_MspInit+0x60>)
{
 80024f6:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d127      	bne.n	800254c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002500:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002508:	619a      	str	r2, [r3, #24]
 800250a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002520:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002524:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f7fd ff35 	bl	8000394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800252a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	a902      	add	r1, sp, #8
 8002530:	4808      	ldr	r0, [pc, #32]	; (8002554 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002532:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002534:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f7fd ff2c 	bl	8000394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800253c:	2025      	movs	r0, #37	; 0x25
 800253e:	4622      	mov	r2, r4
 8002540:	4621      	mov	r1, r4
 8002542:	f7fd fe77 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002546:	2025      	movs	r0, #37	; 0x25
 8002548:	f7fd fea8 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800254c:	b006      	add	sp, #24
 800254e:	bd10      	pop	{r4, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	40010800 	.word	0x40010800

08002558 <NMI_Handler>:
 8002558:	4770      	bx	lr

0800255a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800255a:	e7fe      	b.n	800255a <HardFault_Handler>

0800255c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800255c:	e7fe      	b.n	800255c <MemManage_Handler>

0800255e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800255e:	e7fe      	b.n	800255e <BusFault_Handler>

08002560 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler>

08002562 <SVC_Handler>:
 8002562:	4770      	bx	lr

08002564 <DebugMon_Handler>:
 8002564:	4770      	bx	lr

08002566 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f7fd fe2d 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002572:	f7fd bec2 	b.w	80002fa <HAL_SYSTICK_IRQHandler>
	...

08002578 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002578:	4801      	ldr	r0, [pc, #4]	; (8002580 <TIM2_IRQHandler+0x8>)
 800257a:	f7fe bcda 	b.w	8000f32 <HAL_TIM_IRQHandler>
 800257e:	bf00      	nop
 8002580:	2000034c 	.word	0x2000034c

08002584 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002584:	4801      	ldr	r0, [pc, #4]	; (800258c <USART1_IRQHandler+0x8>)
 8002586:	f7fe bfb3 	b.w	80014f0 <HAL_UART_IRQHandler>
 800258a:	bf00      	nop
 800258c:	200002b4 	.word	0x200002b4

08002590 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <SystemInit+0x40>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <SystemInit+0x44>)
 800259e:	400a      	ands	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80025bc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <SystemInit+0x48>)
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	f8ff0000 	.word	0xf8ff0000
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025e8:	480a      	ldr	r0, [pc, #40]	; (8002614 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
  ldr r2, =_sbss
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002602:	f7ff ffc5 	bl	8002590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f000 f813 	bl	8002630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800260a:	f7ff fc4b 	bl	8001ea4 <main>
  bx lr
 800260e:	4770      	bx	lr
  ldr r3, =_sidata
 8002610:	08003410 	.word	0x08003410
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002618:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 800261c:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8002620:	200005bc 	.word	0x200005bc

08002624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_2_IRQHandler>

08002626 <atoi>:
 8002626:	220a      	movs	r2, #10
 8002628:	2100      	movs	r1, #0
 800262a:	f000 b90d 	b.w	8002848 <strtol>
	...

08002630 <__libc_init_array>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	2500      	movs	r5, #0
 8002634:	4e0c      	ldr	r6, [pc, #48]	; (8002668 <__libc_init_array+0x38>)
 8002636:	4c0d      	ldr	r4, [pc, #52]	; (800266c <__libc_init_array+0x3c>)
 8002638:	1ba4      	subs	r4, r4, r6
 800263a:	10a4      	asrs	r4, r4, #2
 800263c:	42a5      	cmp	r5, r4
 800263e:	d109      	bne.n	8002654 <__libc_init_array+0x24>
 8002640:	f000 fd4e 	bl	80030e0 <_init>
 8002644:	2500      	movs	r5, #0
 8002646:	4e0a      	ldr	r6, [pc, #40]	; (8002670 <__libc_init_array+0x40>)
 8002648:	4c0a      	ldr	r4, [pc, #40]	; (8002674 <__libc_init_array+0x44>)
 800264a:	1ba4      	subs	r4, r4, r6
 800264c:	10a4      	asrs	r4, r4, #2
 800264e:	42a5      	cmp	r5, r4
 8002650:	d105      	bne.n	800265e <__libc_init_array+0x2e>
 8002652:	bd70      	pop	{r4, r5, r6, pc}
 8002654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002658:	4798      	blx	r3
 800265a:	3501      	adds	r5, #1
 800265c:	e7ee      	b.n	800263c <__libc_init_array+0xc>
 800265e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002662:	4798      	blx	r3
 8002664:	3501      	adds	r5, #1
 8002666:	e7f2      	b.n	800264e <__libc_init_array+0x1e>
 8002668:	08003408 	.word	0x08003408
 800266c:	08003408 	.word	0x08003408
 8002670:	08003408 	.word	0x08003408
 8002674:	0800340c 	.word	0x0800340c

08002678 <memcmp>:
 8002678:	b510      	push	{r4, lr}
 800267a:	3901      	subs	r1, #1
 800267c:	4402      	add	r2, r0
 800267e:	4290      	cmp	r0, r2
 8002680:	d101      	bne.n	8002686 <memcmp+0xe>
 8002682:	2000      	movs	r0, #0
 8002684:	bd10      	pop	{r4, pc}
 8002686:	f810 3b01 	ldrb.w	r3, [r0], #1
 800268a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800268e:	42a3      	cmp	r3, r4
 8002690:	d0f5      	beq.n	800267e <memcmp+0x6>
 8002692:	1b18      	subs	r0, r3, r4
 8002694:	bd10      	pop	{r4, pc}

08002696 <memset>:
 8002696:	4603      	mov	r3, r0
 8002698:	4402      	add	r2, r0
 800269a:	4293      	cmp	r3, r2
 800269c:	d100      	bne.n	80026a0 <memset+0xa>
 800269e:	4770      	bx	lr
 80026a0:	f803 1b01 	strb.w	r1, [r3], #1
 80026a4:	e7f9      	b.n	800269a <memset+0x4>
	...

080026a8 <siprintf>:
 80026a8:	b40e      	push	{r1, r2, r3}
 80026aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80026ae:	b500      	push	{lr}
 80026b0:	b09c      	sub	sp, #112	; 0x70
 80026b2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80026b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026ba:	9104      	str	r1, [sp, #16]
 80026bc:	9107      	str	r1, [sp, #28]
 80026be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026c2:	ab1d      	add	r3, sp, #116	; 0x74
 80026c4:	9002      	str	r0, [sp, #8]
 80026c6:	9006      	str	r0, [sp, #24]
 80026c8:	4808      	ldr	r0, [pc, #32]	; (80026ec <siprintf+0x44>)
 80026ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80026ce:	f8ad 1016 	strh.w	r1, [sp, #22]
 80026d2:	6800      	ldr	r0, [r0, #0]
 80026d4:	a902      	add	r1, sp, #8
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	f000 f93c 	bl	8002954 <_svfiprintf_r>
 80026dc:	2200      	movs	r2, #0
 80026de:	9b02      	ldr	r3, [sp, #8]
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	b01c      	add	sp, #112	; 0x70
 80026e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80026e8:	b003      	add	sp, #12
 80026ea:	4770      	bx	lr
 80026ec:	2000001c 	.word	0x2000001c

080026f0 <strchr>:
 80026f0:	b2c9      	uxtb	r1, r1
 80026f2:	4603      	mov	r3, r0
 80026f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f8:	b11a      	cbz	r2, 8002702 <strchr+0x12>
 80026fa:	4291      	cmp	r1, r2
 80026fc:	d1f9      	bne.n	80026f2 <strchr+0x2>
 80026fe:	4618      	mov	r0, r3
 8002700:	4770      	bx	lr
 8002702:	2900      	cmp	r1, #0
 8002704:	bf0c      	ite	eq
 8002706:	4618      	moveq	r0, r3
 8002708:	2000      	movne	r0, #0
 800270a:	4770      	bx	lr

0800270c <strcpy>:
 800270c:	4603      	mov	r3, r0
 800270e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002712:	f803 2b01 	strb.w	r2, [r3], #1
 8002716:	2a00      	cmp	r2, #0
 8002718:	d1f9      	bne.n	800270e <strcpy+0x2>
 800271a:	4770      	bx	lr

0800271c <strncpy>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4604      	mov	r4, r0
 8002720:	b902      	cbnz	r2, 8002724 <strncpy+0x8>
 8002722:	bd70      	pop	{r4, r5, r6, pc}
 8002724:	4623      	mov	r3, r4
 8002726:	f811 5b01 	ldrb.w	r5, [r1], #1
 800272a:	1e56      	subs	r6, r2, #1
 800272c:	f803 5b01 	strb.w	r5, [r3], #1
 8002730:	b91d      	cbnz	r5, 800273a <strncpy+0x1e>
 8002732:	4414      	add	r4, r2
 8002734:	42a3      	cmp	r3, r4
 8002736:	d103      	bne.n	8002740 <strncpy+0x24>
 8002738:	bd70      	pop	{r4, r5, r6, pc}
 800273a:	461c      	mov	r4, r3
 800273c:	4632      	mov	r2, r6
 800273e:	e7ef      	b.n	8002720 <strncpy+0x4>
 8002740:	f803 5b01 	strb.w	r5, [r3], #1
 8002744:	e7f6      	b.n	8002734 <strncpy+0x18>

08002746 <_strtol_l.isra.0>:
 8002746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274a:	4680      	mov	r8, r0
 800274c:	4689      	mov	r9, r1
 800274e:	4692      	mov	sl, r2
 8002750:	461f      	mov	r7, r3
 8002752:	468b      	mov	fp, r1
 8002754:	465d      	mov	r5, fp
 8002756:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800275c:	f000 f88a 	bl	8002874 <__locale_ctype_ptr_l>
 8002760:	4420      	add	r0, r4
 8002762:	7846      	ldrb	r6, [r0, #1]
 8002764:	f016 0608 	ands.w	r6, r6, #8
 8002768:	d10b      	bne.n	8002782 <_strtol_l.isra.0+0x3c>
 800276a:	2c2d      	cmp	r4, #45	; 0x2d
 800276c:	d10b      	bne.n	8002786 <_strtol_l.isra.0+0x40>
 800276e:	2601      	movs	r6, #1
 8002770:	782c      	ldrb	r4, [r5, #0]
 8002772:	f10b 0502 	add.w	r5, fp, #2
 8002776:	b167      	cbz	r7, 8002792 <_strtol_l.isra.0+0x4c>
 8002778:	2f10      	cmp	r7, #16
 800277a:	d114      	bne.n	80027a6 <_strtol_l.isra.0+0x60>
 800277c:	2c30      	cmp	r4, #48	; 0x30
 800277e:	d00a      	beq.n	8002796 <_strtol_l.isra.0+0x50>
 8002780:	e011      	b.n	80027a6 <_strtol_l.isra.0+0x60>
 8002782:	46ab      	mov	fp, r5
 8002784:	e7e6      	b.n	8002754 <_strtol_l.isra.0+0xe>
 8002786:	2c2b      	cmp	r4, #43	; 0x2b
 8002788:	bf04      	itt	eq
 800278a:	782c      	ldrbeq	r4, [r5, #0]
 800278c:	f10b 0502 	addeq.w	r5, fp, #2
 8002790:	e7f1      	b.n	8002776 <_strtol_l.isra.0+0x30>
 8002792:	2c30      	cmp	r4, #48	; 0x30
 8002794:	d127      	bne.n	80027e6 <_strtol_l.isra.0+0xa0>
 8002796:	782b      	ldrb	r3, [r5, #0]
 8002798:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800279c:	2b58      	cmp	r3, #88	; 0x58
 800279e:	d14b      	bne.n	8002838 <_strtol_l.isra.0+0xf2>
 80027a0:	2710      	movs	r7, #16
 80027a2:	786c      	ldrb	r4, [r5, #1]
 80027a4:	3502      	adds	r5, #2
 80027a6:	2e00      	cmp	r6, #0
 80027a8:	bf0c      	ite	eq
 80027aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80027ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80027b2:	2200      	movs	r2, #0
 80027b4:	fbb1 fef7 	udiv	lr, r1, r7
 80027b8:	4610      	mov	r0, r2
 80027ba:	fb07 1c1e 	mls	ip, r7, lr, r1
 80027be:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80027c2:	2b09      	cmp	r3, #9
 80027c4:	d811      	bhi.n	80027ea <_strtol_l.isra.0+0xa4>
 80027c6:	461c      	mov	r4, r3
 80027c8:	42a7      	cmp	r7, r4
 80027ca:	dd1d      	ble.n	8002808 <_strtol_l.isra.0+0xc2>
 80027cc:	1c53      	adds	r3, r2, #1
 80027ce:	d007      	beq.n	80027e0 <_strtol_l.isra.0+0x9a>
 80027d0:	4586      	cmp	lr, r0
 80027d2:	d316      	bcc.n	8002802 <_strtol_l.isra.0+0xbc>
 80027d4:	d101      	bne.n	80027da <_strtol_l.isra.0+0x94>
 80027d6:	45a4      	cmp	ip, r4
 80027d8:	db13      	blt.n	8002802 <_strtol_l.isra.0+0xbc>
 80027da:	2201      	movs	r2, #1
 80027dc:	fb00 4007 	mla	r0, r0, r7, r4
 80027e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027e4:	e7eb      	b.n	80027be <_strtol_l.isra.0+0x78>
 80027e6:	270a      	movs	r7, #10
 80027e8:	e7dd      	b.n	80027a6 <_strtol_l.isra.0+0x60>
 80027ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80027ee:	2b19      	cmp	r3, #25
 80027f0:	d801      	bhi.n	80027f6 <_strtol_l.isra.0+0xb0>
 80027f2:	3c37      	subs	r4, #55	; 0x37
 80027f4:	e7e8      	b.n	80027c8 <_strtol_l.isra.0+0x82>
 80027f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80027fa:	2b19      	cmp	r3, #25
 80027fc:	d804      	bhi.n	8002808 <_strtol_l.isra.0+0xc2>
 80027fe:	3c57      	subs	r4, #87	; 0x57
 8002800:	e7e2      	b.n	80027c8 <_strtol_l.isra.0+0x82>
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	e7eb      	b.n	80027e0 <_strtol_l.isra.0+0x9a>
 8002808:	1c53      	adds	r3, r2, #1
 800280a:	d108      	bne.n	800281e <_strtol_l.isra.0+0xd8>
 800280c:	2322      	movs	r3, #34	; 0x22
 800280e:	4608      	mov	r0, r1
 8002810:	f8c8 3000 	str.w	r3, [r8]
 8002814:	f1ba 0f00 	cmp.w	sl, #0
 8002818:	d107      	bne.n	800282a <_strtol_l.isra.0+0xe4>
 800281a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281e:	b106      	cbz	r6, 8002822 <_strtol_l.isra.0+0xdc>
 8002820:	4240      	negs	r0, r0
 8002822:	f1ba 0f00 	cmp.w	sl, #0
 8002826:	d00c      	beq.n	8002842 <_strtol_l.isra.0+0xfc>
 8002828:	b122      	cbz	r2, 8002834 <_strtol_l.isra.0+0xee>
 800282a:	3d01      	subs	r5, #1
 800282c:	f8ca 5000 	str.w	r5, [sl]
 8002830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002834:	464d      	mov	r5, r9
 8002836:	e7f9      	b.n	800282c <_strtol_l.isra.0+0xe6>
 8002838:	2430      	movs	r4, #48	; 0x30
 800283a:	2f00      	cmp	r7, #0
 800283c:	d1b3      	bne.n	80027a6 <_strtol_l.isra.0+0x60>
 800283e:	2708      	movs	r7, #8
 8002840:	e7b1      	b.n	80027a6 <_strtol_l.isra.0+0x60>
 8002842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002848 <strtol>:
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <strtol+0x24>)
 800284a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	4d08      	ldr	r5, [pc, #32]	; (8002870 <strtol+0x28>)
 8002850:	6a23      	ldr	r3, [r4, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf08      	it	eq
 8002856:	462b      	moveq	r3, r5
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	460a      	mov	r2, r1
 800285e:	4601      	mov	r1, r0
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff ff70 	bl	8002746 <_strtol_l.isra.0>
 8002866:	b003      	add	sp, #12
 8002868:	bd30      	pop	{r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	2000001c 	.word	0x2000001c
 8002870:	20000080 	.word	0x20000080

08002874 <__locale_ctype_ptr_l>:
 8002874:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002878:	4770      	bx	lr

0800287a <__ascii_mbtowc>:
 800287a:	b082      	sub	sp, #8
 800287c:	b901      	cbnz	r1, 8002880 <__ascii_mbtowc+0x6>
 800287e:	a901      	add	r1, sp, #4
 8002880:	b142      	cbz	r2, 8002894 <__ascii_mbtowc+0x1a>
 8002882:	b14b      	cbz	r3, 8002898 <__ascii_mbtowc+0x1e>
 8002884:	7813      	ldrb	r3, [r2, #0]
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	1c10      	adds	r0, r2, #0
 800288c:	bf18      	it	ne
 800288e:	2001      	movne	r0, #1
 8002890:	b002      	add	sp, #8
 8002892:	4770      	bx	lr
 8002894:	4610      	mov	r0, r2
 8002896:	e7fb      	b.n	8002890 <__ascii_mbtowc+0x16>
 8002898:	f06f 0001 	mvn.w	r0, #1
 800289c:	e7f8      	b.n	8002890 <__ascii_mbtowc+0x16>

0800289e <__ssputs_r>:
 800289e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028a2:	688e      	ldr	r6, [r1, #8]
 80028a4:	4682      	mov	sl, r0
 80028a6:	429e      	cmp	r6, r3
 80028a8:	460c      	mov	r4, r1
 80028aa:	4691      	mov	r9, r2
 80028ac:	4698      	mov	r8, r3
 80028ae:	d835      	bhi.n	800291c <__ssputs_r+0x7e>
 80028b0:	898a      	ldrh	r2, [r1, #12]
 80028b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028b6:	d031      	beq.n	800291c <__ssputs_r+0x7e>
 80028b8:	2302      	movs	r3, #2
 80028ba:	6825      	ldr	r5, [r4, #0]
 80028bc:	6909      	ldr	r1, [r1, #16]
 80028be:	1a6f      	subs	r7, r5, r1
 80028c0:	6965      	ldr	r5, [r4, #20]
 80028c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028c6:	fb95 f5f3 	sdiv	r5, r5, r3
 80028ca:	f108 0301 	add.w	r3, r8, #1
 80028ce:	443b      	add	r3, r7
 80028d0:	429d      	cmp	r5, r3
 80028d2:	bf38      	it	cc
 80028d4:	461d      	movcc	r5, r3
 80028d6:	0553      	lsls	r3, r2, #21
 80028d8:	d531      	bpl.n	800293e <__ssputs_r+0xa0>
 80028da:	4629      	mov	r1, r5
 80028dc:	f000 fb52 	bl	8002f84 <_malloc_r>
 80028e0:	4606      	mov	r6, r0
 80028e2:	b950      	cbnz	r0, 80028fa <__ssputs_r+0x5c>
 80028e4:	230c      	movs	r3, #12
 80028e6:	f8ca 3000 	str.w	r3, [sl]
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f4:	81a3      	strh	r3, [r4, #12]
 80028f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028fa:	463a      	mov	r2, r7
 80028fc:	6921      	ldr	r1, [r4, #16]
 80028fe:	f000 fad0 	bl	8002ea2 <memcpy>
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290c:	81a3      	strh	r3, [r4, #12]
 800290e:	6126      	str	r6, [r4, #16]
 8002910:	443e      	add	r6, r7
 8002912:	6026      	str	r6, [r4, #0]
 8002914:	4646      	mov	r6, r8
 8002916:	6165      	str	r5, [r4, #20]
 8002918:	1bed      	subs	r5, r5, r7
 800291a:	60a5      	str	r5, [r4, #8]
 800291c:	4546      	cmp	r6, r8
 800291e:	bf28      	it	cs
 8002920:	4646      	movcs	r6, r8
 8002922:	4649      	mov	r1, r9
 8002924:	4632      	mov	r2, r6
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	f000 fac6 	bl	8002eb8 <memmove>
 800292c:	68a3      	ldr	r3, [r4, #8]
 800292e:	2000      	movs	r0, #0
 8002930:	1b9b      	subs	r3, r3, r6
 8002932:	60a3      	str	r3, [r4, #8]
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	441e      	add	r6, r3
 8002938:	6026      	str	r6, [r4, #0]
 800293a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293e:	462a      	mov	r2, r5
 8002940:	f000 fb7e 	bl	8003040 <_realloc_r>
 8002944:	4606      	mov	r6, r0
 8002946:	2800      	cmp	r0, #0
 8002948:	d1e1      	bne.n	800290e <__ssputs_r+0x70>
 800294a:	6921      	ldr	r1, [r4, #16]
 800294c:	4650      	mov	r0, sl
 800294e:	f000 facd 	bl	8002eec <_free_r>
 8002952:	e7c7      	b.n	80028e4 <__ssputs_r+0x46>

08002954 <_svfiprintf_r>:
 8002954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002958:	b09d      	sub	sp, #116	; 0x74
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	898b      	ldrh	r3, [r1, #12]
 800295e:	4680      	mov	r8, r0
 8002960:	061c      	lsls	r4, r3, #24
 8002962:	460d      	mov	r5, r1
 8002964:	4616      	mov	r6, r2
 8002966:	d50f      	bpl.n	8002988 <_svfiprintf_r+0x34>
 8002968:	690b      	ldr	r3, [r1, #16]
 800296a:	b96b      	cbnz	r3, 8002988 <_svfiprintf_r+0x34>
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	f000 fb09 	bl	8002f84 <_malloc_r>
 8002972:	6028      	str	r0, [r5, #0]
 8002974:	6128      	str	r0, [r5, #16]
 8002976:	b928      	cbnz	r0, 8002984 <_svfiprintf_r+0x30>
 8002978:	230c      	movs	r3, #12
 800297a:	f8c8 3000 	str.w	r3, [r8]
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	e0c4      	b.n	8002b0e <_svfiprintf_r+0x1ba>
 8002984:	2340      	movs	r3, #64	; 0x40
 8002986:	616b      	str	r3, [r5, #20]
 8002988:	2300      	movs	r3, #0
 800298a:	9309      	str	r3, [sp, #36]	; 0x24
 800298c:	2320      	movs	r3, #32
 800298e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002992:	2330      	movs	r3, #48	; 0x30
 8002994:	f04f 0b01 	mov.w	fp, #1
 8002998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800299c:	4637      	mov	r7, r6
 800299e:	463c      	mov	r4, r7
 80029a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d13c      	bne.n	8002a22 <_svfiprintf_r+0xce>
 80029a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80029ac:	d00b      	beq.n	80029c6 <_svfiprintf_r+0x72>
 80029ae:	4653      	mov	r3, sl
 80029b0:	4632      	mov	r2, r6
 80029b2:	4629      	mov	r1, r5
 80029b4:	4640      	mov	r0, r8
 80029b6:	f7ff ff72 	bl	800289e <__ssputs_r>
 80029ba:	3001      	adds	r0, #1
 80029bc:	f000 80a2 	beq.w	8002b04 <_svfiprintf_r+0x1b0>
 80029c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029c2:	4453      	add	r3, sl
 80029c4:	9309      	str	r3, [sp, #36]	; 0x24
 80029c6:	783b      	ldrb	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 809b 	beq.w	8002b04 <_svfiprintf_r+0x1b0>
 80029ce:	2300      	movs	r3, #0
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	9304      	str	r3, [sp, #16]
 80029d6:	9307      	str	r3, [sp, #28]
 80029d8:	9205      	str	r2, [sp, #20]
 80029da:	9306      	str	r3, [sp, #24]
 80029dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029e0:	931a      	str	r3, [sp, #104]	; 0x68
 80029e2:	2205      	movs	r2, #5
 80029e4:	7821      	ldrb	r1, [r4, #0]
 80029e6:	4850      	ldr	r0, [pc, #320]	; (8002b28 <_svfiprintf_r+0x1d4>)
 80029e8:	f000 fa4d 	bl	8002e86 <memchr>
 80029ec:	1c67      	adds	r7, r4, #1
 80029ee:	9b04      	ldr	r3, [sp, #16]
 80029f0:	b9d8      	cbnz	r0, 8002a2a <_svfiprintf_r+0xd6>
 80029f2:	06d9      	lsls	r1, r3, #27
 80029f4:	bf44      	itt	mi
 80029f6:	2220      	movmi	r2, #32
 80029f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029fc:	071a      	lsls	r2, r3, #28
 80029fe:	bf44      	itt	mi
 8002a00:	222b      	movmi	r2, #43	; 0x2b
 8002a02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a06:	7822      	ldrb	r2, [r4, #0]
 8002a08:	2a2a      	cmp	r2, #42	; 0x2a
 8002a0a:	d016      	beq.n	8002a3a <_svfiprintf_r+0xe6>
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	200a      	movs	r0, #10
 8002a10:	9a07      	ldr	r2, [sp, #28]
 8002a12:	4627      	mov	r7, r4
 8002a14:	783b      	ldrb	r3, [r7, #0]
 8002a16:	3401      	adds	r4, #1
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d950      	bls.n	8002ac0 <_svfiprintf_r+0x16c>
 8002a1e:	b1c9      	cbz	r1, 8002a54 <_svfiprintf_r+0x100>
 8002a20:	e011      	b.n	8002a46 <_svfiprintf_r+0xf2>
 8002a22:	2b25      	cmp	r3, #37	; 0x25
 8002a24:	d0c0      	beq.n	80029a8 <_svfiprintf_r+0x54>
 8002a26:	4627      	mov	r7, r4
 8002a28:	e7b9      	b.n	800299e <_svfiprintf_r+0x4a>
 8002a2a:	4a3f      	ldr	r2, [pc, #252]	; (8002b28 <_svfiprintf_r+0x1d4>)
 8002a2c:	463c      	mov	r4, r7
 8002a2e:	1a80      	subs	r0, r0, r2
 8002a30:	fa0b f000 	lsl.w	r0, fp, r0
 8002a34:	4318      	orrs	r0, r3
 8002a36:	9004      	str	r0, [sp, #16]
 8002a38:	e7d3      	b.n	80029e2 <_svfiprintf_r+0x8e>
 8002a3a:	9a03      	ldr	r2, [sp, #12]
 8002a3c:	1d11      	adds	r1, r2, #4
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	9103      	str	r1, [sp, #12]
 8002a42:	2a00      	cmp	r2, #0
 8002a44:	db01      	blt.n	8002a4a <_svfiprintf_r+0xf6>
 8002a46:	9207      	str	r2, [sp, #28]
 8002a48:	e004      	b.n	8002a54 <_svfiprintf_r+0x100>
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	9207      	str	r2, [sp, #28]
 8002a52:	9304      	str	r3, [sp, #16]
 8002a54:	783b      	ldrb	r3, [r7, #0]
 8002a56:	2b2e      	cmp	r3, #46	; 0x2e
 8002a58:	d10d      	bne.n	8002a76 <_svfiprintf_r+0x122>
 8002a5a:	787b      	ldrb	r3, [r7, #1]
 8002a5c:	1c79      	adds	r1, r7, #1
 8002a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a60:	d132      	bne.n	8002ac8 <_svfiprintf_r+0x174>
 8002a62:	9b03      	ldr	r3, [sp, #12]
 8002a64:	3702      	adds	r7, #2
 8002a66:	1d1a      	adds	r2, r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	9203      	str	r2, [sp, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bfb8      	it	lt
 8002a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a74:	9305      	str	r3, [sp, #20]
 8002a76:	4c2d      	ldr	r4, [pc, #180]	; (8002b2c <_svfiprintf_r+0x1d8>)
 8002a78:	2203      	movs	r2, #3
 8002a7a:	7839      	ldrb	r1, [r7, #0]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 fa02 	bl	8002e86 <memchr>
 8002a82:	b138      	cbz	r0, 8002a94 <_svfiprintf_r+0x140>
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	1b00      	subs	r0, r0, r4
 8002a88:	fa03 f000 	lsl.w	r0, r3, r0
 8002a8c:	9b04      	ldr	r3, [sp, #16]
 8002a8e:	3701      	adds	r7, #1
 8002a90:	4303      	orrs	r3, r0
 8002a92:	9304      	str	r3, [sp, #16]
 8002a94:	7839      	ldrb	r1, [r7, #0]
 8002a96:	2206      	movs	r2, #6
 8002a98:	4825      	ldr	r0, [pc, #148]	; (8002b30 <_svfiprintf_r+0x1dc>)
 8002a9a:	1c7e      	adds	r6, r7, #1
 8002a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002aa0:	f000 f9f1 	bl	8002e86 <memchr>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d035      	beq.n	8002b14 <_svfiprintf_r+0x1c0>
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <_svfiprintf_r+0x1e0>)
 8002aaa:	b9fb      	cbnz	r3, 8002aec <_svfiprintf_r+0x198>
 8002aac:	9b03      	ldr	r3, [sp, #12]
 8002aae:	3307      	adds	r3, #7
 8002ab0:	f023 0307 	bic.w	r3, r3, #7
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aba:	444b      	add	r3, r9
 8002abc:	9309      	str	r3, [sp, #36]	; 0x24
 8002abe:	e76d      	b.n	800299c <_svfiprintf_r+0x48>
 8002ac0:	fb00 3202 	mla	r2, r0, r2, r3
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	e7a4      	b.n	8002a12 <_svfiprintf_r+0xbe>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	240a      	movs	r4, #10
 8002acc:	4618      	mov	r0, r3
 8002ace:	9305      	str	r3, [sp, #20]
 8002ad0:	460f      	mov	r7, r1
 8002ad2:	783a      	ldrb	r2, [r7, #0]
 8002ad4:	3101      	adds	r1, #1
 8002ad6:	3a30      	subs	r2, #48	; 0x30
 8002ad8:	2a09      	cmp	r2, #9
 8002ada:	d903      	bls.n	8002ae4 <_svfiprintf_r+0x190>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ca      	beq.n	8002a76 <_svfiprintf_r+0x122>
 8002ae0:	9005      	str	r0, [sp, #20]
 8002ae2:	e7c8      	b.n	8002a76 <_svfiprintf_r+0x122>
 8002ae4:	fb04 2000 	mla	r0, r4, r0, r2
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e7f1      	b.n	8002ad0 <_svfiprintf_r+0x17c>
 8002aec:	ab03      	add	r3, sp, #12
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	462a      	mov	r2, r5
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_svfiprintf_r+0x1e4>)
 8002af4:	a904      	add	r1, sp, #16
 8002af6:	4640      	mov	r0, r8
 8002af8:	f3af 8000 	nop.w
 8002afc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b00:	4681      	mov	r9, r0
 8002b02:	d1d9      	bne.n	8002ab8 <_svfiprintf_r+0x164>
 8002b04:	89ab      	ldrh	r3, [r5, #12]
 8002b06:	065b      	lsls	r3, r3, #25
 8002b08:	f53f af39 	bmi.w	800297e <_svfiprintf_r+0x2a>
 8002b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b0e:	b01d      	add	sp, #116	; 0x74
 8002b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b14:	ab03      	add	r3, sp, #12
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	462a      	mov	r2, r5
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_svfiprintf_r+0x1e4>)
 8002b1c:	a904      	add	r1, sp, #16
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f000 f884 	bl	8002c2c <_printf_i>
 8002b24:	e7ea      	b.n	8002afc <_svfiprintf_r+0x1a8>
 8002b26:	bf00      	nop
 8002b28:	080032d4 	.word	0x080032d4
 8002b2c:	080032da 	.word	0x080032da
 8002b30:	080032de 	.word	0x080032de
 8002b34:	00000000 	.word	0x00000000
 8002b38:	0800289f 	.word	0x0800289f

08002b3c <_printf_common>:
 8002b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b40:	4691      	mov	r9, r2
 8002b42:	461f      	mov	r7, r3
 8002b44:	688a      	ldr	r2, [r1, #8]
 8002b46:	690b      	ldr	r3, [r1, #16]
 8002b48:	4606      	mov	r6, r0
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	bfb8      	it	lt
 8002b4e:	4613      	movlt	r3, r2
 8002b50:	f8c9 3000 	str.w	r3, [r9]
 8002b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b58:	460c      	mov	r4, r1
 8002b5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b5e:	b112      	cbz	r2, 8002b66 <_printf_common+0x2a>
 8002b60:	3301      	adds	r3, #1
 8002b62:	f8c9 3000 	str.w	r3, [r9]
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	0699      	lsls	r1, r3, #26
 8002b6a:	bf42      	ittt	mi
 8002b6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b70:	3302      	addmi	r3, #2
 8002b72:	f8c9 3000 	strmi.w	r3, [r9]
 8002b76:	6825      	ldr	r5, [r4, #0]
 8002b78:	f015 0506 	ands.w	r5, r5, #6
 8002b7c:	d107      	bne.n	8002b8e <_printf_common+0x52>
 8002b7e:	f104 0a19 	add.w	sl, r4, #25
 8002b82:	68e3      	ldr	r3, [r4, #12]
 8002b84:	f8d9 2000 	ldr.w	r2, [r9]
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	429d      	cmp	r5, r3
 8002b8c:	db2a      	blt.n	8002be4 <_printf_common+0xa8>
 8002b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	3300      	adds	r3, #0
 8002b96:	bf18      	it	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	0692      	lsls	r2, r2, #26
 8002b9c:	d42f      	bmi.n	8002bfe <_printf_common+0xc2>
 8002b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba2:	4639      	mov	r1, r7
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	47c0      	blx	r8
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d022      	beq.n	8002bf2 <_printf_common+0xb6>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	68e5      	ldr	r5, [r4, #12]
 8002bb0:	f003 0306 	and.w	r3, r3, #6
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	bf18      	it	ne
 8002bb8:	2500      	movne	r5, #0
 8002bba:	f8d9 2000 	ldr.w	r2, [r9]
 8002bbe:	f04f 0900 	mov.w	r9, #0
 8002bc2:	bf08      	it	eq
 8002bc4:	1aad      	subeq	r5, r5, r2
 8002bc6:	68a3      	ldr	r3, [r4, #8]
 8002bc8:	6922      	ldr	r2, [r4, #16]
 8002bca:	bf08      	it	eq
 8002bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bfc4      	itt	gt
 8002bd4:	1a9b      	subgt	r3, r3, r2
 8002bd6:	18ed      	addgt	r5, r5, r3
 8002bd8:	341a      	adds	r4, #26
 8002bda:	454d      	cmp	r5, r9
 8002bdc:	d11b      	bne.n	8002c16 <_printf_common+0xda>
 8002bde:	2000      	movs	r0, #0
 8002be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be4:	2301      	movs	r3, #1
 8002be6:	4652      	mov	r2, sl
 8002be8:	4639      	mov	r1, r7
 8002bea:	4630      	mov	r0, r6
 8002bec:	47c0      	blx	r8
 8002bee:	3001      	adds	r0, #1
 8002bf0:	d103      	bne.n	8002bfa <_printf_common+0xbe>
 8002bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bfa:	3501      	adds	r5, #1
 8002bfc:	e7c1      	b.n	8002b82 <_printf_common+0x46>
 8002bfe:	2030      	movs	r0, #48	; 0x30
 8002c00:	18e1      	adds	r1, r4, r3
 8002c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c0c:	4422      	add	r2, r4
 8002c0e:	3302      	adds	r3, #2
 8002c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c14:	e7c3      	b.n	8002b9e <_printf_common+0x62>
 8002c16:	2301      	movs	r3, #1
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4639      	mov	r1, r7
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	47c0      	blx	r8
 8002c20:	3001      	adds	r0, #1
 8002c22:	d0e6      	beq.n	8002bf2 <_printf_common+0xb6>
 8002c24:	f109 0901 	add.w	r9, r9, #1
 8002c28:	e7d7      	b.n	8002bda <_printf_common+0x9e>
	...

08002c2c <_printf_i>:
 8002c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c30:	4617      	mov	r7, r2
 8002c32:	7e0a      	ldrb	r2, [r1, #24]
 8002c34:	b085      	sub	sp, #20
 8002c36:	2a6e      	cmp	r2, #110	; 0x6e
 8002c38:	4698      	mov	r8, r3
 8002c3a:	4606      	mov	r6, r0
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002c44:	f000 80bc 	beq.w	8002dc0 <_printf_i+0x194>
 8002c48:	d81a      	bhi.n	8002c80 <_printf_i+0x54>
 8002c4a:	2a63      	cmp	r2, #99	; 0x63
 8002c4c:	d02e      	beq.n	8002cac <_printf_i+0x80>
 8002c4e:	d80a      	bhi.n	8002c66 <_printf_i+0x3a>
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	f000 80c8 	beq.w	8002de6 <_printf_i+0x1ba>
 8002c56:	2a58      	cmp	r2, #88	; 0x58
 8002c58:	f000 808a 	beq.w	8002d70 <_printf_i+0x144>
 8002c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002c64:	e02a      	b.n	8002cbc <_printf_i+0x90>
 8002c66:	2a64      	cmp	r2, #100	; 0x64
 8002c68:	d001      	beq.n	8002c6e <_printf_i+0x42>
 8002c6a:	2a69      	cmp	r2, #105	; 0x69
 8002c6c:	d1f6      	bne.n	8002c5c <_printf_i+0x30>
 8002c6e:	6821      	ldr	r1, [r4, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c76:	d023      	beq.n	8002cc0 <_printf_i+0x94>
 8002c78:	1d11      	adds	r1, r2, #4
 8002c7a:	6019      	str	r1, [r3, #0]
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	e027      	b.n	8002cd0 <_printf_i+0xa4>
 8002c80:	2a73      	cmp	r2, #115	; 0x73
 8002c82:	f000 80b4 	beq.w	8002dee <_printf_i+0x1c2>
 8002c86:	d808      	bhi.n	8002c9a <_printf_i+0x6e>
 8002c88:	2a6f      	cmp	r2, #111	; 0x6f
 8002c8a:	d02a      	beq.n	8002ce2 <_printf_i+0xb6>
 8002c8c:	2a70      	cmp	r2, #112	; 0x70
 8002c8e:	d1e5      	bne.n	8002c5c <_printf_i+0x30>
 8002c90:	680a      	ldr	r2, [r1, #0]
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	600a      	str	r2, [r1, #0]
 8002c98:	e003      	b.n	8002ca2 <_printf_i+0x76>
 8002c9a:	2a75      	cmp	r2, #117	; 0x75
 8002c9c:	d021      	beq.n	8002ce2 <_printf_i+0xb6>
 8002c9e:	2a78      	cmp	r2, #120	; 0x78
 8002ca0:	d1dc      	bne.n	8002c5c <_printf_i+0x30>
 8002ca2:	2278      	movs	r2, #120	; 0x78
 8002ca4:	496f      	ldr	r1, [pc, #444]	; (8002e64 <_printf_i+0x238>)
 8002ca6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002caa:	e064      	b.n	8002d76 <_printf_i+0x14a>
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002cb2:	1d11      	adds	r1, r2, #4
 8002cb4:	6019      	str	r1, [r3, #0]
 8002cb6:	6813      	ldr	r3, [r2, #0]
 8002cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0a3      	b.n	8002e08 <_printf_i+0x1dc>
 8002cc0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002cc4:	f102 0104 	add.w	r1, r2, #4
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	d0d7      	beq.n	8002c7c <_printf_i+0x50>
 8002ccc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da03      	bge.n	8002cdc <_printf_i+0xb0>
 8002cd4:	222d      	movs	r2, #45	; 0x2d
 8002cd6:	425b      	negs	r3, r3
 8002cd8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002cdc:	4962      	ldr	r1, [pc, #392]	; (8002e68 <_printf_i+0x23c>)
 8002cde:	220a      	movs	r2, #10
 8002ce0:	e017      	b.n	8002d12 <_printf_i+0xe6>
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cea:	d003      	beq.n	8002cf4 <_printf_i+0xc8>
 8002cec:	1d08      	adds	r0, r1, #4
 8002cee:	6018      	str	r0, [r3, #0]
 8002cf0:	680b      	ldr	r3, [r1, #0]
 8002cf2:	e006      	b.n	8002d02 <_printf_i+0xd6>
 8002cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cf8:	f101 0004 	add.w	r0, r1, #4
 8002cfc:	6018      	str	r0, [r3, #0]
 8002cfe:	d0f7      	beq.n	8002cf0 <_printf_i+0xc4>
 8002d00:	880b      	ldrh	r3, [r1, #0]
 8002d02:	2a6f      	cmp	r2, #111	; 0x6f
 8002d04:	bf14      	ite	ne
 8002d06:	220a      	movne	r2, #10
 8002d08:	2208      	moveq	r2, #8
 8002d0a:	4957      	ldr	r1, [pc, #348]	; (8002e68 <_printf_i+0x23c>)
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002d12:	6865      	ldr	r5, [r4, #4]
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	60a5      	str	r5, [r4, #8]
 8002d18:	f2c0 809c 	blt.w	8002e54 <_printf_i+0x228>
 8002d1c:	6820      	ldr	r0, [r4, #0]
 8002d1e:	f020 0004 	bic.w	r0, r0, #4
 8002d22:	6020      	str	r0, [r4, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13f      	bne.n	8002da8 <_printf_i+0x17c>
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	f040 8095 	bne.w	8002e58 <_printf_i+0x22c>
 8002d2e:	4675      	mov	r5, lr
 8002d30:	2a08      	cmp	r2, #8
 8002d32:	d10b      	bne.n	8002d4c <_printf_i+0x120>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	07da      	lsls	r2, r3, #31
 8002d38:	d508      	bpl.n	8002d4c <_printf_i+0x120>
 8002d3a:	6923      	ldr	r3, [r4, #16]
 8002d3c:	6862      	ldr	r2, [r4, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	bfde      	ittt	le
 8002d42:	2330      	movle	r3, #48	; 0x30
 8002d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d4c:	ebae 0305 	sub.w	r3, lr, r5
 8002d50:	6123      	str	r3, [r4, #16]
 8002d52:	f8cd 8000 	str.w	r8, [sp]
 8002d56:	463b      	mov	r3, r7
 8002d58:	aa03      	add	r2, sp, #12
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f7ff feed 	bl	8002b3c <_printf_common>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d155      	bne.n	8002e12 <_printf_i+0x1e6>
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6a:	b005      	add	sp, #20
 8002d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d70:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002d74:	493c      	ldr	r1, [pc, #240]	; (8002e68 <_printf_i+0x23c>)
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d7e:	f100 0504 	add.w	r5, r0, #4
 8002d82:	601d      	str	r5, [r3, #0]
 8002d84:	d001      	beq.n	8002d8a <_printf_i+0x15e>
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	e002      	b.n	8002d90 <_printf_i+0x164>
 8002d8a:	0655      	lsls	r5, r2, #25
 8002d8c:	d5fb      	bpl.n	8002d86 <_printf_i+0x15a>
 8002d8e:	8803      	ldrh	r3, [r0, #0]
 8002d90:	07d0      	lsls	r0, r2, #31
 8002d92:	bf44      	itt	mi
 8002d94:	f042 0220 	orrmi.w	r2, r2, #32
 8002d98:	6022      	strmi	r2, [r4, #0]
 8002d9a:	b91b      	cbnz	r3, 8002da4 <_printf_i+0x178>
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	f022 0220 	bic.w	r2, r2, #32
 8002da2:	6022      	str	r2, [r4, #0]
 8002da4:	2210      	movs	r2, #16
 8002da6:	e7b1      	b.n	8002d0c <_printf_i+0xe0>
 8002da8:	4675      	mov	r5, lr
 8002daa:	fbb3 f0f2 	udiv	r0, r3, r2
 8002dae:	fb02 3310 	mls	r3, r2, r0, r3
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002db8:	4603      	mov	r3, r0
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d1f5      	bne.n	8002daa <_printf_i+0x17e>
 8002dbe:	e7b7      	b.n	8002d30 <_printf_i+0x104>
 8002dc0:	6808      	ldr	r0, [r1, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002dc8:	6949      	ldr	r1, [r1, #20]
 8002dca:	d004      	beq.n	8002dd6 <_printf_i+0x1aa>
 8002dcc:	1d10      	adds	r0, r2, #4
 8002dce:	6018      	str	r0, [r3, #0]
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	6019      	str	r1, [r3, #0]
 8002dd4:	e007      	b.n	8002de6 <_printf_i+0x1ba>
 8002dd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002dda:	f102 0004 	add.w	r0, r2, #4
 8002dde:	6018      	str	r0, [r3, #0]
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	d0f6      	beq.n	8002dd2 <_printf_i+0x1a6>
 8002de4:	8019      	strh	r1, [r3, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	4675      	mov	r5, lr
 8002dea:	6123      	str	r3, [r4, #16]
 8002dec:	e7b1      	b.n	8002d52 <_printf_i+0x126>
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	1d11      	adds	r1, r2, #4
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	6815      	ldr	r5, [r2, #0]
 8002df6:	2100      	movs	r1, #0
 8002df8:	6862      	ldr	r2, [r4, #4]
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f843 	bl	8002e86 <memchr>
 8002e00:	b108      	cbz	r0, 8002e06 <_printf_i+0x1da>
 8002e02:	1b40      	subs	r0, r0, r5
 8002e04:	6060      	str	r0, [r4, #4]
 8002e06:	6863      	ldr	r3, [r4, #4]
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e10:	e79f      	b.n	8002d52 <_printf_i+0x126>
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	462a      	mov	r2, r5
 8002e16:	4639      	mov	r1, r7
 8002e18:	4630      	mov	r0, r6
 8002e1a:	47c0      	blx	r8
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	d0a2      	beq.n	8002d66 <_printf_i+0x13a>
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	079b      	lsls	r3, r3, #30
 8002e24:	d507      	bpl.n	8002e36 <_printf_i+0x20a>
 8002e26:	2500      	movs	r5, #0
 8002e28:	f104 0919 	add.w	r9, r4, #25
 8002e2c:	68e3      	ldr	r3, [r4, #12]
 8002e2e:	9a03      	ldr	r2, [sp, #12]
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	429d      	cmp	r5, r3
 8002e34:	db05      	blt.n	8002e42 <_printf_i+0x216>
 8002e36:	68e0      	ldr	r0, [r4, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	bfb8      	it	lt
 8002e3e:	4618      	movlt	r0, r3
 8002e40:	e793      	b.n	8002d6a <_printf_i+0x13e>
 8002e42:	2301      	movs	r3, #1
 8002e44:	464a      	mov	r2, r9
 8002e46:	4639      	mov	r1, r7
 8002e48:	4630      	mov	r0, r6
 8002e4a:	47c0      	blx	r8
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d08a      	beq.n	8002d66 <_printf_i+0x13a>
 8002e50:	3501      	adds	r5, #1
 8002e52:	e7eb      	b.n	8002e2c <_printf_i+0x200>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1a7      	bne.n	8002da8 <_printf_i+0x17c>
 8002e58:	780b      	ldrb	r3, [r1, #0]
 8002e5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e62:	e765      	b.n	8002d30 <_printf_i+0x104>
 8002e64:	080032f6 	.word	0x080032f6
 8002e68:	080032e5 	.word	0x080032e5

08002e6c <__ascii_wctomb>:
 8002e6c:	b149      	cbz	r1, 8002e82 <__ascii_wctomb+0x16>
 8002e6e:	2aff      	cmp	r2, #255	; 0xff
 8002e70:	bf8b      	itete	hi
 8002e72:	238a      	movhi	r3, #138	; 0x8a
 8002e74:	700a      	strbls	r2, [r1, #0]
 8002e76:	6003      	strhi	r3, [r0, #0]
 8002e78:	2001      	movls	r0, #1
 8002e7a:	bf88      	it	hi
 8002e7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8002e80:	4770      	bx	lr
 8002e82:	4608      	mov	r0, r1
 8002e84:	4770      	bx	lr

08002e86 <memchr>:
 8002e86:	b510      	push	{r4, lr}
 8002e88:	b2c9      	uxtb	r1, r1
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4290      	cmp	r0, r2
 8002e8e:	4603      	mov	r3, r0
 8002e90:	d101      	bne.n	8002e96 <memchr+0x10>
 8002e92:	2000      	movs	r0, #0
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	781c      	ldrb	r4, [r3, #0]
 8002e98:	3001      	adds	r0, #1
 8002e9a:	428c      	cmp	r4, r1
 8002e9c:	d1f6      	bne.n	8002e8c <memchr+0x6>
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	bd10      	pop	{r4, pc}

08002ea2 <memcpy>:
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	1e43      	subs	r3, r0, #1
 8002ea6:	440a      	add	r2, r1
 8002ea8:	4291      	cmp	r1, r2
 8002eaa:	d100      	bne.n	8002eae <memcpy+0xc>
 8002eac:	bd10      	pop	{r4, pc}
 8002eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eb6:	e7f7      	b.n	8002ea8 <memcpy+0x6>

08002eb8 <memmove>:
 8002eb8:	4288      	cmp	r0, r1
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	eb01 0302 	add.w	r3, r1, r2
 8002ec0:	d803      	bhi.n	8002eca <memmove+0x12>
 8002ec2:	1e42      	subs	r2, r0, #1
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	d10c      	bne.n	8002ee2 <memmove+0x2a>
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	d2f9      	bcs.n	8002ec2 <memmove+0xa>
 8002ece:	1881      	adds	r1, r0, r2
 8002ed0:	1ad2      	subs	r2, r2, r3
 8002ed2:	42d3      	cmn	r3, r2
 8002ed4:	d100      	bne.n	8002ed8 <memmove+0x20>
 8002ed6:	bd10      	pop	{r4, pc}
 8002ed8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002edc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002ee0:	e7f7      	b.n	8002ed2 <memmove+0x1a>
 8002ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ee6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002eea:	e7eb      	b.n	8002ec4 <memmove+0xc>

08002eec <_free_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4605      	mov	r5, r0
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d043      	beq.n	8002f7c <_free_r+0x90>
 8002ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef8:	1f0c      	subs	r4, r1, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bfb8      	it	lt
 8002efe:	18e4      	addlt	r4, r4, r3
 8002f00:	f000 f8d4 	bl	80030ac <__malloc_lock>
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <_free_r+0x94>)
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	4610      	mov	r0, r2
 8002f0a:	b933      	cbnz	r3, 8002f1a <_free_r+0x2e>
 8002f0c:	6063      	str	r3, [r4, #4]
 8002f0e:	6014      	str	r4, [r2, #0]
 8002f10:	4628      	mov	r0, r5
 8002f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f16:	f000 b8ca 	b.w	80030ae <__malloc_unlock>
 8002f1a:	42a3      	cmp	r3, r4
 8002f1c:	d90b      	bls.n	8002f36 <_free_r+0x4a>
 8002f1e:	6821      	ldr	r1, [r4, #0]
 8002f20:	1862      	adds	r2, r4, r1
 8002f22:	4293      	cmp	r3, r2
 8002f24:	bf01      	itttt	eq
 8002f26:	681a      	ldreq	r2, [r3, #0]
 8002f28:	685b      	ldreq	r3, [r3, #4]
 8002f2a:	1852      	addeq	r2, r2, r1
 8002f2c:	6022      	streq	r2, [r4, #0]
 8002f2e:	6063      	str	r3, [r4, #4]
 8002f30:	6004      	str	r4, [r0, #0]
 8002f32:	e7ed      	b.n	8002f10 <_free_r+0x24>
 8002f34:	4613      	mov	r3, r2
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	b10a      	cbz	r2, 8002f3e <_free_r+0x52>
 8002f3a:	42a2      	cmp	r2, r4
 8002f3c:	d9fa      	bls.n	8002f34 <_free_r+0x48>
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	1858      	adds	r0, r3, r1
 8002f42:	42a0      	cmp	r0, r4
 8002f44:	d10b      	bne.n	8002f5e <_free_r+0x72>
 8002f46:	6820      	ldr	r0, [r4, #0]
 8002f48:	4401      	add	r1, r0
 8002f4a:	1858      	adds	r0, r3, r1
 8002f4c:	4282      	cmp	r2, r0
 8002f4e:	6019      	str	r1, [r3, #0]
 8002f50:	d1de      	bne.n	8002f10 <_free_r+0x24>
 8002f52:	6810      	ldr	r0, [r2, #0]
 8002f54:	6852      	ldr	r2, [r2, #4]
 8002f56:	4401      	add	r1, r0
 8002f58:	6019      	str	r1, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	e7d8      	b.n	8002f10 <_free_r+0x24>
 8002f5e:	d902      	bls.n	8002f66 <_free_r+0x7a>
 8002f60:	230c      	movs	r3, #12
 8002f62:	602b      	str	r3, [r5, #0]
 8002f64:	e7d4      	b.n	8002f10 <_free_r+0x24>
 8002f66:	6820      	ldr	r0, [r4, #0]
 8002f68:	1821      	adds	r1, r4, r0
 8002f6a:	428a      	cmp	r2, r1
 8002f6c:	bf01      	itttt	eq
 8002f6e:	6811      	ldreq	r1, [r2, #0]
 8002f70:	6852      	ldreq	r2, [r2, #4]
 8002f72:	1809      	addeq	r1, r1, r0
 8002f74:	6021      	streq	r1, [r4, #0]
 8002f76:	6062      	str	r2, [r4, #4]
 8002f78:	605c      	str	r4, [r3, #4]
 8002f7a:	e7c9      	b.n	8002f10 <_free_r+0x24>
 8002f7c:	bd38      	pop	{r3, r4, r5, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000254 	.word	0x20000254

08002f84 <_malloc_r>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	1ccd      	adds	r5, r1, #3
 8002f88:	f025 0503 	bic.w	r5, r5, #3
 8002f8c:	3508      	adds	r5, #8
 8002f8e:	2d0c      	cmp	r5, #12
 8002f90:	bf38      	it	cc
 8002f92:	250c      	movcc	r5, #12
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	4606      	mov	r6, r0
 8002f98:	db01      	blt.n	8002f9e <_malloc_r+0x1a>
 8002f9a:	42a9      	cmp	r1, r5
 8002f9c:	d903      	bls.n	8002fa6 <_malloc_r+0x22>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	f000 f881 	bl	80030ac <__malloc_lock>
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <_malloc_r+0xb4>)
 8002fac:	6814      	ldr	r4, [r2, #0]
 8002fae:	4621      	mov	r1, r4
 8002fb0:	b991      	cbnz	r1, 8002fd8 <_malloc_r+0x54>
 8002fb2:	4c22      	ldr	r4, [pc, #136]	; (800303c <_malloc_r+0xb8>)
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b91b      	cbnz	r3, 8002fc0 <_malloc_r+0x3c>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f000 f867 	bl	800308c <_sbrk_r>
 8002fbe:	6020      	str	r0, [r4, #0]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f000 f862 	bl	800308c <_sbrk_r>
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	d126      	bne.n	800301a <_malloc_r+0x96>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	4630      	mov	r0, r6
 8002fd0:	6033      	str	r3, [r6, #0]
 8002fd2:	f000 f86c 	bl	80030ae <__malloc_unlock>
 8002fd6:	e7e4      	b.n	8002fa2 <_malloc_r+0x1e>
 8002fd8:	680b      	ldr	r3, [r1, #0]
 8002fda:	1b5b      	subs	r3, r3, r5
 8002fdc:	d41a      	bmi.n	8003014 <_malloc_r+0x90>
 8002fde:	2b0b      	cmp	r3, #11
 8002fe0:	d90f      	bls.n	8003002 <_malloc_r+0x7e>
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	18cc      	adds	r4, r1, r3
 8002fe6:	50cd      	str	r5, [r1, r3]
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 f860 	bl	80030ae <__malloc_unlock>
 8002fee:	f104 000b 	add.w	r0, r4, #11
 8002ff2:	1d23      	adds	r3, r4, #4
 8002ff4:	f020 0007 	bic.w	r0, r0, #7
 8002ff8:	1ac3      	subs	r3, r0, r3
 8002ffa:	d01b      	beq.n	8003034 <_malloc_r+0xb0>
 8002ffc:	425a      	negs	r2, r3
 8002ffe:	50e2      	str	r2, [r4, r3]
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	428c      	cmp	r4, r1
 8003004:	bf0b      	itete	eq
 8003006:	6863      	ldreq	r3, [r4, #4]
 8003008:	684b      	ldrne	r3, [r1, #4]
 800300a:	6013      	streq	r3, [r2, #0]
 800300c:	6063      	strne	r3, [r4, #4]
 800300e:	bf18      	it	ne
 8003010:	460c      	movne	r4, r1
 8003012:	e7e9      	b.n	8002fe8 <_malloc_r+0x64>
 8003014:	460c      	mov	r4, r1
 8003016:	6849      	ldr	r1, [r1, #4]
 8003018:	e7ca      	b.n	8002fb0 <_malloc_r+0x2c>
 800301a:	1cc4      	adds	r4, r0, #3
 800301c:	f024 0403 	bic.w	r4, r4, #3
 8003020:	42a0      	cmp	r0, r4
 8003022:	d005      	beq.n	8003030 <_malloc_r+0xac>
 8003024:	1a21      	subs	r1, r4, r0
 8003026:	4630      	mov	r0, r6
 8003028:	f000 f830 	bl	800308c <_sbrk_r>
 800302c:	3001      	adds	r0, #1
 800302e:	d0cd      	beq.n	8002fcc <_malloc_r+0x48>
 8003030:	6025      	str	r5, [r4, #0]
 8003032:	e7d9      	b.n	8002fe8 <_malloc_r+0x64>
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	20000254 	.word	0x20000254
 800303c:	20000258 	.word	0x20000258

08003040 <_realloc_r>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	4607      	mov	r7, r0
 8003044:	4614      	mov	r4, r2
 8003046:	460e      	mov	r6, r1
 8003048:	b921      	cbnz	r1, 8003054 <_realloc_r+0x14>
 800304a:	4611      	mov	r1, r2
 800304c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003050:	f7ff bf98 	b.w	8002f84 <_malloc_r>
 8003054:	b922      	cbnz	r2, 8003060 <_realloc_r+0x20>
 8003056:	f7ff ff49 	bl	8002eec <_free_r>
 800305a:	4625      	mov	r5, r4
 800305c:	4628      	mov	r0, r5
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	f000 f826 	bl	80030b0 <_malloc_usable_size_r>
 8003064:	4284      	cmp	r4, r0
 8003066:	d90f      	bls.n	8003088 <_realloc_r+0x48>
 8003068:	4621      	mov	r1, r4
 800306a:	4638      	mov	r0, r7
 800306c:	f7ff ff8a 	bl	8002f84 <_malloc_r>
 8003070:	4605      	mov	r5, r0
 8003072:	2800      	cmp	r0, #0
 8003074:	d0f2      	beq.n	800305c <_realloc_r+0x1c>
 8003076:	4631      	mov	r1, r6
 8003078:	4622      	mov	r2, r4
 800307a:	f7ff ff12 	bl	8002ea2 <memcpy>
 800307e:	4631      	mov	r1, r6
 8003080:	4638      	mov	r0, r7
 8003082:	f7ff ff33 	bl	8002eec <_free_r>
 8003086:	e7e9      	b.n	800305c <_realloc_r+0x1c>
 8003088:	4635      	mov	r5, r6
 800308a:	e7e7      	b.n	800305c <_realloc_r+0x1c>

0800308c <_sbrk_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	2300      	movs	r3, #0
 8003090:	4c05      	ldr	r4, [pc, #20]	; (80030a8 <_sbrk_r+0x1c>)
 8003092:	4605      	mov	r5, r0
 8003094:	4608      	mov	r0, r1
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	f000 f814 	bl	80030c4 <_sbrk>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_sbrk_r+0x1a>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_sbrk_r+0x1a>
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200005b8 	.word	0x200005b8

080030ac <__malloc_lock>:
 80030ac:	4770      	bx	lr

080030ae <__malloc_unlock>:
 80030ae:	4770      	bx	lr

080030b0 <_malloc_usable_size_r>:
 80030b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80030b4:	2800      	cmp	r0, #0
 80030b6:	f1a0 0004 	sub.w	r0, r0, #4
 80030ba:	bfbc      	itt	lt
 80030bc:	580b      	ldrlt	r3, [r1, r0]
 80030be:	18c0      	addlt	r0, r0, r3
 80030c0:	4770      	bx	lr
	...

080030c4 <_sbrk>:
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <_sbrk+0x14>)
 80030c6:	4602      	mov	r2, r0
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	b909      	cbnz	r1, 80030d0 <_sbrk+0xc>
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <_sbrk+0x18>)
 80030ce:	6019      	str	r1, [r3, #0]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	4402      	add	r2, r0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4770      	bx	lr
 80030d8:	2000025c 	.word	0x2000025c
 80030dc:	200005bc 	.word	0x200005bc

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr
