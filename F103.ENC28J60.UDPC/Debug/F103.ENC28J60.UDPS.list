
F103.ENC28J60.UDPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003164  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08003270  08003270  00013270  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08003638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003d0  200001ec  08003824  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005bc  08003824  000205bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001a354  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000348e  00000000  00000000  0003a569  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008334  00000000  00000000  0003d9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb0  00000000  00000000  00045d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ea8  00000000  00000000  000468e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006ddb  00000000  00000000  00047788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003f56  00000000  00000000  0004e563  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000524b9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028a8  00000000  00000000  00052538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08003258 	.word	0x08003258

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	08003258 	.word	0x08003258

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000018 	.word	0x20000018
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 f91e 	bl	80023fc <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000260 	.word	0x20000260
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000260 	.word	0x20000260

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000304:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000308:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800030a:	2b02      	cmp	r3, #2
 800030c:	d003      	beq.n	8000316 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800030e:	2304      	movs	r3, #4
 8000310:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000316:	6803      	ldr	r3, [r0, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	f022 020e 	bic.w	r2, r2, #14
 800031e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	f022 0201 	bic.w	r2, r2, #1
 8000326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000328:	4a18      	ldr	r2, [pc, #96]	; (800038c <HAL_DMA_Abort_IT+0x88>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d01f      	beq.n	800036e <HAL_DMA_Abort_IT+0x6a>
 800032e:	3214      	adds	r2, #20
 8000330:	4293      	cmp	r3, r2
 8000332:	d01e      	beq.n	8000372 <HAL_DMA_Abort_IT+0x6e>
 8000334:	3214      	adds	r2, #20
 8000336:	4293      	cmp	r3, r2
 8000338:	d01d      	beq.n	8000376 <HAL_DMA_Abort_IT+0x72>
 800033a:	3214      	adds	r2, #20
 800033c:	4293      	cmp	r3, r2
 800033e:	d01d      	beq.n	800037c <HAL_DMA_Abort_IT+0x78>
 8000340:	3214      	adds	r2, #20
 8000342:	4293      	cmp	r3, r2
 8000344:	d01d      	beq.n	8000382 <HAL_DMA_Abort_IT+0x7e>
 8000346:	3214      	adds	r2, #20
 8000348:	4293      	cmp	r3, r2
 800034a:	bf0c      	ite	eq
 800034c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000350:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000356:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000358:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800035a:	2301      	movs	r3, #1
 800035c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000360:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000362:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000366:	b17b      	cbz	r3, 8000388 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000368:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800036a:	4620      	mov	r0, r4
 800036c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800036e:	2301      	movs	r3, #1
 8000370:	e7f0      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000372:	2310      	movs	r3, #16
 8000374:	e7ee      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800037a:	e7eb      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	e7e8      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	e7e5      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000388:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800038a:	bd10      	pop	{r4, pc}
 800038c:	40020008 	.word	0x40020008
 8000390:	40020000 	.word	0x40020000

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000398:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800039a:	4616      	mov	r6, r2
 800039c:	4b65      	ldr	r3, [pc, #404]	; (8000534 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800039e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000544 <HAL_GPIO_Init+0x1b0>
 80003a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000548 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80003a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	d17f      	bne.n	80004b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80003b8:	684d      	ldr	r5, [r1, #4]
 80003ba:	2d12      	cmp	r5, #18
 80003bc:	f000 80af 	beq.w	800051e <HAL_GPIO_Init+0x18a>
 80003c0:	f200 8088 	bhi.w	80004d4 <HAL_GPIO_Init+0x140>
 80003c4:	2d02      	cmp	r5, #2
 80003c6:	f000 80a7 	beq.w	8000518 <HAL_GPIO_Init+0x184>
 80003ca:	d87c      	bhi.n	80004c6 <HAL_GPIO_Init+0x132>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	f000 808e 	beq.w	80004ee <HAL_GPIO_Init+0x15a>
 80003d2:	2d01      	cmp	r5, #1
 80003d4:	f000 809e 	beq.w	8000514 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	bf93      	iteet	ls
 80003e0:	4682      	movls	sl, r0
 80003e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003e6:	3d08      	subhi	r5, #8
 80003e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ec:	bf92      	itee	ls
 80003ee:	00b5      	lslls	r5, r6, #2
 80003f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f6:	fa09 f805 	lsl.w	r8, r9, r5
 80003fa:	ea2b 0808 	bic.w	r8, fp, r8
 80003fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000402:	bf88      	it	hi
 8000404:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000408:	ea48 0505 	orr.w	r5, r8, r5
 800040c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000410:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000414:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000418:	d04e      	beq.n	80004b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4d47      	ldr	r5, [pc, #284]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041c:	4f46      	ldr	r7, [pc, #280]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041e:	69ad      	ldr	r5, [r5, #24]
 8000420:	f026 0803 	bic.w	r8, r6, #3
 8000424:	f045 0501 	orr.w	r5, r5, #1
 8000428:	61bd      	str	r5, [r7, #24]
 800042a:	69bd      	ldr	r5, [r7, #24]
 800042c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000430:	f005 0501 	and.w	r5, r5, #1
 8000434:	9501      	str	r5, [sp, #4]
 8000436:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000440:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000444:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000448:	fa09 f90b 	lsl.w	r9, r9, fp
 800044c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000450:	4d3a      	ldr	r5, [pc, #232]	; (800053c <HAL_GPIO_Init+0x1a8>)
 8000452:	42a8      	cmp	r0, r5
 8000454:	d068      	beq.n	8000528 <HAL_GPIO_Init+0x194>
 8000456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045a:	42a8      	cmp	r0, r5
 800045c:	d066      	beq.n	800052c <HAL_GPIO_Init+0x198>
 800045e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000462:	42a8      	cmp	r0, r5
 8000464:	d064      	beq.n	8000530 <HAL_GPIO_Init+0x19c>
 8000466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046a:	42a8      	cmp	r0, r5
 800046c:	bf0c      	ite	eq
 800046e:	2503      	moveq	r5, #3
 8000470:	2504      	movne	r5, #4
 8000472:	fa05 f50b 	lsl.w	r5, r5, fp
 8000476:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800047a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800047e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000480:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000484:	bf14      	ite	ne
 8000486:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000488:	43a5      	biceq	r5, r4
 800048a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800048c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000492:	bf14      	ite	ne
 8000494:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000496:	43a5      	biceq	r5, r4
 8000498:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800049a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a0:	bf14      	ite	ne
 80004a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004a4:	43a5      	biceq	r5, r4
 80004a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004ae:	bf14      	ite	ne
 80004b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004b2:	ea25 0404 	biceq.w	r4, r5, r4
 80004b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004b8:	3601      	adds	r6, #1
 80004ba:	2e10      	cmp	r6, #16
 80004bc:	f47f af73 	bne.w	80003a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80004c0:	b003      	add	sp, #12
 80004c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004c6:	2d03      	cmp	r5, #3
 80004c8:	d022      	beq.n	8000510 <HAL_GPIO_Init+0x17c>
 80004ca:	2d11      	cmp	r5, #17
 80004cc:	d184      	bne.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ce:	68ca      	ldr	r2, [r1, #12]
 80004d0:	3204      	adds	r2, #4
          break;
 80004d2:	e781      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004d4:	4f1a      	ldr	r7, [pc, #104]	; (8000540 <HAL_GPIO_Init+0x1ac>)
 80004d6:	42bd      	cmp	r5, r7
 80004d8:	d009      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004da:	d812      	bhi.n	8000502 <HAL_GPIO_Init+0x16e>
 80004dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800054c <HAL_GPIO_Init+0x1b8>
 80004e0:	454d      	cmp	r5, r9
 80004e2:	d004      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004e8:	454d      	cmp	r5, r9
 80004ea:	f47f af75 	bne.w	80003d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ee:	688a      	ldr	r2, [r1, #8]
 80004f0:	b1c2      	cbz	r2, 8000524 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004f4:	bf0c      	ite	eq
 80004f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fe:	2208      	movs	r2, #8
 8000500:	e76a      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000502:	4575      	cmp	r5, lr
 8000504:	d0f3      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 8000506:	4565      	cmp	r5, ip
 8000508:	d0f1      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 800050a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000550 <HAL_GPIO_Init+0x1bc>
 800050e:	e7eb      	b.n	80004e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000510:	2200      	movs	r2, #0
 8000512:	e761      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000514:	68ca      	ldr	r2, [r1, #12]
          break;
 8000516:	e75f      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000518:	68ca      	ldr	r2, [r1, #12]
 800051a:	3208      	adds	r2, #8
          break;
 800051c:	e75c      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051e:	68ca      	ldr	r2, [r1, #12]
 8000520:	320c      	adds	r2, #12
          break;
 8000522:	e759      	b.n	80003d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000524:	2204      	movs	r2, #4
 8000526:	e757      	b.n	80003d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000528:	2500      	movs	r5, #0
 800052a:	e7a2      	b.n	8000472 <HAL_GPIO_Init+0xde>
 800052c:	2501      	movs	r5, #1
 800052e:	e7a0      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000530:	2502      	movs	r5, #2
 8000532:	e79e      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000534:	40010400 	.word	0x40010400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	10210000 	.word	0x10210000
 8000544:	10310000 	.word	0x10310000
 8000548:	10320000 	.word	0x10320000
 800054c:	10110000 	.word	0x10110000
 8000550:	10220000 	.word	0x10220000

08000554 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000554:	b10a      	cbz	r2, 800055a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000556:	6101      	str	r1, [r0, #16]
 8000558:	4770      	bx	lr
 800055a:	0409      	lsls	r1, r1, #16
 800055c:	e7fb      	b.n	8000556 <HAL_GPIO_WritePin+0x2>
	...

08000560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000560:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000564:	6959      	ldr	r1, [r3, #20]
 8000566:	4201      	tst	r1, r0
 8000568:	d002      	beq.n	8000570 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800056a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800056c:	f001 fd5c 	bl	8002028 <HAL_GPIO_EXTI_Callback>
 8000570:	bd08      	pop	{r3, pc}
 8000572:	bf00      	nop
 8000574:	40010400 	.word	0x40010400

08000578 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000578:	6803      	ldr	r3, [r0, #0]
{
 800057a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057e:	07db      	lsls	r3, r3, #31
{
 8000580:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000582:	d410      	bmi.n	80005a6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	079f      	lsls	r7, r3, #30
 8000588:	d45e      	bmi.n	8000648 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800058a:	682b      	ldr	r3, [r5, #0]
 800058c:	0719      	lsls	r1, r3, #28
 800058e:	f100 8095 	bmi.w	80006bc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000592:	682b      	ldr	r3, [r5, #0]
 8000594:	075a      	lsls	r2, r3, #29
 8000596:	f100 80bf 	bmi.w	8000718 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800059a:	69ea      	ldr	r2, [r5, #28]
 800059c:	2a00      	cmp	r2, #0
 800059e:	f040 812d 	bne.w	80007fc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005a2:	2000      	movs	r0, #0
 80005a4:	e014      	b.n	80005d0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005a6:	4c90      	ldr	r4, [pc, #576]	; (80007e8 <HAL_RCC_OscConfig+0x270>)
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	f003 030c 	and.w	r3, r3, #12
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d007      	beq.n	80005c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b2:	6863      	ldr	r3, [r4, #4]
 80005b4:	f003 030c 	and.w	r3, r3, #12
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d10c      	bne.n	80005d6 <HAL_RCC_OscConfig+0x5e>
 80005bc:	6863      	ldr	r3, [r4, #4]
 80005be:	03de      	lsls	r6, r3, #15
 80005c0:	d509      	bpl.n	80005d6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	039c      	lsls	r4, r3, #14
 80005c6:	d5dd      	bpl.n	8000584 <HAL_RCC_OscConfig+0xc>
 80005c8:	686b      	ldr	r3, [r5, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1da      	bne.n	8000584 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005ce:	2001      	movs	r0, #1
}
 80005d0:	b002      	add	sp, #8
 80005d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d6:	686b      	ldr	r3, [r5, #4]
 80005d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005dc:	d110      	bne.n	8000600 <HAL_RCC_OscConfig+0x88>
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005e6:	f7ff fdfb 	bl	80001e0 <HAL_GetTick>
 80005ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	0398      	lsls	r0, r3, #14
 80005f0:	d4c8      	bmi.n	8000584 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f2:	f7ff fdf5 	bl	80001e0 <HAL_GetTick>
 80005f6:	1b80      	subs	r0, r0, r6
 80005f8:	2864      	cmp	r0, #100	; 0x64
 80005fa:	d9f7      	bls.n	80005ec <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005fc:	2003      	movs	r0, #3
 80005fe:	e7e7      	b.n	80005d0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000600:	b99b      	cbnz	r3, 800062a <HAL_RCC_OscConfig+0xb2>
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000608:	6023      	str	r3, [r4, #0]
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000610:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000612:	f7ff fde5 	bl	80001e0 <HAL_GetTick>
 8000616:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	0399      	lsls	r1, r3, #14
 800061c:	d5b2      	bpl.n	8000584 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800061e:	f7ff fddf 	bl	80001e0 <HAL_GetTick>
 8000622:	1b80      	subs	r0, r0, r6
 8000624:	2864      	cmp	r0, #100	; 0x64
 8000626:	d9f7      	bls.n	8000618 <HAL_RCC_OscConfig+0xa0>
 8000628:	e7e8      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	d103      	bne.n	800063a <HAL_RCC_OscConfig+0xc2>
 8000632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000636:	6023      	str	r3, [r4, #0]
 8000638:	e7d1      	b.n	80005de <HAL_RCC_OscConfig+0x66>
 800063a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800063e:	6023      	str	r3, [r4, #0]
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000646:	e7cd      	b.n	80005e4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000648:	4c67      	ldr	r4, [pc, #412]	; (80007e8 <HAL_RCC_OscConfig+0x270>)
 800064a:	6863      	ldr	r3, [r4, #4]
 800064c:	f013 0f0c 	tst.w	r3, #12
 8000650:	d007      	beq.n	8000662 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000652:	6863      	ldr	r3, [r4, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b08      	cmp	r3, #8
 800065a:	d110      	bne.n	800067e <HAL_RCC_OscConfig+0x106>
 800065c:	6863      	ldr	r3, [r4, #4]
 800065e:	03da      	lsls	r2, r3, #15
 8000660:	d40d      	bmi.n	800067e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	079b      	lsls	r3, r3, #30
 8000666:	d502      	bpl.n	800066e <HAL_RCC_OscConfig+0xf6>
 8000668:	692b      	ldr	r3, [r5, #16]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1af      	bne.n	80005ce <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	696a      	ldr	r2, [r5, #20]
 8000672:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000676:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800067a:	6023      	str	r3, [r4, #0]
 800067c:	e785      	b.n	800058a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800067e:	692a      	ldr	r2, [r5, #16]
 8000680:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <HAL_RCC_OscConfig+0x274>)
 8000682:	b16a      	cbz	r2, 80006a0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000688:	f7ff fdaa 	bl	80001e0 <HAL_GetTick>
 800068c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800068e:	6823      	ldr	r3, [r4, #0]
 8000690:	079f      	lsls	r7, r3, #30
 8000692:	d4ec      	bmi.n	800066e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000694:	f7ff fda4 	bl	80001e0 <HAL_GetTick>
 8000698:	1b80      	subs	r0, r0, r6
 800069a:	2802      	cmp	r0, #2
 800069c:	d9f7      	bls.n	800068e <HAL_RCC_OscConfig+0x116>
 800069e:	e7ad      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006a2:	f7ff fd9d 	bl	80001e0 <HAL_GetTick>
 80006a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	0798      	lsls	r0, r3, #30
 80006ac:	f57f af6d 	bpl.w	800058a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b0:	f7ff fd96 	bl	80001e0 <HAL_GetTick>
 80006b4:	1b80      	subs	r0, r0, r6
 80006b6:	2802      	cmp	r0, #2
 80006b8:	d9f6      	bls.n	80006a8 <HAL_RCC_OscConfig+0x130>
 80006ba:	e79f      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006bc:	69aa      	ldr	r2, [r5, #24]
 80006be:	4c4a      	ldr	r4, [pc, #296]	; (80007e8 <HAL_RCC_OscConfig+0x270>)
 80006c0:	4b4b      	ldr	r3, [pc, #300]	; (80007f0 <HAL_RCC_OscConfig+0x278>)
 80006c2:	b1da      	cbz	r2, 80006fc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006c8:	f7ff fd8a 	bl	80001e0 <HAL_GetTick>
 80006cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d0:	079b      	lsls	r3, r3, #30
 80006d2:	d50d      	bpl.n	80006f0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <HAL_RCC_OscConfig+0x27c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006e2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006e4:	9b01      	ldr	r3, [sp, #4]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f9      	bne.n	80006e2 <HAL_RCC_OscConfig+0x16a>
 80006ee:	e750      	b.n	8000592 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f0:	f7ff fd76 	bl	80001e0 <HAL_GetTick>
 80006f4:	1b80      	subs	r0, r0, r6
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9e9      	bls.n	80006ce <HAL_RCC_OscConfig+0x156>
 80006fa:	e77f      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006fe:	f7ff fd6f 	bl	80001e0 <HAL_GetTick>
 8000702:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000706:	079f      	lsls	r7, r3, #30
 8000708:	f57f af43 	bpl.w	8000592 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800070c:	f7ff fd68 	bl	80001e0 <HAL_GetTick>
 8000710:	1b80      	subs	r0, r0, r6
 8000712:	2802      	cmp	r0, #2
 8000714:	d9f6      	bls.n	8000704 <HAL_RCC_OscConfig+0x18c>
 8000716:	e771      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000718:	4c33      	ldr	r4, [pc, #204]	; (80007e8 <HAL_RCC_OscConfig+0x270>)
 800071a:	69e3      	ldr	r3, [r4, #28]
 800071c:	00d8      	lsls	r0, r3, #3
 800071e:	d424      	bmi.n	800076a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000720:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	69e3      	ldr	r3, [r4, #28]
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61e3      	str	r3, [r4, #28]
 800072a:	69e3      	ldr	r3, [r4, #28]
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000734:	4e30      	ldr	r6, [pc, #192]	; (80007f8 <HAL_RCC_OscConfig+0x280>)
 8000736:	6833      	ldr	r3, [r6, #0]
 8000738:	05d9      	lsls	r1, r3, #23
 800073a:	d518      	bpl.n	800076e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800073c:	68eb      	ldr	r3, [r5, #12]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d126      	bne.n	8000790 <HAL_RCC_OscConfig+0x218>
 8000742:	6a23      	ldr	r3, [r4, #32]
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800074a:	f7ff fd49 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000752:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000754:	6a23      	ldr	r3, [r4, #32]
 8000756:	079b      	lsls	r3, r3, #30
 8000758:	d53f      	bpl.n	80007da <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800075a:	2f00      	cmp	r7, #0
 800075c:	f43f af1d 	beq.w	800059a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000760:	69e3      	ldr	r3, [r4, #28]
 8000762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000766:	61e3      	str	r3, [r4, #28]
 8000768:	e717      	b.n	800059a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800076a:	2700      	movs	r7, #0
 800076c:	e7e2      	b.n	8000734 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800076e:	6833      	ldr	r3, [r6, #0]
 8000770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000774:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000776:	f7ff fd33 	bl	80001e0 <HAL_GetTick>
 800077a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800077c:	6833      	ldr	r3, [r6, #0]
 800077e:	05da      	lsls	r2, r3, #23
 8000780:	d4dc      	bmi.n	800073c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000782:	f7ff fd2d 	bl	80001e0 <HAL_GetTick>
 8000786:	eba0 0008 	sub.w	r0, r0, r8
 800078a:	2864      	cmp	r0, #100	; 0x64
 800078c:	d9f6      	bls.n	800077c <HAL_RCC_OscConfig+0x204>
 800078e:	e735      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000790:	b9ab      	cbnz	r3, 80007be <HAL_RCC_OscConfig+0x246>
 8000792:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000794:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000798:	f023 0301 	bic.w	r3, r3, #1
 800079c:	6223      	str	r3, [r4, #32]
 800079e:	6a23      	ldr	r3, [r4, #32]
 80007a0:	f023 0304 	bic.w	r3, r3, #4
 80007a4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007a6:	f7ff fd1b 	bl	80001e0 <HAL_GetTick>
 80007aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007ac:	6a23      	ldr	r3, [r4, #32]
 80007ae:	0798      	lsls	r0, r3, #30
 80007b0:	d5d3      	bpl.n	800075a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b2:	f7ff fd15 	bl	80001e0 <HAL_GetTick>
 80007b6:	1b80      	subs	r0, r0, r6
 80007b8:	4540      	cmp	r0, r8
 80007ba:	d9f7      	bls.n	80007ac <HAL_RCC_OscConfig+0x234>
 80007bc:	e71e      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007be:	2b05      	cmp	r3, #5
 80007c0:	6a23      	ldr	r3, [r4, #32]
 80007c2:	d103      	bne.n	80007cc <HAL_RCC_OscConfig+0x254>
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6223      	str	r3, [r4, #32]
 80007ca:	e7ba      	b.n	8000742 <HAL_RCC_OscConfig+0x1ca>
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6223      	str	r3, [r4, #32]
 80007d2:	6a23      	ldr	r3, [r4, #32]
 80007d4:	f023 0304 	bic.w	r3, r3, #4
 80007d8:	e7b6      	b.n	8000748 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007da:	f7ff fd01 	bl	80001e0 <HAL_GetTick>
 80007de:	eba0 0008 	sub.w	r0, r0, r8
 80007e2:	42b0      	cmp	r0, r6
 80007e4:	d9b6      	bls.n	8000754 <HAL_RCC_OscConfig+0x1dc>
 80007e6:	e709      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
 80007e8:	40021000 	.word	0x40021000
 80007ec:	42420000 	.word	0x42420000
 80007f0:	42420480 	.word	0x42420480
 80007f4:	20000018 	.word	0x20000018
 80007f8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007fc:	4c22      	ldr	r4, [pc, #136]	; (8000888 <HAL_RCC_OscConfig+0x310>)
 80007fe:	6863      	ldr	r3, [r4, #4]
 8000800:	f003 030c 	and.w	r3, r3, #12
 8000804:	2b08      	cmp	r3, #8
 8000806:	f43f aee2 	beq.w	80005ce <HAL_RCC_OscConfig+0x56>
 800080a:	2300      	movs	r3, #0
 800080c:	4e1f      	ldr	r6, [pc, #124]	; (800088c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800080e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000810:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000812:	d12b      	bne.n	800086c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000814:	f7ff fce4 	bl	80001e0 <HAL_GetTick>
 8000818:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081a:	6823      	ldr	r3, [r4, #0]
 800081c:	0199      	lsls	r1, r3, #6
 800081e:	d41f      	bmi.n	8000860 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000820:	6a2b      	ldr	r3, [r5, #32]
 8000822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000826:	d105      	bne.n	8000834 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000828:	6862      	ldr	r2, [r4, #4]
 800082a:	68a9      	ldr	r1, [r5, #8]
 800082c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000830:	430a      	orrs	r2, r1
 8000832:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000834:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000836:	6862      	ldr	r2, [r4, #4]
 8000838:	430b      	orrs	r3, r1
 800083a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800083e:	4313      	orrs	r3, r2
 8000840:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000842:	2301      	movs	r3, #1
 8000844:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000846:	f7ff fccb 	bl	80001e0 <HAL_GetTick>
 800084a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	019a      	lsls	r2, r3, #6
 8000850:	f53f aea7 	bmi.w	80005a2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000854:	f7ff fcc4 	bl	80001e0 <HAL_GetTick>
 8000858:	1b40      	subs	r0, r0, r5
 800085a:	2802      	cmp	r0, #2
 800085c:	d9f6      	bls.n	800084c <HAL_RCC_OscConfig+0x2d4>
 800085e:	e6cd      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000860:	f7ff fcbe 	bl	80001e0 <HAL_GetTick>
 8000864:	1bc0      	subs	r0, r0, r7
 8000866:	2802      	cmp	r0, #2
 8000868:	d9d7      	bls.n	800081a <HAL_RCC_OscConfig+0x2a2>
 800086a:	e6c7      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800086c:	f7ff fcb8 	bl	80001e0 <HAL_GetTick>
 8000870:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	f57f ae94 	bpl.w	80005a2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800087a:	f7ff fcb1 	bl	80001e0 <HAL_GetTick>
 800087e:	1b40      	subs	r0, r0, r5
 8000880:	2802      	cmp	r0, #2
 8000882:	d9f6      	bls.n	8000872 <HAL_RCC_OscConfig+0x2fa>
 8000884:	e6ba      	b.n	80005fc <HAL_RCC_OscConfig+0x84>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	42420060 	.word	0x42420060

08000890 <HAL_RCC_GetSysClockFreq>:
{
 8000890:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000894:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000896:	ac02      	add	r4, sp, #8
 8000898:	f103 0510 	add.w	r5, r3, #16
 800089c:	4622      	mov	r2, r4
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	6859      	ldr	r1, [r3, #4]
 80008a2:	3308      	adds	r3, #8
 80008a4:	c203      	stmia	r2!, {r0, r1}
 80008a6:	42ab      	cmp	r3, r5
 80008a8:	4614      	mov	r4, r2
 80008aa:	d1f7      	bne.n	800089c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008ac:	2301      	movs	r3, #1
 80008ae:	f88d 3004 	strb.w	r3, [sp, #4]
 80008b2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008b4:	4911      	ldr	r1, [pc, #68]	; (80008fc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008b6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008ba:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008bc:	f003 020c 	and.w	r2, r3, #12
 80008c0:	2a08      	cmp	r2, #8
 80008c2:	d117      	bne.n	80008f4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008c8:	a806      	add	r0, sp, #24
 80008ca:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008cc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008d2:	d50c      	bpl.n	80008ee <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008d4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008dc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008de:	aa06      	add	r2, sp, #24
 80008e0:	4413      	add	r3, r2
 80008e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008e6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008ea:	b007      	add	sp, #28
 80008ec:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_RCC_GetSysClockFreq+0x74>)
 80008f0:	4350      	muls	r0, r2
 80008f2:	e7fa      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008f6:	e7f8      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x5a>
 80008f8:	08003270 	.word	0x08003270
 80008fc:	40021000 	.word	0x40021000
 8000900:	007a1200 	.word	0x007a1200
 8000904:	003d0900 	.word	0x003d0900

08000908 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000908:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <HAL_RCC_ClockConfig+0x138>)
{
 800090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800090e:	6813      	ldr	r3, [r2, #0]
{
 8000910:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	428b      	cmp	r3, r1
{
 8000918:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800091a:	d328      	bcc.n	800096e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800091c:	682a      	ldr	r2, [r5, #0]
 800091e:	0791      	lsls	r1, r2, #30
 8000920:	d432      	bmi.n	8000988 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000922:	07d2      	lsls	r2, r2, #31
 8000924:	d438      	bmi.n	8000998 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000926:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <HAL_RCC_ClockConfig+0x138>)
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	429e      	cmp	r6, r3
 8000930:	d373      	bcc.n	8000a1a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000932:	682a      	ldr	r2, [r5, #0]
 8000934:	4c43      	ldr	r4, [pc, #268]	; (8000a44 <HAL_RCC_ClockConfig+0x13c>)
 8000936:	f012 0f04 	tst.w	r2, #4
 800093a:	d179      	bne.n	8000a30 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800093c:	0713      	lsls	r3, r2, #28
 800093e:	d506      	bpl.n	800094e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000940:	6863      	ldr	r3, [r4, #4]
 8000942:	692a      	ldr	r2, [r5, #16]
 8000944:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000948:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800094c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800094e:	f7ff ff9f 	bl	8000890 <HAL_RCC_GetSysClockFreq>
 8000952:	6863      	ldr	r3, [r4, #4]
 8000954:	4a3c      	ldr	r2, [pc, #240]	; (8000a48 <HAL_RCC_ClockConfig+0x140>)
 8000956:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	40d8      	lsrs	r0, r3
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <HAL_RCC_ClockConfig+0x144>)
 8000960:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fbfa 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000968:	2000      	movs	r0, #0
}
 800096a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	f023 0307 	bic.w	r3, r3, #7
 8000974:	430b      	orrs	r3, r1
 8000976:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000978:	6813      	ldr	r3, [r2, #0]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	4299      	cmp	r1, r3
 8000980:	d0cc      	beq.n	800091c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000982:	2001      	movs	r0, #1
 8000984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000988:	492e      	ldr	r1, [pc, #184]	; (8000a44 <HAL_RCC_ClockConfig+0x13c>)
 800098a:	68a8      	ldr	r0, [r5, #8]
 800098c:	684b      	ldr	r3, [r1, #4]
 800098e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000992:	4303      	orrs	r3, r0
 8000994:	604b      	str	r3, [r1, #4]
 8000996:	e7c4      	b.n	8000922 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000998:	686a      	ldr	r2, [r5, #4]
 800099a:	4c2a      	ldr	r4, [pc, #168]	; (8000a44 <HAL_RCC_ClockConfig+0x13c>)
 800099c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a0:	d11c      	bne.n	80009dc <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a6:	d0ec      	beq.n	8000982 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a8:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009aa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009ae:	f023 0303 	bic.w	r3, r3, #3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009b6:	f7ff fc13 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ba:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009bc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d114      	bne.n	80009ec <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d0ac      	beq.n	8000926 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009cc:	f7ff fc08 	bl	80001e0 <HAL_GetTick>
 80009d0:	1bc0      	subs	r0, r0, r7
 80009d2:	4540      	cmp	r0, r8
 80009d4:	d9f5      	bls.n	80009c2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80009d6:	2003      	movs	r0, #3
 80009d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009dc:	2a02      	cmp	r2, #2
 80009de:	d102      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009e4:	e7df      	b.n	80009a6 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e6:	f013 0f02 	tst.w	r3, #2
 80009ea:	e7dc      	b.n	80009a6 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d10f      	bne.n	8000a10 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	f003 030c 	and.w	r3, r3, #12
 80009f6:	2b08      	cmp	r3, #8
 80009f8:	d095      	beq.n	8000926 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009fa:	f7ff fbf1 	bl	80001e0 <HAL_GetTick>
 80009fe:	1bc0      	subs	r0, r0, r7
 8000a00:	4540      	cmp	r0, r8
 8000a02:	d9f5      	bls.n	80009f0 <HAL_RCC_ClockConfig+0xe8>
 8000a04:	e7e7      	b.n	80009d6 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a06:	f7ff fbeb 	bl	80001e0 <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	4540      	cmp	r0, r8
 8000a0e:	d8e2      	bhi.n	80009d6 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	f013 0f0c 	tst.w	r3, #12
 8000a16:	d1f6      	bne.n	8000a06 <HAL_RCC_ClockConfig+0xfe>
 8000a18:	e785      	b.n	8000926 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f023 0307 	bic.w	r3, r3, #7
 8000a20:	4333      	orrs	r3, r6
 8000a22:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a24:	6813      	ldr	r3, [r2, #0]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	429e      	cmp	r6, r3
 8000a2c:	d1a9      	bne.n	8000982 <HAL_RCC_ClockConfig+0x7a>
 8000a2e:	e780      	b.n	8000932 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	68e9      	ldr	r1, [r5, #12]
 8000a34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6063      	str	r3, [r4, #4]
 8000a3c:	e77e      	b.n	800093c <HAL_RCC_ClockConfig+0x34>
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000
 8000a44:	40021000 	.word	0x40021000
 8000a48:	0800342f 	.word	0x0800342f
 8000a4c:	20000018 	.word	0x20000018

08000a50 <HAL_RCC_GetHCLKFreq>:
}
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000018 	.word	0x20000018

08000a5c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a6a:	6810      	ldr	r0, [r2, #0]
}    
 8000a6c:	40d8      	lsrs	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	0800343f 	.word	0x0800343f
 8000a78:	20000018 	.word	0x20000018

08000a7c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a8a:	6810      	ldr	r0, [r2, #0]
} 
 8000a8c:	40d8      	lsrs	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	40021000 	.word	0x40021000
 8000a94:	0800343f 	.word	0x0800343f
 8000a98:	20000018 	.word	0x20000018

08000a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	4688      	mov	r8, r1
 8000aa4:	4617      	mov	r7, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6893      	ldr	r3, [r2, #8]
 8000aae:	ea38 0303 	bics.w	r3, r8, r3
 8000ab2:	bf0c      	ite	eq
 8000ab4:	2301      	moveq	r3, #1
 8000ab6:	2300      	movne	r3, #0
 8000ab8:	429f      	cmp	r7, r3
 8000aba:	d102      	bne.n	8000ac2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000abc:	2000      	movs	r0, #0
}
 8000abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ac2:	1c6b      	adds	r3, r5, #1
 8000ac4:	d0f2      	beq.n	8000aac <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000ac6:	bb55      	cbnz	r5, 8000b1e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ad0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ad2:	6862      	ldr	r2, [r4, #4]
 8000ad4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ad8:	d10a      	bne.n	8000af0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000ada:	68a2      	ldr	r2, [r4, #8]
 8000adc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ae0:	d002      	beq.n	8000ae8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000ae2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ae6:	d103      	bne.n	8000af0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000aee:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000af0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000af2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000af6:	d109      	bne.n	8000b0c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000afe:	0412      	lsls	r2, r2, #16
 8000b00:	0c12      	lsrs	r2, r2, #16
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b0a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000b12:	2300      	movs	r3, #0
 8000b14:	2003      	movs	r0, #3
 8000b16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b1e:	f7ff fb5f 	bl	80001e0 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	4285      	cmp	r5, r0
 8000b26:	d8c0      	bhi.n	8000aaa <SPI_WaitFlagStateUntilTimeout+0xe>
 8000b28:	e7ce      	b.n	8000ac8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000b2a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b2a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	9200      	str	r2, [sp, #0]
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	2200      	movs	r2, #0
{
 8000b34:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b36:	f7ff ffb1 	bl	8000a9c <SPI_WaitFlagStateUntilTimeout>
 8000b3a:	b120      	cbz	r0, 8000b46 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000b3c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000b46:	b002      	add	sp, #8
 8000b48:	bd10      	pop	{r4, pc}

08000b4a <HAL_SPI_TransmitReceive>:
{
 8000b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b4e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000b50:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b54:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000b56:	2b01      	cmp	r3, #1
{
 8000b58:	4604      	mov	r4, r0
 8000b5a:	460d      	mov	r5, r1
 8000b5c:	4616      	mov	r6, r2
 8000b5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000b60:	f000 80ee 	beq.w	8000d40 <HAL_SPI_TransmitReceive+0x1f6>
 8000b64:	2301      	movs	r3, #1
 8000b66:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b6a:	f7ff fb39 	bl	80001e0 <HAL_GetTick>
  tmp  = hspi->State;
 8000b6e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000b72:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000b74:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b76:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000b78:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b7a:	d00a      	beq.n	8000b92 <HAL_SPI_TransmitReceive+0x48>
 8000b7c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000b80:	f040 80dc 	bne.w	8000d3c <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000b84:	68a2      	ldr	r2, [r4, #8]
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	f040 80d8 	bne.w	8000d3c <HAL_SPI_TransmitReceive+0x1f2>
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	f040 80d5 	bne.w	8000d3c <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d04e      	beq.n	8000c34 <HAL_SPI_TransmitReceive+0xea>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d04c      	beq.n	8000c34 <HAL_SPI_TransmitReceive+0xea>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d049      	beq.n	8000c34 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000ba0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ba4:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000ba6:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000ba8:	bf04      	itt	eq
 8000baa:	2305      	moveq	r3, #5
 8000bac:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000bb4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000bb6:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bb8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000bba:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000bbe:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bc2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000bc4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bc8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000bca:	bf58      	it	pl
 8000bcc:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000bce:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000bd0:	bf58      	it	pl
 8000bd2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000bd6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000bda:	bf58      	it	pl
 8000bdc:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bde:	68e2      	ldr	r2, [r4, #12]
 8000be0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000be4:	d15d      	bne.n	8000ca2 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000be6:	b119      	cbz	r1, 8000bf0 <HAL_SPI_TransmitReceive+0xa6>
 8000be8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000bea:	b292      	uxth	r2, r2
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d106      	bne.n	8000bfe <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000bf0:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000bf4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000bf6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000bfe:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b9bb      	cbnz	r3, 8000c38 <HAL_SPI_TransmitReceive+0xee>
 8000c08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b9a3      	cbnz	r3, 8000c38 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c0e:	f8cd 8000 	str.w	r8, [sp]
 8000c12:	463b      	mov	r3, r7
 8000c14:	2201      	movs	r2, #1
 8000c16:	2102      	movs	r1, #2
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f7ff ff3f 	bl	8000a9c <SPI_WaitFlagStateUntilTimeout>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d135      	bne.n	8000c8e <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c22:	4642      	mov	r2, r8
 8000c24:	4639      	mov	r1, r7
 8000c26:	4620      	mov	r0, r4
 8000c28:	f7ff ff7f 	bl	8000b2a <SPI_CheckFlag_BSY>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d07a      	beq.n	8000d26 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c30:	2320      	movs	r3, #32
 8000c32:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
 8000c36:	e02b      	b.n	8000c90 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000c38:	f1b9 0f00 	cmp.w	r9, #0
 8000c3c:	d00f      	beq.n	8000c5e <HAL_SPI_TransmitReceive+0x114>
 8000c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b163      	cbz	r3, 8000c5e <HAL_SPI_TransmitReceive+0x114>
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	0791      	lsls	r1, r2, #30
 8000c4a:	d508      	bpl.n	8000c5e <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000c4c:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c50:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c54:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000c56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000c5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b163      	cbz	r3, 8000c7e <HAL_SPI_TransmitReceive+0x134>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	07d2      	lsls	r2, r2, #31
 8000c6a:	d508      	bpl.n	8000c7e <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000c6c:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000c76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000c7e:	1c78      	adds	r0, r7, #1
 8000c80:	d0bf      	beq.n	8000c02 <HAL_SPI_TransmitReceive+0xb8>
 8000c82:	f7ff faad 	bl	80001e0 <HAL_GetTick>
 8000c86:	eba0 0008 	sub.w	r0, r0, r8
 8000c8a:	4287      	cmp	r7, r0
 8000c8c:	d8b9      	bhi.n	8000c02 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000c8e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c96:	2300      	movs	r3, #0
 8000c98:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c9c:	b005      	add	sp, #20
 8000c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000ca2:	b119      	cbz	r1, 8000cac <HAL_SPI_TransmitReceive+0x162>
 8000ca4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d106      	bne.n	8000cba <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000cac:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cb0:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000cb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000cba:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000cbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b91b      	cbnz	r3, 8000ccc <HAL_SPI_TransmitReceive+0x182>
 8000cc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0a0      	beq.n	8000c0e <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000ccc:	f1b9 0f00 	cmp.w	r9, #0
 8000cd0:	d00f      	beq.n	8000cf2 <HAL_SPI_TransmitReceive+0x1a8>
 8000cd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b163      	cbz	r3, 8000cf2 <HAL_SPI_TransmitReceive+0x1a8>
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	0791      	lsls	r1, r2, #30
 8000cde:	d508      	bpl.n	8000cf2 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000ce0:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000ce4:	782a      	ldrb	r2, [r5, #0]
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000cf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b16b      	cbz	r3, 8000d14 <HAL_SPI_TransmitReceive+0x1ca>
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	d509      	bpl.n	8000d14 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000d00:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	3601      	adds	r6, #1
 8000d08:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000d0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000d14:	1c7b      	adds	r3, r7, #1
 8000d16:	d0d2      	beq.n	8000cbe <HAL_SPI_TransmitReceive+0x174>
 8000d18:	f7ff fa62 	bl	80001e0 <HAL_GetTick>
 8000d1c:	eba0 0008 	sub.w	r0, r0, r8
 8000d20:	4287      	cmp	r7, r0
 8000d22:	d8cc      	bhi.n	8000cbe <HAL_SPI_TransmitReceive+0x174>
 8000d24:	e7b3      	b.n	8000c8e <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d26:	68a3      	ldr	r3, [r4, #8]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1b1      	bne.n	8000c90 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	9003      	str	r0, [sp, #12]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	9203      	str	r2, [sp, #12]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	9303      	str	r3, [sp, #12]
 8000d38:	9b03      	ldr	r3, [sp, #12]
 8000d3a:	e7a9      	b.n	8000c90 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	e7a7      	b.n	8000c90 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000d40:	2002      	movs	r0, #2
 8000d42:	e7ab      	b.n	8000c9c <HAL_SPI_TransmitReceive+0x152>

08000d44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d44:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000d46:	4604      	mov	r4, r0
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d034      	beq.n	8000db6 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d50:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d54:	b90b      	cbnz	r3, 8000d5a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d56:	f001 fb95 	bl	8002484 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d5a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d5c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d62:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d64:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d6a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	69a2      	ldr	r2, [r4, #24]
 8000d70:	4303      	orrs	r3, r0
 8000d72:	68e0      	ldr	r0, [r4, #12]
 8000d74:	4303      	orrs	r3, r0
 8000d76:	6920      	ldr	r0, [r4, #16]
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	6960      	ldr	r0, [r4, #20]
 8000d7c:	4303      	orrs	r3, r0
 8000d7e:	69e0      	ldr	r0, [r4, #28]
 8000d80:	4303      	orrs	r3, r0
 8000d82:	6a20      	ldr	r0, [r4, #32]
 8000d84:	4303      	orrs	r3, r0
 8000d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000d8e:	4303      	orrs	r3, r0
 8000d90:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d92:	0c12      	lsrs	r2, r2, #16
 8000d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d96:	f002 0204 	and.w	r2, r2, #4
 8000d9a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d9e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000da0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000da2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000da4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000daa:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000dac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000db0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000db4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
}
 8000db8:	bd10      	pop	{r4, pc}

08000dba <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dba:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000dbc:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	f042 0201 	orr.w	r2, r2, #1
 8000dc4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f042 0201 	orr.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000dd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000dd4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	f04f 0302 	mov.w	r3, #2
 8000ddc:	d01c      	beq.n	8000e18 <HAL_TIM_ConfigClockSource+0x48>
 8000dde:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000de0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000de4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000de6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000dea:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dec:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000df0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000df4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000df6:	680a      	ldr	r2, [r1, #0]
 8000df8:	2a40      	cmp	r2, #64	; 0x40
 8000dfa:	d079      	beq.n	8000ef0 <HAL_TIM_ConfigClockSource+0x120>
 8000dfc:	d819      	bhi.n	8000e32 <HAL_TIM_ConfigClockSource+0x62>
 8000dfe:	2a10      	cmp	r2, #16
 8000e00:	f000 8093 	beq.w	8000f2a <HAL_TIM_ConfigClockSource+0x15a>
 8000e04:	d80a      	bhi.n	8000e1c <HAL_TIM_ConfigClockSource+0x4c>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f000 8089 	beq.w	8000f1e <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000e12:	2300      	movs	r3, #0
 8000e14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000e18:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e1a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e1c:	2a20      	cmp	r2, #32
 8000e1e:	f000 808a 	beq.w	8000f36 <HAL_TIM_ConfigClockSource+0x166>
 8000e22:	2a30      	cmp	r2, #48	; 0x30
 8000e24:	d1f2      	bne.n	8000e0c <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e26:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e2c:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000e30:	e036      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e32:	2a70      	cmp	r2, #112	; 0x70
 8000e34:	d036      	beq.n	8000ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8000e36:	d81b      	bhi.n	8000e70 <HAL_TIM_ConfigClockSource+0xa0>
 8000e38:	2a50      	cmp	r2, #80	; 0x50
 8000e3a:	d042      	beq.n	8000ec2 <HAL_TIM_ConfigClockSource+0xf2>
 8000e3c:	2a60      	cmp	r2, #96	; 0x60
 8000e3e:	d1e5      	bne.n	8000e0c <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e40:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e42:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e44:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e48:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e4a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e4c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e50:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e58:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e5c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e60:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000e62:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000e64:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e6a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000e6e:	e017      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000e70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000e74:	d011      	beq.n	8000e9a <HAL_TIM_ConfigClockSource+0xca>
 8000e76:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e7a:	d1c7      	bne.n	8000e0c <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e7c:	688a      	ldr	r2, [r1, #8]
 8000e7e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000e80:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e82:	68c9      	ldr	r1, [r1, #12]
 8000e84:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e86:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e8e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e90:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e98:	e002      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	e7b3      	b.n	8000e0c <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ea4:	688a      	ldr	r2, [r1, #8]
 8000ea6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ea8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000eaa:	68c9      	ldr	r1, [r1, #12]
 8000eac:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000eae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000eb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000eb6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000eb8:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000eba:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ebc:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ec0:	e7ee      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ec2:	684c      	ldr	r4, [r1, #4]
 8000ec4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ec6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ec8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000eca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ece:	f025 0501 	bic.w	r5, r5, #1
 8000ed2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ed4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000ed6:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ed8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000edc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ee2:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000ee4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000eea:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000eee:	e7d7      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ef0:	684c      	ldr	r4, [r1, #4]
 8000ef2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000ef4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ef6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ef8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000efc:	f025 0501 	bic.w	r5, r5, #1
 8000f00:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f02:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000f04:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f0a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f10:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f12:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f18:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000f1c:	e7c0      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f1e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f24:	f042 0207 	orr.w	r2, r2, #7
 8000f28:	e7ba      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f2a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f30:	f042 0217 	orr.w	r2, r2, #23
 8000f34:	e7b4      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000f36:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f3c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000f40:	e7ae      	b.n	8000ea0 <HAL_TIM_ConfigClockSource+0xd0>

08000f42 <HAL_TIM_OC_DelayElapsedCallback>:
 8000f42:	4770      	bx	lr

08000f44 <HAL_TIM_IC_CaptureCallback>:
 8000f44:	4770      	bx	lr

08000f46 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f46:	4770      	bx	lr

08000f48 <HAL_TIM_TriggerCallback>:
 8000f48:	4770      	bx	lr

08000f4a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f4a:	6803      	ldr	r3, [r0, #0]
{
 8000f4c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f4e:	691a      	ldr	r2, [r3, #16]
{
 8000f50:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f52:	0791      	lsls	r1, r2, #30
 8000f54:	d50e      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	0792      	lsls	r2, r2, #30
 8000f5a:	d50b      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f5c:	f06f 0202 	mvn.w	r2, #2
 8000f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f62:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f64:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f66:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f68:	079b      	lsls	r3, r3, #30
 8000f6a:	d077      	beq.n	800105c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f6c:	f7ff ffea 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f70:	2300      	movs	r3, #0
 8000f72:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	0750      	lsls	r0, r2, #29
 8000f7a:	d510      	bpl.n	8000f9e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	0751      	lsls	r1, r2, #29
 8000f80:	d50d      	bpl.n	8000f9e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f82:	f06f 0204 	mvn.w	r2, #4
 8000f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f88:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f8a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f8c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f8e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f92:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f94:	d068      	beq.n	8001068 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f96:	f7ff ffd5 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	0712      	lsls	r2, r2, #28
 8000fa4:	d50f      	bpl.n	8000fc6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	0710      	lsls	r0, r2, #28
 8000faa:	d50c      	bpl.n	8000fc6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000fac:	f06f 0208 	mvn.w	r2, #8
 8000fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fb4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fb8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000fba:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000fbc:	d05a      	beq.n	8001074 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fbe:	f7ff ffc1 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	06d2      	lsls	r2, r2, #27
 8000fcc:	d510      	bpl.n	8000ff0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	06d0      	lsls	r0, r2, #27
 8000fd2:	d50d      	bpl.n	8000ff0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fd4:	f06f 0210 	mvn.w	r2, #16
 8000fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fda:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fdc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fde:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fe0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000fe4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000fe6:	d04b      	beq.n	8001080 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fe8:	f7ff ffac 	bl	8000f44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fec:	2300      	movs	r3, #0
 8000fee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	07d1      	lsls	r1, r2, #31
 8000ff6:	d508      	bpl.n	800100a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	07d2      	lsls	r2, r2, #31
 8000ffc:	d505      	bpl.n	800100a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ffe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001002:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001004:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001006:	f001 f807 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	0610      	lsls	r0, r2, #24
 8001010:	d508      	bpl.n	8001024 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	0611      	lsls	r1, r2, #24
 8001016:	d505      	bpl.n	8001024 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001018:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800101c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800101e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001020:	f000 f8ab 	bl	800117a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	0652      	lsls	r2, r2, #25
 800102a:	d508      	bpl.n	800103e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	0650      	lsls	r0, r2, #25
 8001030:	d505      	bpl.n	800103e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001032:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001036:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001038:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800103a:	f7ff ff85 	bl	8000f48 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	691a      	ldr	r2, [r3, #16]
 8001042:	0691      	lsls	r1, r2, #26
 8001044:	d522      	bpl.n	800108c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	0692      	lsls	r2, r2, #26
 800104a:	d51f      	bpl.n	800108c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800104c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001050:	4620      	mov	r0, r4
}
 8001052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001056:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001058:	f000 b88e 	b.w	8001178 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800105c:	f7ff ff71 	bl	8000f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff ff70 	bl	8000f46 <HAL_TIM_PWM_PulseFinishedCallback>
 8001066:	e783      	b.n	8000f70 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001068:	f7ff ff6b 	bl	8000f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff ff6a 	bl	8000f46 <HAL_TIM_PWM_PulseFinishedCallback>
 8001072:	e792      	b.n	8000f9a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001074:	f7ff ff65 	bl	8000f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff ff64 	bl	8000f46 <HAL_TIM_PWM_PulseFinishedCallback>
 800107e:	e7a0      	b.n	8000fc2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001080:	f7ff ff5f 	bl	8000f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff ff5e 	bl	8000f46 <HAL_TIM_PWM_PulseFinishedCallback>
 800108a:	e7af      	b.n	8000fec <HAL_TIM_IRQHandler+0xa2>
 800108c:	bd10      	pop	{r4, pc}
	...

08001090 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001092:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001094:	4290      	cmp	r0, r2
 8001096:	d00a      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 8001098:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800109c:	d007      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 800109e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010a2:	4290      	cmp	r0, r2
 80010a4:	d003      	beq.n	80010ae <TIM_Base_SetConfig+0x1e>
 80010a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010aa:	4290      	cmp	r0, r2
 80010ac:	d115      	bne.n	80010da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80010ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80010b4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <TIM_Base_SetConfig+0x6c>)
 80010b8:	4290      	cmp	r0, r2
 80010ba:	d00a      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010c0:	d007      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80010c6:	4290      	cmp	r0, r2
 80010c8:	d003      	beq.n	80010d2 <TIM_Base_SetConfig+0x42>
 80010ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010ce:	4290      	cmp	r0, r2
 80010d0:	d103      	bne.n	80010da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80010d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80010d8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80010da:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80010dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80010e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80010e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010e4:	688b      	ldr	r3, [r1, #8]
 80010e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80010e8:	680b      	ldr	r3, [r1, #0]
 80010ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <TIM_Base_SetConfig+0x6c>)
 80010ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80010f0:	bf04      	itt	eq
 80010f2:	690b      	ldreq	r3, [r1, #16]
 80010f4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80010f6:	2301      	movs	r3, #1
 80010f8:	6143      	str	r3, [r0, #20]
 80010fa:	4770      	bx	lr
 80010fc:	40012c00 	.word	0x40012c00

08001100 <HAL_TIM_Base_Init>:
{
 8001100:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001102:	4604      	mov	r4, r0
 8001104:	b1a0      	cbz	r0, 8001130 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001106:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800110a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800110e:	b91b      	cbnz	r3, 8001118 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001110:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001114:	f001 f9e0 	bl	80024d8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001118:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800111a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800111c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001120:	1d21      	adds	r1, r4, #4
 8001122:	f7ff ffb5 	bl	8001090 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001126:	2301      	movs	r3, #1
  return HAL_OK;
 8001128:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800112a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800112e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
}
 8001132:	bd10      	pop	{r4, pc}

08001134 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001138:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800113a:	2b01      	cmp	r3, #1
 800113c:	f04f 0302 	mov.w	r3, #2
 8001140:	d018      	beq.n	8001174 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001142:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001146:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001148:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800114a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800114c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800114e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001152:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4322      	orrs	r2, r4
 8001158:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001160:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	430a      	orrs	r2, r1
 8001166:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001168:	2301      	movs	r3, #1
 800116a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800116e:	2300      	movs	r3, #0
 8001170:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001174:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001176:	bd10      	pop	{r4, pc}

08001178 <HAL_TIMEx_CommutationCallback>:
 8001178:	4770      	bx	lr

0800117a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800117a:	4770      	bx	lr

0800117c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800117c:	6803      	ldr	r3, [r0, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001184:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800118e:	2320      	movs	r3, #32
 8001190:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001194:	4770      	bx	lr
	...

08001198 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800119c:	6805      	ldr	r5, [r0, #0]
 800119e:	68c2      	ldr	r2, [r0, #12]
 80011a0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80011a2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a8:	4313      	orrs	r3, r2
 80011aa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80011ac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80011ae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80011b0:	430b      	orrs	r3, r1
 80011b2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80011b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80011b8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80011bc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80011be:	4313      	orrs	r3, r2
 80011c0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011c2:	696b      	ldr	r3, [r5, #20]
 80011c4:	6982      	ldr	r2, [r0, #24]
 80011c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ca:	4313      	orrs	r3, r2
 80011cc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <UART_SetConfig+0x138>)
{
 80011d0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80011d2:	429d      	cmp	r5, r3
 80011d4:	f04f 0419 	mov.w	r4, #25
 80011d8:	d146      	bne.n	8001268 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011da:	f7ff fc4f 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
 80011de:	fb04 f300 	mul.w	r3, r4, r0
 80011e2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80011e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011ea:	00b6      	lsls	r6, r6, #2
 80011ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80011f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80011f4:	011e      	lsls	r6, r3, #4
 80011f6:	f7ff fc41 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
 80011fa:	4360      	muls	r0, r4
 80011fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	fbb0 f7f3 	udiv	r7, r0, r3
 8001206:	f7ff fc39 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
 800120a:	4360      	muls	r0, r4
 800120c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	fbb3 f3f8 	udiv	r3, r3, r8
 800121a:	fb08 7313 	mls	r3, r8, r3, r7
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	3332      	adds	r3, #50	; 0x32
 8001222:	fbb3 f3f8 	udiv	r3, r3, r8
 8001226:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800122a:	f7ff fc27 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
 800122e:	4360      	muls	r0, r4
 8001230:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	fbb0 faf2 	udiv	sl, r0, r2
 800123a:	f7ff fc1f 	bl	8000a7c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800123e:	4360      	muls	r0, r4
 8001240:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	fbb0 f3f3 	udiv	r3, r0, r3
 800124a:	fbb3 f3f8 	udiv	r3, r3, r8
 800124e:	fb08 a313 	mls	r3, r8, r3, sl
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	3332      	adds	r3, #50	; 0x32
 8001256:	fbb3 f3f8 	udiv	r3, r3, r8
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	433b      	orrs	r3, r7
 8001260:	4433      	add	r3, r6
 8001262:	60ab      	str	r3, [r5, #8]
 8001264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001268:	f7ff fbf8 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 800126c:	fb04 f300 	mul.w	r3, r4, r0
 8001270:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001274:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001278:	00b6      	lsls	r6, r6, #2
 800127a:	fbb3 f3f6 	udiv	r3, r3, r6
 800127e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001282:	011e      	lsls	r6, r3, #4
 8001284:	f7ff fbea 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 8001288:	4360      	muls	r0, r4
 800128a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fbb0 f7f3 	udiv	r7, r0, r3
 8001294:	f7ff fbe2 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 8001298:	4360      	muls	r0, r4
 800129a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80012a8:	fb08 7313 	mls	r3, r8, r3, r7
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	3332      	adds	r3, #50	; 0x32
 80012b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80012b4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80012b8:	f7ff fbd0 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80012bc:	4360      	muls	r0, r4
 80012be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	fbb0 faf2 	udiv	sl, r0, r2
 80012c8:	f7ff fbc8 	bl	8000a5c <HAL_RCC_GetPCLK1Freq>
 80012cc:	e7b7      	b.n	800123e <UART_SetConfig+0xa6>
 80012ce:	bf00      	nop
 80012d0:	40013800 	.word	0x40013800

080012d4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	4604      	mov	r4, r0
 80012d8:	460e      	mov	r6, r1
 80012da:	4617      	mov	r7, r2
 80012dc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80012de:	6821      	ldr	r1, [r4, #0]
 80012e0:	680b      	ldr	r3, [r1, #0]
 80012e2:	ea36 0303 	bics.w	r3, r6, r3
 80012e6:	d101      	bne.n	80012ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
}
 80012ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012ec:	1c6b      	adds	r3, r5, #1
 80012ee:	d0f7      	beq.n	80012e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012f0:	b995      	cbnz	r5, 8001318 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012f2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80012f4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001306:	2320      	movs	r3, #32
 8001308:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800130c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001310:	2300      	movs	r3, #0
 8001312:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001318:	f7fe ff62 	bl	80001e0 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	4285      	cmp	r5, r0
 8001320:	d2dd      	bcs.n	80012de <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001322:	e7e6      	b.n	80012f2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001324 <HAL_UART_Init>:
{
 8001324:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001326:	4604      	mov	r4, r0
 8001328:	b340      	cbz	r0, 800137c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800132a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800132e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001332:	b91b      	cbnz	r3, 800133c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001334:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001338:	f001 f8ea 	bl	8002510 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800133c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800133e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001340:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001344:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001346:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800134c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800134e:	f7ff ff23 	bl	8001198 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001352:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001354:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800135c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001364:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800136c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800136e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001370:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001372:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001376:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800137a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
}
 800137e:	bd10      	pop	{r4, pc}

08001380 <HAL_UART_Transmit>:
{
 8001380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001384:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001386:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800138a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 800138c:	2b20      	cmp	r3, #32
{
 800138e:	460d      	mov	r5, r1
 8001390:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001392:	d14e      	bne.n	8001432 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001394:	2900      	cmp	r1, #0
 8001396:	d049      	beq.n	800142c <HAL_UART_Transmit+0xac>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d047      	beq.n	800142c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800139c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d046      	beq.n	8001432 <HAL_UART_Transmit+0xb2>
 80013a4:	2301      	movs	r3, #1
 80013a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013ae:	2321      	movs	r3, #33	; 0x21
 80013b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013b4:	f7fe ff14 	bl	80001e0 <HAL_GetTick>
 80013b8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80013ba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80013be:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80013c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b96b      	cbnz	r3, 80013e4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4632      	mov	r2, r6
 80013cc:	2140      	movs	r1, #64	; 0x40
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff ff80 	bl	80012d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013d4:	b9a8      	cbnz	r0, 8001402 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80013d6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80013d8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80013dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ee:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013f0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013f6:	4620      	mov	r0, r4
 80013f8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013fa:	d10e      	bne.n	800141a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013fc:	f7ff ff6a 	bl	80012d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001400:	b110      	cbz	r0, 8001408 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001408:	882b      	ldrh	r3, [r5, #0]
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001410:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001412:	6923      	ldr	r3, [r4, #16]
 8001414:	b943      	cbnz	r3, 8001428 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001416:	3502      	adds	r5, #2
 8001418:	e7d3      	b.n	80013c2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800141a:	f7ff ff5b 	bl	80012d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800141e:	2800      	cmp	r0, #0
 8001420:	d1ef      	bne.n	8001402 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	782a      	ldrb	r2, [r5, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	3501      	adds	r5, #1
 800142a:	e7ca      	b.n	80013c2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800142c:	2001      	movs	r0, #1
 800142e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001432:	2002      	movs	r0, #2
}
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001438 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001438:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800143c:	2b20      	cmp	r3, #32
 800143e:	d120      	bne.n	8001482 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8001440:	b1e9      	cbz	r1, 800147e <HAL_UART_Receive_IT+0x46>
 8001442:	b1e2      	cbz	r2, 800147e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001444:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001448:	2b01      	cmp	r3, #1
 800144a:	d01a      	beq.n	8001482 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800144c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800144e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001450:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001452:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001454:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001456:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800145a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800145c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800145e:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001460:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001464:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001468:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800146a:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 800146c:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800146e:	f041 0101 	orr.w	r1, r1, #1
 8001472:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001474:	68d1      	ldr	r1, [r2, #12]
 8001476:	f041 0120 	orr.w	r1, r1, #32
 800147a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800147c:	4770      	bx	lr
      return HAL_ERROR;
 800147e:	2001      	movs	r0, #1
 8001480:	4770      	bx	lr
    return HAL_BUSY;
 8001482:	2002      	movs	r0, #2
}
 8001484:	4770      	bx	lr

08001486 <HAL_UART_TxCpltCallback>:
 8001486:	4770      	bx	lr

08001488 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001488:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800148c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800148e:	2b22      	cmp	r3, #34	; 0x22
 8001490:	d136      	bne.n	8001500 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001492:	6883      	ldr	r3, [r0, #8]
 8001494:	6901      	ldr	r1, [r0, #16]
 8001496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800149a:	6802      	ldr	r2, [r0, #0]
 800149c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800149e:	d123      	bne.n	80014e8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014a0:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014a2:	b9e9      	cbnz	r1, 80014e0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014a8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80014ac:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80014ae:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80014b0:	3c01      	subs	r4, #1
 80014b2:	b2a4      	uxth	r4, r4
 80014b4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80014b6:	b98c      	cbnz	r4, 80014dc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014b8:	6803      	ldr	r3, [r0, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	f022 0220 	bic.w	r2, r2, #32
 80014c0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c8:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80014d2:	2320      	movs	r3, #32
 80014d4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80014d8:	f000 fd96 	bl	8002008 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80014dc:	2000      	movs	r0, #0
}
 80014de:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f823 2b01 	strh.w	r2, [r3], #1
 80014e6:	e7e1      	b.n	80014ac <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014e8:	b921      	cbnz	r1, 80014f4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	6852      	ldr	r2, [r2, #4]
 80014ee:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e7dc      	b.n	80014ae <UART_Receive_IT+0x26>
 80014f4:	6852      	ldr	r2, [r2, #4]
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	6281      	str	r1, [r0, #40]	; 0x28
 80014fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014fe:	e7f7      	b.n	80014f0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001500:	2002      	movs	r0, #2
 8001502:	bd10      	pop	{r4, pc}

08001504 <HAL_UART_ErrorCallback>:
 8001504:	4770      	bx	lr
	...

08001508 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001508:	6803      	ldr	r3, [r0, #0]
{
 800150a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800150c:	681a      	ldr	r2, [r3, #0]
{
 800150e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8001510:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001512:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001514:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001516:	d107      	bne.n	8001528 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001518:	0696      	lsls	r6, r2, #26
 800151a:	d55a      	bpl.n	80015d2 <HAL_UART_IRQHandler+0xca>
 800151c:	068d      	lsls	r5, r1, #26
 800151e:	d558      	bpl.n	80015d2 <HAL_UART_IRQHandler+0xca>
}
 8001520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001524:	f7ff bfb0 	b.w	8001488 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001528:	f015 0501 	ands.w	r5, r5, #1
 800152c:	d102      	bne.n	8001534 <HAL_UART_IRQHandler+0x2c>
 800152e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001532:	d04e      	beq.n	80015d2 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001534:	07d3      	lsls	r3, r2, #31
 8001536:	d505      	bpl.n	8001544 <HAL_UART_IRQHandler+0x3c>
 8001538:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800153a:	bf42      	ittt	mi
 800153c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800153e:	f043 0301 	orrmi.w	r3, r3, #1
 8001542:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001544:	0750      	lsls	r0, r2, #29
 8001546:	d504      	bpl.n	8001552 <HAL_UART_IRQHandler+0x4a>
 8001548:	b11d      	cbz	r5, 8001552 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800154a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001552:	0793      	lsls	r3, r2, #30
 8001554:	d504      	bpl.n	8001560 <HAL_UART_IRQHandler+0x58>
 8001556:	b11d      	cbz	r5, 8001560 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001560:	0716      	lsls	r6, r2, #28
 8001562:	d504      	bpl.n	800156e <HAL_UART_IRQHandler+0x66>
 8001564:	b11d      	cbz	r5, 800156e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001566:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800156e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d066      	beq.n	8001642 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001574:	0695      	lsls	r5, r2, #26
 8001576:	d504      	bpl.n	8001582 <HAL_UART_IRQHandler+0x7a>
 8001578:	0688      	lsls	r0, r1, #26
 800157a:	d502      	bpl.n	8001582 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800157c:	4620      	mov	r0, r4
 800157e:	f7ff ff83 	bl	8001488 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001582:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001584:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001586:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001588:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800158a:	0711      	lsls	r1, r2, #28
 800158c:	d402      	bmi.n	8001594 <HAL_UART_IRQHandler+0x8c>
 800158e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001592:	d01a      	beq.n	80015ca <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001594:	f7ff fdf2 	bl	800117c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	0652      	lsls	r2, r2, #25
 800159e:	d510      	bpl.n	80015c2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015a0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80015a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015a8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80015aa:	b150      	cbz	r0, 80015c2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_UART_IRQHandler+0x13c>)
 80015ae:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80015b0:	f7fe fea8 	bl	8000304 <HAL_DMA_Abort_IT>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d044      	beq.n	8001642 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80015ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015c0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff ff9e 	bl	8001504 <HAL_UART_ErrorCallback>
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80015ca:	f7ff ff9b 	bl	8001504 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ce:	63e5      	str	r5, [r4, #60]	; 0x3c
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015d2:	0616      	lsls	r6, r2, #24
 80015d4:	d527      	bpl.n	8001626 <HAL_UART_IRQHandler+0x11e>
 80015d6:	060d      	lsls	r5, r1, #24
 80015d8:	d525      	bpl.n	8001626 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80015da:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80015de:	2a21      	cmp	r2, #33	; 0x21
 80015e0:	d12f      	bne.n	8001642 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015e2:	68a2      	ldr	r2, [r4, #8]
 80015e4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015e8:	6a22      	ldr	r2, [r4, #32]
 80015ea:	d117      	bne.n	800161c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015ec:	8811      	ldrh	r1, [r2, #0]
 80015ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80015f2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015f4:	6921      	ldr	r1, [r4, #16]
 80015f6:	b979      	cbnz	r1, 8001618 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80015f8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80015fa:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80015fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015fe:	3a01      	subs	r2, #1
 8001600:	b292      	uxth	r2, r2
 8001602:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001604:	b9ea      	cbnz	r2, 8001642 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001618:	3201      	adds	r2, #1
 800161a:	e7ee      	b.n	80015fa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800161c:	1c51      	adds	r1, r2, #1
 800161e:	6221      	str	r1, [r4, #32]
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	e7ea      	b.n	80015fc <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001626:	0650      	lsls	r0, r2, #25
 8001628:	d50b      	bpl.n	8001642 <HAL_UART_IRQHandler+0x13a>
 800162a:	064a      	lsls	r2, r1, #25
 800162c:	d509      	bpl.n	8001642 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800162e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001630:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001636:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001638:	2320      	movs	r3, #32
 800163a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800163e:	f7ff ff22 	bl	8001486 <HAL_UART_TxCpltCallback>
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	08001649 	.word	0x08001649

08001648 <UART_DMAAbortOnError>:
{
 8001648:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800164a:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800164e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001650:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001652:	f7ff ff57 	bl	8001504 <HAL_UART_ErrorCallback>
 8001656:	bd08      	pop	{r3, pc}

08001658 <arp_read>:
//--------------------------------------------------
uint8_t arp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
  uint8_t res=0;
  arp_msg_ptr *msg=(void*)(frame->data);
  if (len>=sizeof(arp_msg_ptr))
 8001658:	291b      	cmp	r1, #27
{
 800165a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800165c:	4604      	mov	r4, r0
  if (len>=sizeof(arp_msg_ptr))
 800165e:	d979      	bls.n	8001754 <arp_read+0xfc>
  {
    if ((msg->net_tp==ARP_ETH)&&(msg->proto_tp==ARP_IP))
 8001660:	89c3      	ldrh	r3, [r0, #14]
 8001662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001666:	d175      	bne.n	8001754 <arp_read+0xfc>
 8001668:	8a03      	ldrh	r3, [r0, #16]
 800166a:	2b08      	cmp	r3, #8
 800166c:	d172      	bne.n	8001754 <arp_read+0xfc>
    {
	   if (!memcmp(msg->ipaddr_dst,ipaddr,4)) // loc thong diep cac arp gui den dia chi ethernet shield enc28j60
 800166e:	2204      	movs	r2, #4
 8001670:	493a      	ldr	r1, [pc, #232]	; (800175c <arp_read+0x104>)
 8001672:	3026      	adds	r0, #38	; 0x26
 8001674:	f001 f8bc 	bl	80027f0 <memcmp>
 8001678:	2800      	cmp	r0, #0
 800167a:	d16b      	bne.n	8001754 <arp_read+0xfc>
	   {
	      if (msg->op==ARP_REQUEST) // noi dung thong diep arp la request
 800167c:	8aa3      	ldrh	r3, [r4, #20]
 800167e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001682:	d069      	beq.n	8001758 <arp_read+0x100>
//            sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
//              msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
//              HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
            res=1; // Detect arp message request
         }
	      else if(msg->op==ARP_REPLY) // noi dung thong diep arp la reply
 8001684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001688:	d162      	bne.n	8001750 <arp_read+0xf8>
	      {
	        sprintf(str1,"\r\nreply\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],
 800168a:	7ee1      	ldrb	r1, [r4, #27]
 800168c:	7de3      	ldrb	r3, [r4, #23]
 800168e:	9103      	str	r1, [sp, #12]
 8001690:	7ea1      	ldrb	r1, [r4, #26]
 8001692:	7da2      	ldrb	r2, [r4, #22]
 8001694:	9102      	str	r1, [sp, #8]
 8001696:	7e61      	ldrb	r1, [r4, #25]
 8001698:	4831      	ldr	r0, [pc, #196]	; (8001760 <arp_read+0x108>)
 800169a:	9101      	str	r1, [sp, #4]
 800169c:	7e21      	ldrb	r1, [r4, #24]
 800169e:	9100      	str	r1, [sp, #0]
 80016a0:	4930      	ldr	r1, [pc, #192]	; (8001764 <arp_read+0x10c>)
 80016a2:	f001 f8bd 	bl	8002820 <siprintf>
	          msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80016a6:	482e      	ldr	r0, [pc, #184]	; (8001760 <arp_read+0x108>)
 80016a8:	f7fe fd50 	bl	800014c <strlen>
 80016ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b0:	b282      	uxth	r2, r0
 80016b2:	492b      	ldr	r1, [pc, #172]	; (8001760 <arp_read+0x108>)
 80016b4:	482c      	ldr	r0, [pc, #176]	; (8001768 <arp_read+0x110>)
 80016b6:	f7ff fe63 	bl	8001380 <HAL_UART_Transmit>
	        sprintf(str1,"ip_src %d.%d.%d.%d\r\n",msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
 80016ba:	7fe1      	ldrb	r1, [r4, #31]
 80016bc:	7f63      	ldrb	r3, [r4, #29]
 80016be:	9101      	str	r1, [sp, #4]
 80016c0:	7fa1      	ldrb	r1, [r4, #30]
 80016c2:	7f22      	ldrb	r2, [r4, #28]
 80016c4:	9100      	str	r1, [sp, #0]
 80016c6:	4826      	ldr	r0, [pc, #152]	; (8001760 <arp_read+0x108>)
 80016c8:	4928      	ldr	r1, [pc, #160]	; (800176c <arp_read+0x114>)
 80016ca:	f001 f8a9 	bl	8002820 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <arp_read+0x108>)
 80016d0:	f7fe fd3c 	bl	800014c <strlen>
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	b282      	uxth	r2, r0
 80016da:	4921      	ldr	r1, [pc, #132]	; (8001760 <arp_read+0x108>)
 80016dc:	4822      	ldr	r0, [pc, #136]	; (8001768 <arp_read+0x110>)
 80016de:	f7ff fe4f 	bl	8001380 <HAL_UART_Transmit>
	        sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],
 80016e2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80016e6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80016ea:	9103      	str	r1, [sp, #12]
 80016ec:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80016f0:	f894 2020 	ldrb.w	r2, [r4, #32]
 80016f4:	9102      	str	r1, [sp, #8]
 80016f6:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <arp_read+0x108>)
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 8001702:	9100      	str	r1, [sp, #0]
 8001704:	491a      	ldr	r1, [pc, #104]	; (8001770 <arp_read+0x118>)
 8001706:	f001 f88b 	bl	8002820 <siprintf>
	          msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <arp_read+0x108>)
 800170c:	f7fe fd1e 	bl	800014c <strlen>
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	b282      	uxth	r2, r0
 8001716:	4912      	ldr	r1, [pc, #72]	; (8001760 <arp_read+0x108>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <arp_read+0x110>)
 800171a:	f7ff fe31 	bl	8001380 <HAL_UART_Transmit>
	        sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
 800171e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8001722:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800172c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8001730:	9100      	str	r1, [sp, #0]
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <arp_read+0x108>)
 8001734:	490f      	ldr	r1, [pc, #60]	; (8001774 <arp_read+0x11c>)
 8001736:	f001 f873 	bl	8002820 <siprintf>
	        HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <arp_read+0x108>)
 800173c:	f7fe fd06 	bl	800014c <strlen>
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	b282      	uxth	r2, r0
 8001746:	4906      	ldr	r1, [pc, #24]	; (8001760 <arp_read+0x108>)
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <arp_read+0x110>)
 800174a:	f7ff fe19 	bl	8001380 <HAL_UART_Transmit>
	        res=2;
 800174e:	2002      	movs	r0, #2
	      }
	   }
    }
  }
	return res;
}
 8001750:	b004      	add	sp, #16
 8001752:	bd10      	pop	{r4, pc}
  uint8_t res=0;
 8001754:	2000      	movs	r0, #0
 8001756:	e7fb      	b.n	8001750 <arp_read+0xf8>
            res=1; // Detect arp message request
 8001758:	2001      	movs	r0, #1
 800175a:	e7f9      	b.n	8001750 <arp_read+0xf8>
 800175c:	20000014 	.word	0x20000014
 8001760:	20000218 	.word	0x20000218
 8001764:	08003280 	.word	0x08003280
 8001768:	200002b4 	.word	0x200002b4
 800176c:	080032b1 	.word	0x080032b1
 8001770:	080032c6 	.word	0x080032c6
 8001774:	080032ee 	.word	0x080032ee

08001778 <arp_send>:
//--------------------------------------------------
void arp_send(enc28j60_frame_ptr *frame)
{
  arp_msg_ptr *msg = (void*)frame->data;
  msg->op = ARP_REPLY;
 8001778:	f44f 7300 	mov.w	r3, #512	; 0x200
{
 800177c:	b570      	push	{r4, r5, r6, lr}
  msg->op = ARP_REPLY;
 800177e:	8283      	strh	r3, [r0, #20]
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 8001780:	4603      	mov	r3, r0
{
 8001782:	4604      	mov	r4, r0
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 8001784:	f853 2f16 	ldr.w	r2, [r3, #22]!
{
 8001788:	b088      	sub	sp, #32
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 800178a:	6202      	str	r2, [r0, #32]
 800178c:	889a      	ldrh	r2, [r3, #4]
  memcpy(msg->macaddr_src,macaddr,6);
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
  memcpy(msg->ipaddr_src,ipaddr,4);
  eth_send(frame,sizeof(arp_msg_ptr));
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 800178e:	4d2c      	ldr	r5, [pc, #176]	; (8001840 <arp_send+0xc8>)
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 8001790:	8482      	strh	r2, [r0, #36]	; 0x24
  memcpy(msg->macaddr_src,macaddr,6);
 8001792:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <arp_send+0xcc>)
    msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001794:	4e2c      	ldr	r6, [pc, #176]	; (8001848 <arp_send+0xd0>)
  memcpy(msg->macaddr_src,macaddr,6);
 8001796:	6811      	ldr	r1, [r2, #0]
 8001798:	8892      	ldrh	r2, [r2, #4]
 800179a:	f8c0 1016 	str.w	r1, [r0, #22]
 800179e:	809a      	strh	r2, [r3, #4]
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 80017a0:	69c3      	ldr	r3, [r0, #28]
  eth_send(frame,sizeof(arp_msg_ptr));
 80017a2:	211c      	movs	r1, #28
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 80017a4:	f8c0 3026 	str.w	r3, [r0, #38]	; 0x26
  memcpy(msg->ipaddr_src,ipaddr,4);
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <arp_send+0xd4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61c3      	str	r3, [r0, #28]
  eth_send(frame,sizeof(arp_msg_ptr));
 80017ae:	f000 fc95 	bl	80020dc <eth_send>
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d)-",frame->addr_dest[0],frame->addr_dest[1],frame->addr_dest[2],frame->addr_dest[3],frame->addr_dest[4],frame->addr_dest[5],
 80017b2:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 80017b6:	7863      	ldrb	r3, [r4, #1]
 80017b8:	9107      	str	r1, [sp, #28]
 80017ba:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80017be:	7822      	ldrb	r2, [r4, #0]
 80017c0:	9106      	str	r1, [sp, #24]
 80017c2:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 80017c6:	4628      	mov	r0, r5
 80017c8:	9105      	str	r1, [sp, #20]
 80017ca:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
 80017ce:	9104      	str	r1, [sp, #16]
 80017d0:	7961      	ldrb	r1, [r4, #5]
 80017d2:	9103      	str	r1, [sp, #12]
 80017d4:	7921      	ldrb	r1, [r4, #4]
 80017d6:	9102      	str	r1, [sp, #8]
 80017d8:	78e1      	ldrb	r1, [r4, #3]
 80017da:	9101      	str	r1, [sp, #4]
 80017dc:	78a1      	ldrb	r1, [r4, #2]
 80017de:	9100      	str	r1, [sp, #0]
 80017e0:	491b      	ldr	r1, [pc, #108]	; (8001850 <arp_send+0xd8>)
 80017e2:	f001 f81d 	bl	8002820 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80017e6:	4628      	mov	r0, r5
 80017e8:	f7fe fcb0 	bl	800014c <strlen>
 80017ec:	4629      	mov	r1, r5
 80017ee:	b282      	uxth	r2, r0
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	4630      	mov	r0, r6
 80017f6:	f7ff fdc3 	bl	8001380 <HAL_UART_Transmit>
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X(%d.%d.%d.%d) arp request\r\n",frame->addr_src[0],frame->addr_src[1],frame->addr_src[2],frame->addr_src[3],frame->addr_src[4],frame->addr_src[5],
 80017fa:	7fe1      	ldrb	r1, [r4, #31]
 80017fc:	79e3      	ldrb	r3, [r4, #7]
 80017fe:	9107      	str	r1, [sp, #28]
 8001800:	7fa1      	ldrb	r1, [r4, #30]
 8001802:	79a2      	ldrb	r2, [r4, #6]
 8001804:	9106      	str	r1, [sp, #24]
 8001806:	7f61      	ldrb	r1, [r4, #29]
 8001808:	4628      	mov	r0, r5
 800180a:	9105      	str	r1, [sp, #20]
 800180c:	7f21      	ldrb	r1, [r4, #28]
 800180e:	9104      	str	r1, [sp, #16]
 8001810:	7ae1      	ldrb	r1, [r4, #11]
 8001812:	9103      	str	r1, [sp, #12]
 8001814:	7aa1      	ldrb	r1, [r4, #10]
 8001816:	9102      	str	r1, [sp, #8]
 8001818:	7a61      	ldrb	r1, [r4, #9]
 800181a:	9101      	str	r1, [sp, #4]
 800181c:	7a21      	ldrb	r1, [r4, #8]
 800181e:	9100      	str	r1, [sp, #0]
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <arp_send+0xdc>)
 8001822:	f000 fffd 	bl	8002820 <siprintf>
    msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001826:	4628      	mov	r0, r5
 8001828:	f7fe fc90 	bl	800014c <strlen>
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	b282      	uxth	r2, r0
 8001832:	4629      	mov	r1, r5
 8001834:	4630      	mov	r0, r6
}
 8001836:	b008      	add	sp, #32
 8001838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800183c:	f7ff bda0 	b.w	8001380 <HAL_UART_Transmit>
 8001840:	20000218 	.word	0x20000218
 8001844:	2000000e 	.word	0x2000000e
 8001848:	200002b4 	.word	0x200002b4
 800184c:	20000014 	.word	0x20000014
 8001850:	08003336 	.word	0x08003336
 8001854:	08003362 	.word	0x08003362

08001858 <arp_request>:
//--------------------------------------------------
uint8_t arp_request(uint8_t *ip_addr)
{
 8001858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800185c:	4605      	mov	r5, r0
 800185e:	2400      	movs	r4, #0
  uint8_t i;
  // Kiem tra xem dia chi da ton tai trong bang ARP hay chua va da qua thoi gian
  for(i=0;i<5;i++)
  {
	  if ((clock_cnt-arp_rec[i].sec)>43200)
 8001860:	f64a 09c0 	movw	r9, #43200	; 0xa8c0
 8001864:	4e40      	ldr	r6, [pc, #256]	; (8001968 <arp_request+0x110>)
 8001866:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8001988 <arp_request+0x130>
{
 800186a:	b08b      	sub	sp, #44	; 0x2c
 800186c:	19a7      	adds	r7, r4, r6
	  if ((clock_cnt-arp_rec[i].sec)>43200)
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	f8d8 3000 	ldr.w	r3, [r8]
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	454b      	cmp	r3, r9
 8001878:	d905      	bls.n	8001886 <arp_request+0x2e>
	  {
	     memset(arp_rec+(sizeof(arp_record_ptr)*i),0,sizeof(arp_record_ptr));// xoa het dua ve null
 800187a:	2210      	movs	r2, #16
 800187c:	2100      	movs	r1, #0
 800187e:	eb06 1004 	add.w	r0, r6, r4, lsl #4
 8001882:	f000 ffc4 	bl	800280e <memset>
	  }
	  if (!memcmp(arp_rec[i].ipaddr,ip_addr,4))
 8001886:	2204      	movs	r2, #4
 8001888:	4629      	mov	r1, r5
 800188a:	4638      	mov	r0, r7
 800188c:	f000 ffb0 	bl	80027f0 <memcmp>
 8001890:	2800      	cmp	r0, #0
 8001892:	d135      	bne.n	8001900 <arp_request+0xa8>
 8001894:	4c34      	ldr	r4, [pc, #208]	; (8001968 <arp_request+0x110>)
	  {
		  for(i=0;i<5;i++)
		  {
		  sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 8001896:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800198c <arp_request+0x134>
 800189a:	4d34      	ldr	r5, [pc, #208]	; (800196c <arp_request+0x114>)
		    arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],(unsigned long)arp_rec[i].sec);
		  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800189c:	4f34      	ldr	r7, [pc, #208]	; (8001970 <arp_request+0x118>)
 800189e:	f104 0650 	add.w	r6, r4, #80	; 0x50
		  sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],
 80018a2:	68e1      	ldr	r1, [r4, #12]
 80018a4:	7863      	ldrb	r3, [r4, #1]
 80018a6:	7822      	ldrb	r2, [r4, #0]
 80018a8:	9108      	str	r1, [sp, #32]
 80018aa:	7a61      	ldrb	r1, [r4, #9]
 80018ac:	4628      	mov	r0, r5
 80018ae:	9107      	str	r1, [sp, #28]
 80018b0:	7a21      	ldrb	r1, [r4, #8]
 80018b2:	3410      	adds	r4, #16
 80018b4:	9106      	str	r1, [sp, #24]
 80018b6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
 80018ba:	9105      	str	r1, [sp, #20]
 80018bc:	f814 1c0a 	ldrb.w	r1, [r4, #-10]
 80018c0:	9104      	str	r1, [sp, #16]
 80018c2:	f814 1c0b 	ldrb.w	r1, [r4, #-11]
 80018c6:	9103      	str	r1, [sp, #12]
 80018c8:	f814 1c0c 	ldrb.w	r1, [r4, #-12]
 80018cc:	9102      	str	r1, [sp, #8]
 80018ce:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
 80018d2:	9101      	str	r1, [sp, #4]
 80018d4:	f814 1c0e 	ldrb.w	r1, [r4, #-14]
 80018d8:	9100      	str	r1, [sp, #0]
 80018da:	4641      	mov	r1, r8
 80018dc:	f000 ffa0 	bl	8002820 <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80018e0:	4628      	mov	r0, r5
 80018e2:	f7fe fc33 	bl	800014c <strlen>
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	b282      	uxth	r2, r0
 80018ec:	4629      	mov	r1, r5
 80018ee:	4638      	mov	r0, r7
 80018f0:	f7ff fd46 	bl	8001380 <HAL_UART_Transmit>
		  for(i=0;i<5;i++)
 80018f4:	42a6      	cmp	r6, r4
 80018f6:	d1d4      	bne.n	80018a2 <arp_request+0x4a>
		  }
	    return 0;
 80018f8:	2000      	movs	r0, #0
  memcpy(frame->addr_dest,macbroadcast,6);
  memcpy(frame->addr_src,macaddr,6);
  frame->type = ETH_ARP;
  enc28j60_packetSend((void*)frame,sizeof(arp_msg_ptr) + sizeof(enc28j60_frame_ptr));
  return 1;
}
 80018fa:	b00b      	add	sp, #44	; 0x2c
 80018fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001900:	3410      	adds	r4, #16
  for(i=0;i<5;i++)
 8001902:	2c50      	cmp	r4, #80	; 0x50
 8001904:	d1b2      	bne.n	800186c <arp_request+0x14>
  msg->net_tp = ARP_ETH;
 8001906:	2300      	movs	r3, #0
  msg->ipaddr_len = 4;
 8001908:	2604      	movs	r6, #4
  msg->net_tp = ARP_ETH;
 800190a:	2401      	movs	r4, #1
  msg->proto_tp = ARP_IP;
 800190c:	2108      	movs	r1, #8
  msg->macaddr_len = 6;
 800190e:	2206      	movs	r2, #6
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001910:	4f18      	ldr	r7, [pc, #96]	; (8001974 <arp_request+0x11c>)
  msg->net_tp = ARP_ETH;
 8001912:	4819      	ldr	r0, [pc, #100]	; (8001978 <arp_request+0x120>)
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001914:	683f      	ldr	r7, [r7, #0]
  msg->net_tp = ARP_ETH;
 8001916:	7383      	strb	r3, [r0, #14]
  msg->proto_tp = ARP_IP;
 8001918:	7443      	strb	r3, [r0, #17]
  msg->op = ARP_REQUEST;
 800191a:	7503      	strb	r3, [r0, #20]
  memcpy(msg->ipaddr_src,ipaddr,4);
 800191c:	61c7      	str	r7, [r0, #28]
  memcpy(msg->macaddr_src,macaddr,6);
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <arp_request+0x124>)
  memcpy(msg->macaddr_dst,macnull,6);
 8001920:	4f17      	ldr	r7, [pc, #92]	; (8001980 <arp_request+0x128>)
  msg->ipaddr_len = 4;
 8001922:	74c6      	strb	r6, [r0, #19]
  memcpy(msg->macaddr_dst,macnull,6);
 8001924:	f8d7 e000 	ldr.w	lr, [r7]
  memcpy(msg->macaddr_src,macaddr,6);
 8001928:	681e      	ldr	r6, [r3, #0]
  memcpy(msg->macaddr_dst,macnull,6);
 800192a:	88bf      	ldrh	r7, [r7, #4]
  memcpy(msg->macaddr_src,macaddr,6);
 800192c:	889b      	ldrh	r3, [r3, #4]
  msg->proto_tp = ARP_IP;
 800192e:	7401      	strb	r1, [r0, #16]
  memcpy(msg->macaddr_dst,macnull,6);
 8001930:	8487      	strh	r7, [r0, #36]	; 0x24
  msg->net_tp = ARP_ETH;
 8001932:	73c4      	strb	r4, [r0, #15]
  msg->macaddr_len = 6;
 8001934:	7482      	strb	r2, [r0, #18]
  msg->op = ARP_REQUEST;
 8001936:	7544      	strb	r4, [r0, #21]
  memcpy(msg->macaddr_src,macaddr,6);
 8001938:	f8c0 6016 	str.w	r6, [r0, #22]
 800193c:	8343      	strh	r3, [r0, #26]
  memcpy(msg->macaddr_dst,macnull,6);
 800193e:	f8c0 e020 	str.w	lr, [r0, #32]
  memcpy(msg->ipaddr_dst,ip_addr,4);
 8001942:	682d      	ldr	r5, [r5, #0]
  frame->type = ETH_ARP;
 8001944:	7301      	strb	r1, [r0, #12]
  memcpy(msg->ipaddr_dst,ip_addr,4);
 8001946:	f8c0 5026 	str.w	r5, [r0, #38]	; 0x26
  memcpy(frame->addr_dest,macbroadcast,6);
 800194a:	4d0e      	ldr	r5, [pc, #56]	; (8001984 <arp_request+0x12c>)
  memcpy(frame->addr_src,macaddr,6);
 800194c:	f8c0 6006 	str.w	r6, [r0, #6]
  memcpy(frame->addr_dest,macbroadcast,6);
 8001950:	682f      	ldr	r7, [r5, #0]
 8001952:	88ad      	ldrh	r5, [r5, #4]
 8001954:	6007      	str	r7, [r0, #0]
 8001956:	8085      	strh	r5, [r0, #4]
  memcpy(frame->addr_src,macaddr,6);
 8001958:	8143      	strh	r3, [r0, #10]
  frame->type = ETH_ARP;
 800195a:	7342      	strb	r2, [r0, #13]
  enc28j60_packetSend((void*)frame,sizeof(arp_msg_ptr) + sizeof(enc28j60_frame_ptr));
 800195c:	212a      	movs	r1, #42	; 0x2a
 800195e:	f000 fa2b 	bl	8001db8 <enc28j60_packetSend>
  return 1;
 8001962:	4620      	mov	r0, r4
 8001964:	e7c9      	b.n	80018fa <arp_request+0xa2>
 8001966:	bf00      	nop
 8001968:	20000264 	.word	0x20000264
 800196c:	20000218 	.word	0x20000218
 8001970:	200002b4 	.word	0x200002b4
 8001974:	20000014 	.word	0x20000014
 8001978:	200003b6 	.word	0x200003b6
 800197c:	2000000e 	.word	0x2000000e
 8001980:	20000209 	.word	0x20000209
 8001984:	20000008 	.word	0x20000008
 8001988:	20000214 	.word	0x20000214
 800198c:	08003303 	.word	0x08003303

08001990 <arp_table_fill>:
//--------------------------------------------------
void arp_table_fill(enc28j60_frame_ptr *frame)
{
 8001990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;
  arp_msg_ptr *msg = (void*)frame->data;
  memcpy(arp_rec[current_arp_index].ipaddr,msg->ipaddr_src,4);
 8001994:	4d26      	ldr	r5, [pc, #152]	; (8001a30 <arp_table_fill+0xa0>)
 8001996:	69c2      	ldr	r2, [r0, #28]
 8001998:	7829      	ldrb	r1, [r5, #0]
 800199a:	4c26      	ldr	r4, [pc, #152]	; (8001a34 <arp_table_fill+0xa4>)
 800199c:	010b      	lsls	r3, r1, #4
 800199e:	511a      	str	r2, [r3, r4]
 80019a0:	191e      	adds	r6, r3, r4
  memcpy(arp_rec[current_arp_index].macaddr,msg->macaddr_src,6);
 80019a2:	1d1a      	adds	r2, r3, #4
 80019a4:	4603      	mov	r3, r0
 80019a6:	f853 0f16 	ldr.w	r0, [r3, #22]!
 80019aa:	1917      	adds	r7, r2, r4
 80019ac:	5110      	str	r0, [r2, r4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
  arp_rec[current_arp_index].sec = clock_cnt;
  if(current_arp_index<4) current_arp_index++;
 80019b0:	2903      	cmp	r1, #3
  memcpy(arp_rec[current_arp_index].macaddr,msg->macaddr_src,6);
 80019b2:	80bb      	strh	r3, [r7, #4]
  arp_rec[current_arp_index].sec = clock_cnt;
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <arp_table_fill+0xa8>)
{
 80019b6:	b08a      	sub	sp, #40	; 0x28
  arp_rec[current_arp_index].sec = clock_cnt;
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60f3      	str	r3, [r6, #12]
  if(current_arp_index<4) current_arp_index++;
 80019bc:	d835      	bhi.n	8001a2a <arp_table_fill+0x9a>
 80019be:	3101      	adds	r1, #1
 80019c0:	7029      	strb	r1, [r5, #0]
 80019c2:	4c1c      	ldr	r4, [pc, #112]	; (8001a34 <arp_table_fill+0xa4>)
  else current_arp_index=0;
  // In bang ARP
  for(i=0;i<5;i++)
  {
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80019c4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001a44 <arp_table_fill+0xb4>
 80019c8:	4d1c      	ldr	r5, [pc, #112]	; (8001a3c <arp_table_fill+0xac>)
      arp_rec[i].macaddr[3],arp_rec[i].macaddr[4],arp_rec[i].macaddr[5],(unsigned long)arp_rec[i].sec);
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019ca:	4f1d      	ldr	r7, [pc, #116]	; (8001a40 <arp_table_fill+0xb0>)
 80019cc:	f104 0650 	add.w	r6, r4, #80	; 0x50
    sprintf(str1,"%d.%d.%d.%d - %02X:%02X:%02X:%02X:%02X:%02X -%lu\r\n",arp_rec[i].ipaddr[0],arp_rec[i].ipaddr[1],arp_rec[i].ipaddr[2],arp_rec[i].ipaddr[3],arp_rec[i].macaddr[0],arp_rec[i].macaddr[1],arp_rec[i].macaddr[2],
 80019d0:	68e1      	ldr	r1, [r4, #12]
 80019d2:	7863      	ldrb	r3, [r4, #1]
 80019d4:	9108      	str	r1, [sp, #32]
 80019d6:	7a61      	ldrb	r1, [r4, #9]
 80019d8:	7822      	ldrb	r2, [r4, #0]
 80019da:	9107      	str	r1, [sp, #28]
 80019dc:	7a21      	ldrb	r1, [r4, #8]
 80019de:	4628      	mov	r0, r5
 80019e0:	9106      	str	r1, [sp, #24]
 80019e2:	79e1      	ldrb	r1, [r4, #7]
 80019e4:	3410      	adds	r4, #16
 80019e6:	9105      	str	r1, [sp, #20]
 80019e8:	f814 1c0a 	ldrb.w	r1, [r4, #-10]
 80019ec:	9104      	str	r1, [sp, #16]
 80019ee:	f814 1c0b 	ldrb.w	r1, [r4, #-11]
 80019f2:	9103      	str	r1, [sp, #12]
 80019f4:	f814 1c0c 	ldrb.w	r1, [r4, #-12]
 80019f8:	9102      	str	r1, [sp, #8]
 80019fa:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
 80019fe:	9101      	str	r1, [sp, #4]
 8001a00:	f814 1c0e 	ldrb.w	r1, [r4, #-14]
 8001a04:	9100      	str	r1, [sp, #0]
 8001a06:	4641      	mov	r1, r8
 8001a08:	f000 ff0a 	bl	8002820 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7fe fb9d 	bl	800014c <strlen>
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	b282      	uxth	r2, r0
 8001a18:	4629      	mov	r1, r5
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f7ff fcb0 	bl	8001380 <HAL_UART_Transmit>
  for(i=0;i<5;i++)
 8001a20:	42a6      	cmp	r6, r4
 8001a22:	d1d5      	bne.n	80019d0 <arp_table_fill+0x40>
  }
}
 8001a24:	b00a      	add	sp, #40	; 0x28
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else current_arp_index=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	702b      	strb	r3, [r5, #0]
 8001a2e:	e7c8      	b.n	80019c2 <arp_table_fill+0x32>
 8001a30:	20000208 	.word	0x20000208
 8001a34:	20000264 	.word	0x20000264
 8001a38:	20000214 	.word	0x20000214
 8001a3c:	20000218 	.word	0x20000218
 8001a40:	200002b4 	.word	0x200002b4
 8001a44:	08003303 	.word	0x08003303

08001a48 <SPIx_WriteRead>:
{
 LD_ON;
}
//--------------------------------------------------
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001a48:	b510      	push	{r4, lr}
  uint8_t receivedbyte = 0;
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  uint8_t receivedbyte = 0;
 8001a4e:	2400      	movs	r4, #0
{
 8001a50:	b086      	sub	sp, #24
  uint8_t receivedbyte = 0;
 8001a52:	aa06      	add	r2, sp, #24
{
 8001a54:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t receivedbyte = 0;
 8001a58:	f802 4d01 	strb.w	r4, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001a5c:	f10d 010f 	add.w	r1, sp, #15
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <SPIx_WriteRead+0x38>)
 8001a64:	2301      	movs	r3, #1
 8001a66:	f7ff f870 	bl	8000b4a <HAL_SPI_TransmitReceive>
 8001a6a:	b120      	cbz	r0, 8001a76 <SPIx_WriteRead+0x2e>
 LD_ON;
 8001a6c:	4622      	mov	r2, r4
 8001a6e:	2120      	movs	r1, #32
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <SPIx_WriteRead+0x3c>)
 8001a72:	f7fe fd6f 	bl	8000554 <HAL_GPIO_WritePin>
  {
    Error();
  }
  return receivedbyte;
}
 8001a76:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001a7a:	b006      	add	sp, #24
 8001a7c:	bd10      	pop	{r4, pc}
 8001a7e:	bf00      	nop
 8001a80:	200002f4 	.word	0x200002f4
 8001a84:	40010c00 	.word	0x40010c00

08001a88 <enc28j60_readBuf>:
  SS_DESELECT();
  return result;
}
//--------------------------------------------------
static void enc28j60_readBuf(uint16_t len,uint8_t* data)
{
 8001a88:	b538      	push	{r3, r4, r5, lr}
 SS_SELECT();
 8001a8a:	2200      	movs	r2, #0
{
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	460c      	mov	r4, r1
 SS_SELECT();
 8001a90:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <enc28j60_readBuf+0x38>)
 8001a92:	2110      	movs	r1, #16
 8001a94:	f7fe fd5e 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001a98:	203a      	movs	r0, #58	; 0x3a
 8001a9a:	f7ff ffd5 	bl	8001a48 <SPIx_WriteRead>
 8001a9e:	4425      	add	r5, r4
 SPI_SendByte(ENC28J60_READ_BUF_MEM);
 while(len--){
 8001aa0:	42ac      	cmp	r4, r5
 8001aa2:	d106      	bne.n	8001ab2 <enc28j60_readBuf+0x2a>
  *data++=SPIx_WriteRead(0x00);
 }
 SS_DESELECT();
 8001aa4:	2201      	movs	r2, #1
}
 8001aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 SS_DESELECT();
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <enc28j60_readBuf+0x38>)
 8001aae:	f7fe bd51 	b.w	8000554 <HAL_GPIO_WritePin>
  *data++=SPIx_WriteRead(0x00);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff ffc8 	bl	8001a48 <SPIx_WriteRead>
 8001ab8:	f804 0b01 	strb.w	r0, [r4], #1
 8001abc:	e7f0      	b.n	8001aa0 <enc28j60_readBuf+0x18>
 8001abe:	bf00      	nop
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <enc28j60_writeBuf>:
//--------------------------------------------------
static void enc28j60_writeBuf(uint16_t len,uint8_t* data)
{
 8001ac4:	b538      	push	{r3, r4, r5, lr}
  SS_SELECT();
 8001ac6:	2200      	movs	r2, #0
{
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
  SS_SELECT();
 8001acc:	480a      	ldr	r0, [pc, #40]	; (8001af8 <enc28j60_writeBuf+0x34>)
 8001ace:	2110      	movs	r1, #16
 8001ad0:	f7fe fd40 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001ad4:	207a      	movs	r0, #122	; 0x7a
 8001ad6:	f7ff ffb7 	bl	8001a48 <SPIx_WriteRead>
 8001ada:	4425      	add	r5, r4
  SPI_SendByte(ENC28J60_WRITE_BUF_MEM);
  while(len--)
 8001adc:	42ac      	cmp	r4, r5
 8001ade:	d106      	bne.n	8001aee <enc28j60_writeBuf+0x2a>
    SPI_SendByte(*data++);
  SS_DESELECT();
 8001ae0:	2201      	movs	r2, #1
}
 8001ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SS_DESELECT();
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <enc28j60_writeBuf+0x34>)
 8001aea:	f7fe bd33 	b.w	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001aee:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001af2:	f7ff ffa9 	bl	8001a48 <SPIx_WriteRead>
 8001af6:	e7f1      	b.n	8001adc <enc28j60_writeBuf+0x18>
 8001af8:	40010800 	.word	0x40010800

08001afc <SPI_ReceiveByte>:
 uint8_t bt = SPIx_WriteRead(0xFF);
 8001afc:	20ff      	movs	r0, #255	; 0xff
 8001afe:	f7ff bfa3 	b.w	8001a48 <SPIx_WriteRead>
	...

08001b04 <enc28j60_readOp.constprop.0>:
static uint8_t enc28j60_readOp(uint8_t op,uint8_t addres)
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4604      	mov	r4, r0
 SS_SELECT();
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <enc28j60_readOp.constprop.0+0x3c>)
 SPI_SendByte(op|(addres&ADDR_MASK));
 8001b0e:	b264      	sxtb	r4, r4
 SS_SELECT();
 8001b10:	f7fe fd20 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001b14:	f004 001f 	and.w	r0, r4, #31
 8001b18:	f7ff ff96 	bl	8001a48 <SPIx_WriteRead>
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff ff93 	bl	8001a48 <SPIx_WriteRead>
  if(addres & 0x80) SPI_ReceiveByte();
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	da01      	bge.n	8001b2a <enc28j60_readOp.constprop.0+0x26>
 8001b26:	f7ff ffe9 	bl	8001afc <SPI_ReceiveByte>
 result=SPI_ReceiveByte();
 8001b2a:	f7ff ffe7 	bl	8001afc <SPI_ReceiveByte>
 8001b2e:	4604      	mov	r4, r0
  SS_DESELECT();
 8001b30:	2201      	movs	r2, #1
 8001b32:	2110      	movs	r1, #16
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <enc28j60_readOp.constprop.0+0x3c>)
 8001b36:	f7fe fd0d 	bl	8000554 <HAL_GPIO_WritePin>
}
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	bf00      	nop
 8001b40:	40010800 	.word	0x40010800

08001b44 <enc28j60_writeOp>:
{
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	460c      	mov	r4, r1
 8001b48:	4607      	mov	r7, r0
 8001b4a:	4616      	mov	r6, r2
 SS_SELECT();
 8001b4c:	4d0a      	ldr	r5, [pc, #40]	; (8001b78 <enc28j60_writeOp+0x34>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2110      	movs	r1, #16
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7fe fcfe 	bl	8000554 <HAL_GPIO_WritePin>
 SPI_SendByte(op|(addres&ADDR_MASK));
 8001b58:	f004 001f 	and.w	r0, r4, #31
 SPIx_WriteRead(bt);
 8001b5c:	4338      	orrs	r0, r7
 8001b5e:	f7ff ff73 	bl	8001a48 <SPIx_WriteRead>
 8001b62:	4630      	mov	r0, r6
 8001b64:	f7ff ff70 	bl	8001a48 <SPIx_WriteRead>
 SS_DESELECT();
 8001b68:	4628      	mov	r0, r5
}
 8001b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 SS_DESELECT();
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2110      	movs	r1, #16
 8001b72:	f7fe bcef 	b.w	8000554 <HAL_GPIO_WritePin>
 8001b76:	bf00      	nop
 8001b78:	40010800 	.word	0x40010800

08001b7c <enc28j60_SetBank>:
//--------------------------------------------------
static void enc28j60_SetBank(uint8_t addres)
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 if ((addres&BANK_MASK)!=Enc28j60Bank)
 8001b7e:	4d0a      	ldr	r5, [pc, #40]	; (8001ba8 <enc28j60_SetBank+0x2c>)
 8001b80:	f000 0460 	and.w	r4, r0, #96	; 0x60
 8001b84:	782b      	ldrb	r3, [r5, #0]
 8001b86:	42a3      	cmp	r3, r4
 8001b88:	d00c      	beq.n	8001ba4 <enc28j60_SetBank+0x28>
 {
  enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_BSEL1|ECON1_BSEL0);
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	211f      	movs	r1, #31
 8001b8e:	20a0      	movs	r0, #160	; 0xa0
 8001b90:	f7ff ffd8 	bl	8001b44 <enc28j60_writeOp>
  Enc28j60Bank = addres&BANK_MASK;
 8001b94:	702c      	strb	r4, [r5, #0]
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8001b96:	0962      	lsrs	r2, r4, #5
 8001b98:	211f      	movs	r1, #31
 }
}
 8001b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8001b9e:	2080      	movs	r0, #128	; 0x80
 8001ba0:	f7ff bfd0 	b.w	8001b44 <enc28j60_writeOp>
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000020f 	.word	0x2000020f

08001bac <enc28j60_readRegByte>:
 enc28j60_SetBank(addres);
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
}
//--------------------------------------------------
static uint8_t enc28j60_readRegByte(uint8_t addres)
{
 8001bac:	b510      	push	{r4, lr}
 8001bae:	4604      	mov	r4, r0
 enc28j60_SetBank(addres);
 8001bb0:	f7ff ffe4 	bl	8001b7c <enc28j60_SetBank>
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 8001bb4:	4620      	mov	r0, r4
}
 8001bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 8001bba:	f7ff bfa3 	b.w	8001b04 <enc28j60_readOp.constprop.0>

08001bbe <enc28j60_writeRegByte>:
{
 8001bbe:	b538      	push	{r3, r4, r5, lr}
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	460d      	mov	r5, r1
 enc28j60_SetBank(addres);
 8001bc4:	f7ff ffda 	bl	8001b7c <enc28j60_SetBank>
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4621      	mov	r1, r4
}
 8001bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 8001bd0:	2040      	movs	r0, #64	; 0x40
 8001bd2:	f7ff bfb7 	b.w	8001b44 <enc28j60_writeOp>

08001bd6 <enc28j60_writeReg>:
//--------------------------------------------------
static void enc28j60_writeReg(uint8_t addres,uint16_t data)
{
 8001bd6:	b538      	push	{r3, r4, r5, lr}
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 enc28j60_writeRegByte(addres, data);
 8001bdc:	b2c9      	uxtb	r1, r1
 8001bde:	f7ff ffee 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(addres+1, data>>8);
 8001be2:	1c60      	adds	r0, r4, #1
 8001be4:	0a29      	lsrs	r1, r5, #8
 8001be6:	b2c0      	uxtb	r0, r0
}
 8001be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeRegByte(addres+1, data>>8);
 8001bec:	f7ff bfe7 	b.w	8001bbe <enc28j60_writeRegByte>

08001bf0 <enc28j60_writePhy>:
//--------------------------------------------------
static void enc28j60_writePhy(uint8_t addres,uint16_t data)
{
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	460c      	mov	r4, r1
  enc28j60_writeRegByte(MIREGADR, addres);
 8001bf4:	4601      	mov	r1, r0
 8001bf6:	20d4      	movs	r0, #212	; 0xd4
 8001bf8:	f7ff ffe1 	bl	8001bbe <enc28j60_writeRegByte>
  enc28j60_writeReg(MIWR, data);
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	20d6      	movs	r0, #214	; 0xd6
 8001c00:	f7ff ffe9 	bl	8001bd6 <enc28j60_writeReg>
  while(enc28j60_readRegByte(MISTAT)&MISTAT_BUSY)
 8001c04:	20ea      	movs	r0, #234	; 0xea
 8001c06:	f7ff ffd1 	bl	8001bac <enc28j60_readRegByte>
 8001c0a:	07c3      	lsls	r3, r0, #31
 8001c0c:	d4fa      	bmi.n	8001c04 <enc28j60_writePhy+0x14>
  ;
}
 8001c0e:	bd10      	pop	{r4, pc}

08001c10 <enc28j60_ini>:
//--------------------------------------------------
void enc28j60_ini(void)
{
 8001c10:	b510      	push	{r4, lr}
 LD_OFF;
 8001c12:	2201      	movs	r2, #1
 8001c14:	2120      	movs	r1, #32
 8001c16:	4845      	ldr	r0, [pc, #276]	; (8001d2c <enc28j60_ini+0x11c>)
 8001c18:	f7fe fc9c 	bl	8000554 <HAL_GPIO_WritePin>
 enc28j60_writeOp(ENC28J60_SOFT_RESET,0,ENC28J60_SOFT_RESET);
 8001c1c:	22ff      	movs	r2, #255	; 0xff
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7ff ff8f 	bl	8001b44 <enc28j60_writeOp>
 HAL_Delay(2);
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fae0 	bl	80001ec <HAL_Delay>
 //Kiem tra lai moi thu da khoi dong lai chua
 while(!enc28j60_readOp(ENC28J60_READ_CTRL_REG,ESTAT)&ESTAT_CLKRDY)
 8001c2c:	201d      	movs	r0, #29
 8001c2e:	f7ff ff69 	bl	8001b04 <enc28j60_readOp.constprop.0>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	d0fa      	beq.n	8001c2c <enc28j60_ini+0x1c>
 ;
 // Cau hinh bo dem 
 enc28j60_writeReg(ERXST,RXSTART_INIT);
 8001c36:	2100      	movs	r1, #0
 8001c38:	2008      	movs	r0, #8
 8001c3a:	f7ff ffcc 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeReg(ERXRDPT,RXSTART_INIT);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	200c      	movs	r0, #12
 8001c42:	f7ff ffc8 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeReg(ERXND,RXSTOP_INIT);
 8001c46:	f640 31ff 	movw	r1, #3071	; 0xbff
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f7ff ffc3 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeReg(ETXST,TXSTART_INIT);
 8001c50:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff ffbe 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeReg(ETXND,TXSTOP_INIT);
 8001c5a:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8001c5e:	2006      	movs	r0, #6
 8001c60:	f7ff ffb9 	bl	8001bd6 <enc28j60_writeReg>
 // Enable Broadcast
 enc28j60_writeRegByte(ERXFCON,enc28j60_readRegByte(ERXFCON)|ERXFCON_BCEN);
 8001c64:	2038      	movs	r0, #56	; 0x38
 8001c66:	f7ff ffa1 	bl	8001bac <enc28j60_readRegByte>
 8001c6a:	f040 0101 	orr.w	r1, r0, #1
 8001c6e:	b2c9      	uxtb	r1, r1
 8001c70:	2038      	movs	r0, #56	; 0x38
 8001c72:	f7ff ffa4 	bl	8001bbe <enc28j60_writeRegByte>
 // Cau hinh lop lien ket
 enc28j60_writeRegByte(MACON1,MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 8001c76:	210d      	movs	r1, #13
 8001c78:	20c0      	movs	r0, #192	; 0xc0
 8001c7a:	f7ff ffa0 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MACON2,0x00);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	20c1      	movs	r0, #193	; 0xc1
 8001c82:	f7ff ff9c 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,MACON3,MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 8001c86:	2232      	movs	r2, #50	; 0x32
 8001c88:	21c2      	movs	r1, #194	; 0xc2
 8001c8a:	2080      	movs	r0, #128	; 0x80
 8001c8c:	f7ff ff5a 	bl	8001b44 <enc28j60_writeOp>
 enc28j60_writeReg(MAIPG,0x0C12);
 8001c90:	f640 4112 	movw	r1, #3090	; 0xc12
 8001c94:	20c6      	movs	r0, #198	; 0xc6
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8001c96:	4c26      	ldr	r4, [pc, #152]	; (8001d30 <enc28j60_ini+0x120>)
 enc28j60_writeReg(MAIPG,0x0C12);
 8001c98:	f7ff ff9d 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 8001c9c:	2112      	movs	r1, #18
 8001c9e:	20c4      	movs	r0, #196	; 0xc4
 8001ca0:	f7ff ff8d 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 8001ca4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ca8:	20ca      	movs	r0, #202	; 0xca
 8001caa:	f7ff ff94 	bl	8001bd6 <enc28j60_writeReg>
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8001cae:	7821      	ldrb	r1, [r4, #0]
 8001cb0:	20e4      	movs	r0, #228	; 0xe4
 8001cb2:	f7ff ff84 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR4,macaddr[1]);
 8001cb6:	7861      	ldrb	r1, [r4, #1]
 8001cb8:	20e5      	movs	r0, #229	; 0xe5
 8001cba:	f7ff ff80 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR3,macaddr[2]);
 8001cbe:	78a1      	ldrb	r1, [r4, #2]
 8001cc0:	20e2      	movs	r0, #226	; 0xe2
 8001cc2:	f7ff ff7c 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR2,macaddr[3]);
 8001cc6:	78e1      	ldrb	r1, [r4, #3]
 8001cc8:	20e3      	movs	r0, #227	; 0xe3
 8001cca:	f7ff ff78 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR1,macaddr[4]);
 8001cce:	7921      	ldrb	r1, [r4, #4]
 8001cd0:	20e0      	movs	r0, #224	; 0xe0
 8001cd2:	f7ff ff74 	bl	8001bbe <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR0,macaddr[5]);
 8001cd6:	7961      	ldrb	r1, [r4, #5]
 8001cd8:	20e1      	movs	r0, #225	; 0xe1
 8001cda:	f7ff ff70 	bl	8001bbe <enc28j60_writeRegByte>
 // Dieu chinh lop vat ly 
 enc28j60_writePhy(PHCON2,PHCON2_HDLDIS);//vo hieu hoa loopback
 8001cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce2:	2010      	movs	r0, #16
 8001ce4:	f7ff ff84 	bl	8001bf0 <enc28j60_writePhy>
 enc28j60_writePhy(PHLCON,PHLCON_LACFG2|PHLCON_LBCFG2|PHLCON_LBCFG1|PHLCON_LBCFG0|PHLCON_LFRQ0|PHLCON_STRCH); // Den LED
 8001ce8:	f240 4176 	movw	r1, #1142	; 0x476
 8001cec:	2014      	movs	r0, #20
 8001cee:	f7ff ff7f 	bl	8001bf0 <enc28j60_writePhy>
 enc28j60_SetBank (ECON1);
 8001cf2:	201f      	movs	r0, #31
 8001cf4:	f7ff ff42 	bl	8001b7c <enc28j60_SetBank>
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 8001cf8:	22c0      	movs	r2, #192	; 0xc0
 8001cfa:	211b      	movs	r1, #27
 8001cfc:	2080      	movs	r0, #128	; 0x80
 8001cfe:	f7ff ff21 	bl	8001b44 <enc28j60_writeOp>
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN); // allow receiving packets
 8001d02:	2204      	movs	r2, #4
 8001d04:	211f      	movs	r1, #31
 8001d06:	2080      	movs	r0, #128	; 0x80
 8001d08:	f7ff ff1c 	bl	8001b44 <enc28j60_writeOp>
 // Switch on the frequency divider of the generator 2, that is, the frequency will be 12.5 MHz
 enc28j60_writeRegByte(ECOCON,0x02);
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	2075      	movs	r0, #117	; 0x75
 8001d10:	f7ff ff55 	bl	8001bbe <enc28j60_writeRegByte>
	micros *= (SystemCoreClock / 1000000) / 5;
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <enc28j60_ini+0x124>)
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <enc28j60_ini+0x128>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	230f      	movs	r3, #15
 8001d1c:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d20:	4353      	muls	r3, r2
	while (micros--)
 8001d22:	461a      	mov	r2, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d1fb      	bne.n	8001d22 <enc28j60_ini+0x112>
 DelayMicro(15);
}
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	2000000e 	.word	0x2000000e
 8001d34:	20000018 	.word	0x20000018
 8001d38:	004c4b40 	.word	0x004c4b40

08001d3c <enc28j60_packetReceive>:
//--------------------------------------------------
uint16_t enc28j60_packetReceive(uint8_t *buf,uint16_t buflen)
{
 8001d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d3e:	4605      	mov	r5, r0
 uint16_t len=0;
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001d40:	2039      	movs	r0, #57	; 0x39
{
 8001d42:	460e      	mov	r6, r1
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001d44:	f7ff ff32 	bl	8001bac <enc28j60_readRegByte>
 8001d48:	b388      	cbz	r0, 8001dae <enc28j60_packetReceive+0x72>
 {
   enc28j60_writeReg(ERDPT,gNextPacketPtr);
 8001d4a:	4f1a      	ldr	r7, [pc, #104]	; (8001db4 <enc28j60_packetReceive+0x78>)
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	8839      	ldrh	r1, [r7, #0]
 8001d50:	f7ff ff41 	bl	8001bd6 <enc28j60_writeReg>
   struct{
    uint16_t nextPacket;
    uint16_t byteCount;
    uint16_t status;
   } header;
	 enc28j60_readBuf(sizeof header,(uint8_t*)&header);
 8001d54:	2006      	movs	r0, #6
 8001d56:	4669      	mov	r1, sp
 8001d58:	f7ff fe96 	bl	8001a88 <enc28j60_readBuf>
	 gNextPacketPtr=header.nextPacket;
	 len=header.byteCount-4;//remove the CRC count
	 if(len>buflen) len=buflen;
	 if((header.status&0x80)==0) len=0;
 8001d5c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
	 gNextPacketPtr=header.nextPacket;
 8001d60:	f8bd 3000 	ldrh.w	r3, [sp]
	 if((header.status&0x80)==0) len=0;
 8001d64:	f010 0480 	ands.w	r4, r0, #128	; 0x80
	 gNextPacketPtr=header.nextPacket;
 8001d68:	603b      	str	r3, [r7, #0]
	 if((header.status&0x80)==0) len=0;
 8001d6a:	d00a      	beq.n	8001d82 <enc28j60_packetReceive+0x46>
	 len=header.byteCount-4;//remove the CRC count
 8001d6c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
   else enc28j60_readBuf(len, buf);
 8001d70:	4629      	mov	r1, r5
	 len=header.byteCount-4;//remove the CRC count
 8001d72:	3c04      	subs	r4, #4
 8001d74:	b2a4      	uxth	r4, r4
 8001d76:	42b4      	cmp	r4, r6
 8001d78:	bf28      	it	cs
 8001d7a:	4634      	movcs	r4, r6
   else enc28j60_readBuf(len, buf);
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff fe83 	bl	8001a88 <enc28j60_readBuf>
	 buf[len]=0;
 8001d82:	2300      	movs	r3, #0
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 8001d84:	6839      	ldr	r1, [r7, #0]
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
   else
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d86:	200c      	movs	r0, #12
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 8001d88:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d8c:	bfd6      	itet	le
 8001d8e:	f101 31ff 	addle.w	r1, r1, #4294967295
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
 8001d92:	f640 31ff 	movwgt	r1, #3071	; 0xbff
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d96:	b289      	uxthle	r1, r1
	 buf[len]=0;
 8001d98:	552b      	strb	r3, [r5, r4]
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001d9a:	f7ff ff1c 	bl	8001bd6 <enc28j60_writeReg>
	 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON2,ECON2_PKTDEC);
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	211e      	movs	r1, #30
 8001da2:	2080      	movs	r0, #128	; 0x80
 8001da4:	f7ff fece 	bl	8001b44 <enc28j60_writeOp>
 }
 return len;
}
 8001da8:	4620      	mov	r0, r4
 8001daa:	b003      	add	sp, #12
 8001dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 uint16_t len=0;
 8001dae:	4604      	mov	r4, r0
 8001db0:	e7fa      	b.n	8001da8 <enc28j60_packetReceive+0x6c>
 8001db2:	bf00      	nop
 8001db4:	20000210 	.word	0x20000210

08001db8 <enc28j60_packetSend>:
//--------------------------------------------------
void enc28j60_packetSend(uint8_t *buf,uint16_t buflen)
{
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4605      	mov	r5, r0
 8001dbc:	460c      	mov	r4, r1
  while(enc28j60_readOp(ENC28J60_READ_CTRL_REG,ECON1)&ECON1_TXRTS)
 8001dbe:	201f      	movs	r0, #31
 8001dc0:	f7ff fea0 	bl	8001b04 <enc28j60_readOp.constprop.0>
 8001dc4:	0703      	lsls	r3, r0, #28
 8001dc6:	d419      	bmi.n	8001dfc <enc28j60_packetSend+0x44>
    {
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
    }
  }
  enc28j60_writeReg(EWRPT,TXSTART_INIT);
 8001dc8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7ff ff02 	bl	8001bd6 <enc28j60_writeReg>
  enc28j60_writeReg(ETXND,TXSTART_INIT+buflen);
 8001dd2:	f504 6140 	add.w	r1, r4, #3072	; 0xc00
 8001dd6:	b289      	uxth	r1, r1
 8001dd8:	2006      	movs	r0, #6
 8001dda:	f7ff fefc 	bl	8001bd6 <enc28j60_writeReg>
  enc28j60_writeBuf(1,(uint8_t*)"x00");
 8001dde:	490f      	ldr	r1, [pc, #60]	; (8001e1c <enc28j60_packetSend+0x64>)
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff fe6f 	bl	8001ac4 <enc28j60_writeBuf>
  enc28j60_writeBuf(buflen,buf);
 8001de6:	4629      	mov	r1, r5
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff fe6b 	bl	8001ac4 <enc28j60_writeBuf>
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRTS);
  // a small delay, for some reason without it does not work in downloaded networks
  //HAL_Delay(1);
}
 8001dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRTS);
 8001df2:	2208      	movs	r2, #8
 8001df4:	211f      	movs	r1, #31
 8001df6:	2080      	movs	r0, #128	; 0x80
 8001df8:	f7ff bea4 	b.w	8001b44 <enc28j60_writeOp>
		if(enc28j60_readRegByte(EIR)& EIR_TXERIF)
 8001dfc:	201c      	movs	r0, #28
 8001dfe:	f7ff fed5 	bl	8001bac <enc28j60_readRegByte>
 8001e02:	0782      	lsls	r2, r0, #30
 8001e04:	d5db      	bpl.n	8001dbe <enc28j60_packetSend+0x6>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	211f      	movs	r1, #31
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7ff fe9a 	bl	8001b44 <enc28j60_writeOp>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	211f      	movs	r1, #31
 8001e14:	20a0      	movs	r0, #160	; 0xa0
 8001e16:	f7ff fe95 	bl	8001b44 <enc28j60_writeOp>
 8001e1a:	e7d0      	b.n	8001dbe <enc28j60_packetSend+0x6>
 8001e1c:	0800339b 	.word	0x0800339b

08001e20 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001e24:	b530      	push	{r4, r5, lr}
 8001e26:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e28:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e2a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e2c:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e30:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001e32:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e36:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e38:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e3a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3c:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001e40:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e42:	f7fe fb99 	bl	8000578 <HAL_RCC_OscConfig>
 8001e46:	b100      	cbz	r0, 8001e4a <SystemClock_Config+0x2a>
 8001e48:	e7fe      	b.n	8001e48 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4a:	230f      	movs	r3, #15
 8001e4c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e52:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e54:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e56:	4621      	mov	r1, r4
 8001e58:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e5c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e5e:	f7fe fd53 	bl	8000908 <HAL_RCC_ClockConfig>
 8001e62:	4604      	mov	r4, r0
 8001e64:	b100      	cbz	r0, 8001e68 <SystemClock_Config+0x48>
 8001e66:	e7fe      	b.n	8001e66 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e68:	f7fe fdf2 	bl	8000a50 <HAL_RCC_GetHCLKFreq>
 8001e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e70:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e74:	f7fe fa1e 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e78:	2004      	movs	r0, #4
 8001e7a:	f7fe fa31 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e7e:	4622      	mov	r2, r4
 8001e80:	4621      	mov	r1, r4
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295
 8001e86:	f7fe f9d5 	bl	8000234 <HAL_NVIC_SetPriority>
}
 8001e8a:	b011      	add	sp, #68	; 0x44
 8001e8c:	bd30      	pop	{r4, r5, pc}
	...

08001e90 <main>:
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001e94:	f7fe f986 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001e98:	f7ff ffc2 	bl	8001e20 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <main+0x150>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e9e:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ea2:	4850      	ldr	r0, [pc, #320]	; (8001fe4 <main+0x154>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	f002 0220 	and.w	r2, r2, #32
 8001eb2:	9201      	str	r2, [sp, #4]
 8001eb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	f042 0204 	orr.w	r2, r2, #4
 8001ebe:	619a      	str	r2, [r3, #24]
 8001ec0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ec2:	2720      	movs	r7, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec4:	f002 0204 	and.w	r2, r2, #4
 8001ec8:	9202      	str	r2, [sp, #8]
 8001eca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	699a      	ldr	r2, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ece:	f44f 7582 	mov.w	r5, #260	; 0x104
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	9303      	str	r3, [sp, #12]
 8001ee2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ee4:	f7fe fb36 	bl	8000554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2120      	movs	r1, #32
 8001eec:	483e      	ldr	r0, [pc, #248]	; (8001fe8 <main+0x158>)
 8001eee:	f7fe fb31 	bl	8000554 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <main+0x15c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	a906      	add	r1, sp, #24
 8001efa:	483a      	ldr	r0, [pc, #232]	; (8001fe4 <main+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001efc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f7fe fa48 	bl	8000394 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f04:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	a906      	add	r1, sp, #24
 8001f08:	4836      	ldr	r0, [pc, #216]	; (8001fe4 <main+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f0a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f0e:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f7fe fa40 	bl	8000394 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	a906      	add	r1, sp, #24
 8001f16:	4834      	ldr	r0, [pc, #208]	; (8001fe8 <main+0x158>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f18:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f1c:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f7fe fa39 	bl	8000394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f22:	4622      	mov	r2, r4
 8001f24:	4621      	mov	r1, r4
 8001f26:	2007      	movs	r0, #7
 8001f28:	f7fe f984 	bl	8000234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f2c:	2007      	movs	r0, #7
 8001f2e:	f7fe f9b5 	bl	800029c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8001f32:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <main+0x160>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <main+0x164>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f36:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f38:	e880 0028 	stmia.w	r0, {r3, r5}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f42:	2308      	movs	r3, #8
 8001f44:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001f46:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f48:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f4c:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4e:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f50:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f52:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f54:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f56:	f7fe fef5 	bl	8000d44 <HAL_SPI_Init>
 8001f5a:	b100      	cbz	r0, 8001f5e <main+0xce>
 8001f5c:	e7fe      	b.n	8001f5c <main+0xcc>
  huart1.Init.BaudRate = 230400;
 8001f5e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
  huart1.Instance = USART1;
 8001f62:	4d25      	ldr	r5, [pc, #148]	; (8001ff8 <main+0x168>)
  huart1.Init.BaudRate = 230400;
 8001f64:	4925      	ldr	r1, [pc, #148]	; (8001ffc <main+0x16c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	60a8      	str	r0, [r5, #8]
  huart1.Init.BaudRate = 230400;
 8001f68:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f6e:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f70:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f76:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f78:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7a:	f7ff f9d3 	bl	8001324 <HAL_UART_Init>
 8001f7e:	b100      	cbz	r0, 8001f82 <main+0xf2>
 8001f80:	e7fe      	b.n	8001f80 <main+0xf0>
  htim2.Init.Prescaler = 39999;
 8001f82:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001f8a:	4c1d      	ldr	r4, [pc, #116]	; (8002000 <main+0x170>)
  htim2.Init.Prescaler = 39999;
 8001f8c:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 1000;
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f94:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9a:	4620      	mov	r0, r4
  htim2.Init.Period = 1000;
 8001f9c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9e:	f7ff f8af 	bl	8001100 <HAL_TIM_Base_Init>
 8001fa2:	b100      	cbz	r0, 8001fa6 <main+0x116>
 8001fa4:	e7fe      	b.n	8001fa4 <main+0x114>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001faa:	a906      	add	r1, sp, #24
 8001fac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fae:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb0:	f7fe ff0e 	bl	8000dd0 <HAL_TIM_ConfigClockSource>
 8001fb4:	b100      	cbz	r0, 8001fb8 <main+0x128>
 8001fb6:	e7fe      	b.n	8001fb6 <main+0x126>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fba:	a904      	add	r1, sp, #16
 8001fbc:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fbe:	9704      	str	r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fc0:	f7ff f8b8 	bl	8001134 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc4:	b100      	cbz	r0, 8001fc8 <main+0x138>
 8001fc6:	e7fe      	b.n	8001fc6 <main+0x136>
  net_ini();
 8001fc8:	f000 f834 	bl	8002034 <net_ini>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str,1);
 8001fcc:	4632      	mov	r2, r6
 8001fce:	490d      	ldr	r1, [pc, #52]	; (8002004 <main+0x174>)
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff fa31 	bl	8001438 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7fe feef 	bl	8000dba <HAL_TIM_Base_Start_IT>
 8001fdc:	e7fe      	b.n	8001fdc <main+0x14c>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	10210000 	.word	0x10210000
 8001ff0:	200002f4 	.word	0x200002f4
 8001ff4:	40013000 	.word	0x40013000
 8001ff8:	200002b4 	.word	0x200002b4
 8001ffc:	40013800 	.word	0x40013800
 8002000:	2000034c 	.word	0x2000034c
 8002004:	2000038c 	.word	0x2000038c

08002008 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart == &huart1) {
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_UART_RxCpltCallback+0xc>)
 800200a:	4283      	cmp	r3, r0
 800200c:	d101      	bne.n	8002012 <HAL_UART_RxCpltCallback+0xa>
		UART1_RxCpltCallback();
 800200e:	f000 b9cd 	b.w	80023ac <UART1_RxCpltCallback>
 8002012:	4770      	bx	lr
 8002014:	200002b4 	.word	0x200002b4

08002018 <HAL_TIM_PeriodElapsedCallback>:
	}
}
//---------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
   if(htim==&htim2) {
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xc>)
 800201a:	4283      	cmp	r3, r0
 800201c:	d101      	bne.n	8002022 <HAL_TIM_PeriodElapsedCallback+0xa>
        TIM_PeriodElapsedCallback();
 800201e:	f000 b9e5 	b.w	80023ec <TIM_PeriodElapsedCallback>
 8002022:	4770      	bx	lr
 8002024:	2000034c 	.word	0x2000034c

08002028 <HAL_GPIO_EXTI_Callback>:
   }
}
//---------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == GPIO_PIN_1) {
 8002028:	2802      	cmp	r0, #2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_EXTI_Callback+0x8>
		net_poll();
 800202c:	f000 b94c 	b.w	80022c8 <net_poll>
 8002030:	bf00      	nop
 8002032:	4770      	bx	lr

08002034 <net_ini>:
extern char str[20];
uint32_t clock_cnt=0; // so giay
//--------------------------------------------------
void net_ini(void)
{
  usartprop.usart_buf[0]=0;
 8002034:	2200      	movs	r2, #0
{
 8002036:	b510      	push	{r4, lr}
  usartprop.usart_cnt=0;
  usartprop.is_ip=0;
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 8002038:	4c0b      	ldr	r4, [pc, #44]	; (8002068 <net_ini+0x34>)
  usartprop.usart_buf[0]=0;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <net_ini+0x38>)
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <net_ini+0x3c>)
 800203e:	4620      	mov	r0, r4
  usartprop.usart_buf[0]=0;
 8002040:	701a      	strb	r2, [r3, #0]
  usartprop.usart_cnt=0;
 8002042:	751a      	strb	r2, [r3, #20]
  usartprop.is_ip=0;
 8002044:	755a      	strb	r2, [r3, #21]
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 8002046:	f000 fc1d 	bl	8002884 <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800204a:	4620      	mov	r0, r4
 800204c:	f7fe f87e 	bl	800014c <strlen>
 8002050:	4621      	mov	r1, r4
 8002052:	b282      	uxth	r2, r0
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <net_ini+0x40>)
 800205a:	f7ff f991 	bl	8001380 <HAL_UART_Transmit>
  enc28j60_ini();
}
 800205e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  enc28j60_ini();
 8002062:	f7ff bdd5 	b.w	8001c10 <enc28j60_ini>
 8002066:	bf00      	nop
 8002068:	20000218 	.word	0x20000218
 800206c:	200003a0 	.word	0x200003a0
 8002070:	0800340c 	.word	0x0800340c
 8002074:	200002b4 	.word	0x200002b4

08002078 <checksum>:
//--------------------------------------------------
uint16_t checksum(uint8_t *ptr, uint16_t len, uint8_t type)
{
  uint32_t sum = 0;
  if(type==1)
 8002078:	2a01      	cmp	r2, #1
  uint32_t sum = 0;
 800207a:	bf18      	it	ne
 800207c:	2300      	movne	r3, #0
{
 800207e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002080:	ea4f 0451 	mov.w	r4, r1, lsr #1
 8002084:	eb00 0544 	add.w	r5, r0, r4, lsl #1
  {
    sum+=IP_UDP;
    sum+=len-8;
 8002088:	bf08      	it	eq
 800208a:	f101 0309 	addeq.w	r3, r1, #9
 800208e:	1c42      	adds	r2, r0, #1
 8002090:	3503      	adds	r5, #3
 8002092:	3202      	adds	r2, #2
  }
	while(len>1)
 8002094:	4295      	cmp	r5, r2
 8002096:	d114      	bne.n	80020c2 <checksum+0x4a>
  {
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
	ptr+=2;
    len-=2;
  }
	if(len) sum+=((uint32_t)*ptr)<<8;
 8002098:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
 800209c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80020a0:	b289      	uxth	r1, r1
 80020a2:	b119      	cbz	r1, 80020ac <checksum+0x34>
 80020a4:	f810 2014 	ldrb.w	r2, [r0, r4, lsl #1]
 80020a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 80020ac:	0c1a      	lsrs	r2, r3, #16
 80020ae:	d110      	bne.n	80020d2 <checksum+0x5a>
	return ~be16toword((uint16_t)sum);
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <checksum+0x60>)
 80020b2:	ea00 2003 	and.w	r0, r0, r3, lsl #8
 80020b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80020ba:	4303      	orrs	r3, r0
 80020bc:	43d8      	mvns	r0, r3
}
 80020be:	b280      	uxth	r0, r0
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 80020c2:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 80020c6:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 80020ca:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80020ce:	4433      	add	r3, r6
 80020d0:	e7df      	b.n	8002092 <checksum+0x1a>
 80020d2:	b29b      	uxth	r3, r3
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 80020d4:	4413      	add	r3, r2
 80020d6:	e7e9      	b.n	80020ac <checksum+0x34>
 80020d8:	00ffff00 	.word	0x00ffff00

080020dc <eth_send>:
  }
}
//--------------------------------------------------
void eth_send(enc28j60_frame_ptr *frame, uint16_t len)
{
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020dc:	4603      	mov	r3, r0
{
 80020de:	b430      	push	{r4, r5}
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020e0:	f853 4f06 	ldr.w	r4, [r3, #6]!
  memcpy(frame->addr_src,macaddr,6);
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020e4:	310e      	adds	r1, #14
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020e6:	6004      	str	r4, [r0, #0]
 80020e8:	889c      	ldrh	r4, [r3, #4]
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020ea:	b289      	uxth	r1, r1
  memcpy(frame->addr_dest,frame->addr_src,6);
 80020ec:	8084      	strh	r4, [r0, #4]
  memcpy(frame->addr_src,macaddr,6);
 80020ee:	4c04      	ldr	r4, [pc, #16]	; (8002100 <eth_send+0x24>)
 80020f0:	6825      	ldr	r5, [r4, #0]
 80020f2:	f8c0 5006 	str.w	r5, [r0, #6]
 80020f6:	88a2      	ldrh	r2, [r4, #4]
 80020f8:	809a      	strh	r2, [r3, #4]
}
 80020fa:	bc30      	pop	{r4, r5}
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80020fc:	f7ff be5c 	b.w	8001db8 <enc28j60_packetSend>
 8002100:	2000000e 	.word	0x2000000e

08002104 <ip_send>:
  ip_pkt->len=be16toword(len);
 8002104:	ba4b      	rev16	r3, r1
{
 8002106:	b570      	push	{r4, r5, r6, lr}
  ip_pkt->len=be16toword(len);
 8002108:	8203      	strh	r3, [r0, #16]
  ip_pkt->ttl=128;
 800210a:	2380      	movs	r3, #128	; 0x80
  ip_pkt->fl_frg_of=0;
 800210c:	2500      	movs	r5, #0
  ip_pkt->ttl=128;
 800210e:	7583      	strb	r3, [r0, #22]
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 8002110:	f8d0 301a 	ldr.w	r3, [r0, #26]
{
 8002114:	4604      	mov	r4, r0
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 8002116:	f8c0 301e 	str.w	r3, [r0, #30]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <ip_send+0x3c>)
{
 800211c:	460e      	mov	r6, r1
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 800211e:	681b      	ldr	r3, [r3, #0]
  ip_pkt->fl_frg_of=0;
 8002120:	8285      	strh	r5, [r0, #20]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 8002122:	f8c0 301a 	str.w	r3, [r0, #26]
  ip_pkt->cs = 0;
 8002126:	8305      	strh	r5, [r0, #24]
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002128:	462a      	mov	r2, r5
 800212a:	2114      	movs	r1, #20
 800212c:	300e      	adds	r0, #14
 800212e:	f7ff ffa3 	bl	8002078 <checksum>
  eth_send(frame,len);
 8002132:	4631      	mov	r1, r6
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr),0);
 8002134:	8320      	strh	r0, [r4, #24]
  eth_send(frame,len);
 8002136:	4620      	mov	r0, r4
 8002138:	f7ff ffd0 	bl	80020dc <eth_send>
}
 800213c:	4628      	mov	r0, r5
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	20000014 	.word	0x20000014

08002144 <icmp_read>:
{
 8002144:	b530      	push	{r4, r5, lr}
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 8002146:	2907      	cmp	r1, #7
{
 8002148:	b087      	sub	sp, #28
 800214a:	4604      	mov	r4, r0
 800214c:	460d      	mov	r5, r1
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 800214e:	d92e      	bls.n	80021ae <icmp_read+0x6a>
 8002150:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8002154:	2b08      	cmp	r3, #8
 8002156:	d12a      	bne.n	80021ae <icmp_read+0x6a>
	icmp_pkt->msg_tp=ICMP_REPLY;
 8002158:	2200      	movs	r2, #0
    icmp_pkt->cs=checksum((void*)icmp_pkt,len,0);
 800215a:	3022      	adds	r0, #34	; 0x22
	icmp_pkt->msg_tp=ICMP_REPLY;
 800215c:	7002      	strb	r2, [r0, #0]
    icmp_pkt->cs=0;
 800215e:	8042      	strh	r2, [r0, #2]
    icmp_pkt->cs=checksum((void*)icmp_pkt,len,0);
 8002160:	f7ff ff8a 	bl	8002078 <checksum>
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 8002164:	f105 0114 	add.w	r1, r5, #20
    icmp_pkt->cs=checksum((void*)icmp_pkt,len,0);
 8002168:	84a0      	strh	r0, [r4, #36]	; 0x24
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 800216a:	b289      	uxth	r1, r1
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff ffc9 	bl	8002104 <ip_send>
	sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d icmp request\r\n",
 8002172:	7f61      	ldrb	r1, [r4, #29]
 8002174:	7fe3      	ldrb	r3, [r4, #31]
 8002176:	9105      	str	r1, [sp, #20]
 8002178:	7f21      	ldrb	r1, [r4, #28]
 800217a:	7fa2      	ldrb	r2, [r4, #30]
 800217c:	9104      	str	r1, [sp, #16]
 800217e:	7ee1      	ldrb	r1, [r4, #27]
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <icmp_read+0x70>)
 8002182:	9103      	str	r1, [sp, #12]
 8002184:	7ea1      	ldrb	r1, [r4, #26]
 8002186:	9102      	str	r1, [sp, #8]
 8002188:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 800218c:	9101      	str	r1, [sp, #4]
 800218e:	f894 1020 	ldrb.w	r1, [r4, #32]
 8002192:	9100      	str	r1, [sp, #0]
 8002194:	4908      	ldr	r1, [pc, #32]	; (80021b8 <icmp_read+0x74>)
 8002196:	f000 fb43 	bl	8002820 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <icmp_read+0x70>)
 800219c:	f7fd ffd6 	bl	800014c <strlen>
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	b282      	uxth	r2, r0
 80021a6:	4903      	ldr	r1, [pc, #12]	; (80021b4 <icmp_read+0x70>)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <icmp_read+0x78>)
 80021aa:	f7ff f8e9 	bl	8001380 <HAL_UART_Transmit>
}
 80021ae:	2000      	movs	r0, #0
 80021b0:	b007      	add	sp, #28
 80021b2:	bd30      	pop	{r4, r5, pc}
 80021b4:	20000218 	.word	0x20000218
 80021b8:	080033e5 	.word	0x080033e5
 80021bc:	200002b4 	.word	0x200002b4

080021c0 <ip_read>:
{
 80021c0:	b510      	push	{r4, lr}
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 80021c2:	7b83      	ldrb	r3, [r0, #14]
{
 80021c4:	4604      	mov	r4, r0
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 80021c6:	2b45      	cmp	r3, #69	; 0x45
 80021c8:	d111      	bne.n	80021ee <ip_read+0x2e>
 80021ca:	2204      	movs	r2, #4
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <ip_read+0x40>)
 80021ce:	301e      	adds	r0, #30
 80021d0:	f000 fb0e 	bl	80027f0 <memcmp>
 80021d4:	b958      	cbnz	r0, 80021ee <ip_read+0x2e>
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 80021d6:	8a23      	ldrh	r3, [r4, #16]
 80021d8:	0219      	lsls	r1, r3, #8
 80021da:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (ip_pkt->prt==IP_ICMP)
 80021de:	7de3      	ldrb	r3, [r4, #23]
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 80021e0:	3914      	subs	r1, #20
		if (ip_pkt->prt==IP_ICMP)
 80021e2:	2b01      	cmp	r3, #1
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 80021e4:	b289      	uxth	r1, r1
		if (ip_pkt->prt==IP_ICMP)
 80021e6:	d104      	bne.n	80021f2 <ip_read+0x32>
        icmp_read(frame,len1);
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ffab 	bl	8002144 <icmp_read>
}
 80021ee:	2000      	movs	r0, #0
 80021f0:	bd10      	pop	{r4, pc}
    else if (ip_pkt->prt==IP_UDP)
 80021f2:	2b11      	cmp	r3, #17
 80021f4:	d1fb      	bne.n	80021ee <ip_read+0x2e>
    	udp_read(frame,len1);
 80021f6:	4620      	mov	r0, r4
 80021f8:	f000 fa2a 	bl	8002650 <udp_read>
 80021fc:	e7f7      	b.n	80021ee <ip_read+0x2e>
 80021fe:	bf00      	nop
 8002200:	20000014 	.word	0x20000014

08002204 <eth_read>:
{
 8002204:	b530      	push	{r4, r5, lr}
	if (len>=sizeof(enc28j60_frame_ptr))
 8002206:	290d      	cmp	r1, #13
{
 8002208:	b08d      	sub	sp, #52	; 0x34
 800220a:	4604      	mov	r4, r0
	if (len>=sizeof(enc28j60_frame_ptr))
 800220c:	d952      	bls.n	80022b4 <eth_read+0xb0>
 800220e:	8985      	ldrh	r5, [r0, #12]
    if(frame->type==ETH_ARP)
 8002210:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 8002214:	d113      	bne.n	800223e <eth_read+0x3a>
     res = arp_read(frame,len-sizeof(enc28j60_frame_ptr));
 8002216:	390e      	subs	r1, #14
 8002218:	b289      	uxth	r1, r1
 800221a:	f7ff fa1d 	bl	8001658 <arp_read>
		 if (res == 1) // Ham sizeof voi struct se bo qua thanh phan mang[] nen ta chi doc kich thuoc data (payload) khong doc lai header ethernet frame
 800221e:	2801      	cmp	r0, #1
 8002220:	d105      	bne.n	800222e <eth_read+0x2a>
			 arp_send(frame); // Reply
 8002222:	4620      	mov	r0, r4
}
 8002224:	b00d      	add	sp, #52	; 0x34
 8002226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			 arp_send(frame); // Reply
 800222a:	f7ff baa5 	b.w	8001778 <arp_send>
		 } else if (res == 2) // Reply for other ARP send to
 800222e:	2802      	cmp	r0, #2
 8002230:	d140      	bne.n	80022b4 <eth_read+0xb0>
			 arp_table_fill(frame); // Bang nay se thu thap tat ca cac ARP reply (do ta su dung arp_request cac arp se reply )
 8002232:	4620      	mov	r0, r4
}
 8002234:	b00d      	add	sp, #52	; 0x34
 8002236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			 arp_table_fill(frame); // Bang nay se thu thap tat ca cac ARP reply (do ta su dung arp_request cac arp se reply )
 800223a:	f7ff bba9 	b.w	8001990 <arp_table_fill>
    else if (frame->type==ETH_IP)
 800223e:	2d08      	cmp	r5, #8
 8002240:	d106      	bne.n	8002250 <eth_read+0x4c>
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 8002242:	390e      	subs	r1, #14
 8002244:	b289      	uxth	r1, r1
}
 8002246:	b00d      	add	sp, #52	; 0x34
 8002248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 800224c:	f7ff bfb8 	b.w	80021c0 <ip_read>
    	sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; %04X",
 8002250:	ba6d      	rev16	r5, r5
 8002252:	b2ad      	uxth	r5, r5
 8002254:	79c3      	ldrb	r3, [r0, #7]
 8002256:	7982      	ldrb	r2, [r0, #6]
 8002258:	950b      	str	r5, [sp, #44]	; 0x2c
 800225a:	910a      	str	r1, [sp, #40]	; 0x28
 800225c:	7941      	ldrb	r1, [r0, #5]
 800225e:	9109      	str	r1, [sp, #36]	; 0x24
 8002260:	7901      	ldrb	r1, [r0, #4]
 8002262:	9108      	str	r1, [sp, #32]
 8002264:	78c1      	ldrb	r1, [r0, #3]
 8002266:	9107      	str	r1, [sp, #28]
 8002268:	7881      	ldrb	r1, [r0, #2]
 800226a:	9106      	str	r1, [sp, #24]
 800226c:	7841      	ldrb	r1, [r0, #1]
 800226e:	9105      	str	r1, [sp, #20]
 8002270:	7801      	ldrb	r1, [r0, #0]
 8002272:	9104      	str	r1, [sp, #16]
 8002274:	7ac1      	ldrb	r1, [r0, #11]
 8002276:	9103      	str	r1, [sp, #12]
 8002278:	7a81      	ldrb	r1, [r0, #10]
 800227a:	9102      	str	r1, [sp, #8]
 800227c:	7a41      	ldrb	r1, [r0, #9]
 800227e:	9101      	str	r1, [sp, #4]
 8002280:	7a01      	ldrb	r1, [r0, #8]
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <eth_read+0xb4>)
 8002284:	9100      	str	r1, [sp, #0]
 8002286:	490d      	ldr	r1, [pc, #52]	; (80022bc <eth_read+0xb8>)
 8002288:	f000 faca 	bl	8002820 <siprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800228c:	480a      	ldr	r0, [pc, #40]	; (80022b8 <eth_read+0xb4>)
 800228e:	f7fd ff5d 	bl	800014c <strlen>
 8002292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002296:	b282      	uxth	r2, r0
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <eth_read+0xb4>)
 800229a:	4809      	ldr	r0, [pc, #36]	; (80022c0 <eth_read+0xbc>)
 800229c:	f7ff f870 	bl	8001380 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80022a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a4:	2202      	movs	r2, #2
 80022a6:	4907      	ldr	r1, [pc, #28]	; (80022c4 <eth_read+0xc0>)
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <eth_read+0xbc>)
}
 80022aa:	b00d      	add	sp, #52	; 0x34
 80022ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80022b0:	f7ff b866 	b.w	8001380 <HAL_UART_Transmit>
}
 80022b4:	b00d      	add	sp, #52	; 0x34
 80022b6:	bd30      	pop	{r4, r5, pc}
 80022b8:	20000218 	.word	0x20000218
 80022bc:	0800339f 	.word	0x0800339f
 80022c0:	200002b4 	.word	0x200002b4
 80022c4:	0800342c 	.word	0x0800342c

080022c8 <net_poll>:
		usartprop.usart_cnt = 0;
	}
}
//--------------------------------------------------
void net_poll(void)
{
 80022c8:	b510      	push	{r4, lr}
  uint16_t len;
//  uint8_t ip[4]={0};
  enc28j60_frame_ptr *frame=(void*)net_buf;
	while ((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 80022ca:	4c06      	ldr	r4, [pc, #24]	; (80022e4 <net_poll+0x1c>)
 80022cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d0:	4804      	ldr	r0, [pc, #16]	; (80022e4 <net_poll+0x1c>)
 80022d2:	f7ff fd33 	bl	8001d3c <enc28j60_packetReceive>
 80022d6:	4601      	mov	r1, r0
 80022d8:	b900      	cbnz	r0, 80022dc <net_poll+0x14>
//      usartprop.is_ip = 0;
//      usartprop.usart_cnt=0;
//
//    }
  }
}
 80022da:	bd10      	pop	{r4, pc}
    eth_read(frame,len);
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff ff91 	bl	8002204 <eth_read>
 80022e2:	e7f3      	b.n	80022cc <net_poll+0x4>
 80022e4:	200003b6 	.word	0x200003b6

080022e8 <ip_extract>:
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str,1); // Nhan ngat va luu vao str[0]
}
//-----------------------------------------------
// Chuyen doi gia tri chuoi IP thanh so 32bit
void ip_extract(char* ip_str,uint8_t len, uint8_t* ipextr)
{
 80022e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t offset = 0;
  uint8_t i;
  char ss2[5] = {0};
 80022ec:	2500      	movs	r5, #0
{
 80022ee:	4606      	mov	r6, r0
 80022f0:	468a      	mov	sl, r1
 80022f2:	4617      	mov	r7, r2
  char ss2[5] = {0};
 80022f4:	9500      	str	r5, [sp, #0]
 80022f6:	f88d 5004 	strb.w	r5, [sp, #4]
 80022fa:	f102 38ff 	add.w	r8, r2, #4294967295
 80022fe:	f102 0902 	add.w	r9, r2, #2
  char *ss1;
  int ch = '.';
  for(i=0;i<3;i++)
  {
    ss1 = strchr(ip_str,ch);
 8002302:	212e      	movs	r1, #46	; 0x2e
 8002304:	4630      	mov	r0, r6
 8002306:	f000 faaf 	bl	8002868 <strchr>
    offset = ss1-ip_str+1;
 800230a:	1b80      	subs	r0, r0, r6
 800230c:	3001      	adds	r0, #1
 800230e:	b2c4      	uxtb	r4, r0
    strncpy(ss2,ip_str,offset);
 8002310:	4622      	mov	r2, r4
 8002312:	4631      	mov	r1, r6
 8002314:	4668      	mov	r0, sp
 8002316:	f000 fabd 	bl	8002894 <strncpy>
    ss2[offset]=0;
 800231a:	ab02      	add	r3, sp, #8
 800231c:	4423      	add	r3, r4
    ipextr[i] = atoi(ss2);
 800231e:	4668      	mov	r0, sp
    ss2[offset]=0;
 8002320:	f803 5c08 	strb.w	r5, [r3, #-8]
    ipextr[i] = atoi(ss2);
 8002324:	f000 fa3b 	bl	800279e <atoi>
 8002328:	f808 0f01 	strb.w	r0, [r8, #1]!
    ip_str+=offset;
 800232c:	4426      	add	r6, r4
  for(i=0;i<3;i++)
 800232e:	45c1      	cmp	r9, r8
    len-=offset;
 8002330:	ebaa 0404 	sub.w	r4, sl, r4
 8002334:	fa5f fa84 	uxtb.w	sl, r4
  for(i=0;i<3;i++)
 8002338:	d1e3      	bne.n	8002302 <ip_extract+0x1a>
  }
  strncpy(ss2,ip_str,len);
 800233a:	4652      	mov	r2, sl
 800233c:	4631      	mov	r1, r6
 800233e:	4668      	mov	r0, sp
 8002340:	f000 faa8 	bl	8002894 <strncpy>
  ss2[len]=0;
 8002344:	ab02      	add	r3, sp, #8
 8002346:	eb03 040a 	add.w	r4, r3, sl
  ipextr[3] = atoi(ss2);
 800234a:	4668      	mov	r0, sp
  ss2[len]=0;
 800234c:	f804 5c08 	strb.w	r5, [r4, #-8]
  ipextr[3] = atoi(ss2);
 8002350:	f000 fa25 	bl	800279e <atoi>
 8002354:	70f8      	strb	r0, [r7, #3]
}
 8002356:	b002      	add	sp, #8
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800235c <net_cmd>:
{
 800235c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ip[4]={0};
 800235e:	2500      	movs	r5, #0
	if (usartprop.is_ip == 1) //Trang thai yeu cau ARP
 8002360:	4c0f      	ldr	r4, [pc, #60]	; (80023a0 <net_cmd+0x44>)
	uint8_t ip[4]={0};
 8002362:	9501      	str	r5, [sp, #4]
	if (usartprop.is_ip == 1) //Trang thai yeu cau ARP
 8002364:	7d63      	ldrb	r3, [r4, #21]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d117      	bne.n	800239a <net_cmd+0x3e>
		HAL_UART_Transmit(&huart1, usartprop.usart_buf, usartprop.usart_cnt,0x1000);
 800236a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236e:	7d22      	ldrb	r2, [r4, #20]
 8002370:	4621      	mov	r1, r4
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <net_cmd+0x48>)
 8002374:	f7ff f804 	bl	8001380 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n", 2, 0x1000);
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	2202      	movs	r2, #2
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <net_cmd+0x4c>)
 8002380:	4808      	ldr	r0, [pc, #32]	; (80023a4 <net_cmd+0x48>)
 8002382:	f7fe fffd 	bl	8001380 <HAL_UART_Transmit>
		ip_extract((char*) usartprop.usart_buf, usartprop.usart_cnt, ip);
 8002386:	aa01      	add	r2, sp, #4
 8002388:	7d21      	ldrb	r1, [r4, #20]
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff ffac 	bl	80022e8 <ip_extract>
		arp_request(ip);
 8002390:	a801      	add	r0, sp, #4
 8002392:	f7ff fa61 	bl	8001858 <arp_request>
		usartprop.is_ip = 0;
 8002396:	7565      	strb	r5, [r4, #21]
		usartprop.usart_cnt = 0;
 8002398:	7525      	strb	r5, [r4, #20]
}
 800239a:	b003      	add	sp, #12
 800239c:	bd30      	pop	{r4, r5, pc}
 800239e:	bf00      	nop
 80023a0:	200003a0 	.word	0x200003a0
 80023a4:	200002b4 	.word	0x200002b4
 80023a8:	0800342c 	.word	0x0800342c

080023ac <UART1_RxCpltCallback>:
{
 80023ac:	b508      	push	{r3, lr}
	if (usartprop.usart_cnt>20)
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <UART1_RxCpltCallback+0x34>)
 80023b0:	7d1a      	ldrb	r2, [r3, #20]
 80023b2:	2a14      	cmp	r2, #20
 80023b4:	d902      	bls.n	80023bc <UART1_RxCpltCallback+0x10>
	  usartprop.usart_cnt=0;
 80023b6:	2200      	movs	r2, #0
	  usartprop.usart_cnt++;
 80023b8:	751a      	strb	r2, [r3, #20]
 80023ba:	e007      	b.n	80023cc <UART1_RxCpltCallback+0x20>
	b = str[0];
 80023bc:	4909      	ldr	r1, [pc, #36]	; (80023e4 <UART1_RxCpltCallback+0x38>)
 80023be:	7809      	ldrb	r1, [r1, #0]
	else if (b == 'a')
 80023c0:	2961      	cmp	r1, #97	; 0x61
 80023c2:	d10a      	bne.n	80023da <UART1_RxCpltCallback+0x2e>
	  usartprop.is_ip=1;//Trang thai yeu cau ARP
 80023c4:	2201      	movs	r2, #1
 80023c6:	755a      	strb	r2, [r3, #21]
	  net_cmd();
 80023c8:	f7ff ffc8 	bl	800235c <net_cmd>
}
 80023cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str,1); // Nhan ngat va luu vao str[0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4904      	ldr	r1, [pc, #16]	; (80023e4 <UART1_RxCpltCallback+0x38>)
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <UART1_RxCpltCallback+0x3c>)
 80023d6:	f7ff b82f 	b.w	8001438 <HAL_UART_Receive_IT>
	  usartprop.usart_buf[usartprop.usart_cnt] = b;
 80023da:	5499      	strb	r1, [r3, r2]
	  usartprop.usart_cnt++;
 80023dc:	3201      	adds	r2, #1
 80023de:	e7eb      	b.n	80023b8 <UART1_RxCpltCallback+0xc>
 80023e0:	200003a0 	.word	0x200003a0
 80023e4:	2000038c 	.word	0x2000038c
 80023e8:	200002b4 	.word	0x200002b4

080023ec <TIM_PeriodElapsedCallback>:
//-----------------------------------------------
void TIM_PeriodElapsedCallback(void)
{
  clock_cnt++; // Lay giay va viet chung vao clock_cnt
 80023ec:	4a02      	ldr	r2, [pc, #8]	; (80023f8 <TIM_PeriodElapsedCallback+0xc>)
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000214 	.word	0x20000214

080023fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_MspInit+0x80>)
{
 80023fe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002402:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	f7fd fefc 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	f06f 000b 	mvn.w	r0, #11
 800241e:	4611      	mov	r1, r2
 8002420:	f7fd ff08 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	f06f 000a 	mvn.w	r0, #10
 800242a:	4611      	mov	r1, r2
 800242c:	f7fd ff02 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	f06f 0009 	mvn.w	r0, #9
 8002436:	4611      	mov	r1, r2
 8002438:	f7fd fefc 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	f06f 0004 	mvn.w	r0, #4
 8002442:	4611      	mov	r1, r2
 8002444:	f7fd fef6 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	f06f 0003 	mvn.w	r0, #3
 800244e:	4611      	mov	r1, r2
 8002450:	f7fd fef0 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	f06f 0001 	mvn.w	r0, #1
 800245a:	4611      	mov	r1, r2
 800245c:	f7fd feea 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	f04f 30ff 	mov.w	r0, #4294967295
 8002466:	4611      	mov	r1, r2
 8002468:	f7fd fee4 	bl	8000234 <HAL_NVIC_SetPriority>

    /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
    */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800246c:	4a04      	ldr	r2, [pc, #16]	; (8002480 <HAL_MspInit+0x84>)
 800246e:	6853      	ldr	r3, [r2, #4]
 8002470:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	b003      	add	sp, #12
 8002478:	f85d fb04 	ldr.w	pc, [sp], #4
 800247c:	40021000 	.word	0x40021000
 8002480:	40010000 	.word	0x40010000

08002484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002486:	6802      	ldr	r2, [r0, #0]
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_SPI_MspInit+0x4c>)
 800248a:	429a      	cmp	r2, r3
 800248c:	d11d      	bne.n	80024ca <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800248e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002492:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002496:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800249a:	619a      	str	r2, [r3, #24]
 800249c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	480d      	ldr	r0, [pc, #52]	; (80024d4 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024a8:	23a0      	movs	r3, #160	; 0xa0
 80024aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f7fd ff6e 	bl	8000394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024b8:	2340      	movs	r3, #64	; 0x40
 80024ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	a902      	add	r1, sp, #8
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f7fd ff65 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024ca:	b007      	add	sp, #28
 80024cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d0:	40013000 	.word	0x40013000
 80024d4:	40010800 	.word	0x40010800

080024d8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80024d8:	6803      	ldr	r3, [r0, #0]
{
 80024da:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d112      	bne.n	8002508 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024e6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024e8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024f0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024fe:	f7fd fe99 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002502:	201c      	movs	r0, #28
 8002504:	f7fd feca 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002508:	b003      	add	sp, #12
 800250a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002510 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002510:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_UART_MspInit+0x60>)
{
 8002516:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8002518:	429a      	cmp	r2, r3
 800251a:	d127      	bne.n	800256c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002520:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002528:	619a      	str	r2, [r3, #24]
 800252a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	4811      	ldr	r0, [pc, #68]	; (8002574 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002540:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002542:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002544:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f7fd ff25 	bl	8000394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800254a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254e:	a902      	add	r1, sp, #8
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002552:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002554:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f7fd ff1c 	bl	8000394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800255c:	2025      	movs	r0, #37	; 0x25
 800255e:	4622      	mov	r2, r4
 8002560:	4621      	mov	r1, r4
 8002562:	f7fd fe67 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002566:	2025      	movs	r0, #37	; 0x25
 8002568:	f7fd fe98 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800256c:	b006      	add	sp, #24
 800256e:	bd10      	pop	{r4, pc}
 8002570:	40013800 	.word	0x40013800
 8002574:	40010800 	.word	0x40010800

08002578 <NMI_Handler>:
 8002578:	4770      	bx	lr

0800257a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800257a:	e7fe      	b.n	800257a <HardFault_Handler>

0800257c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800257c:	e7fe      	b.n	800257c <MemManage_Handler>

0800257e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800257e:	e7fe      	b.n	800257e <BusFault_Handler>

08002580 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002580:	e7fe      	b.n	8002580 <UsageFault_Handler>

08002582 <SVC_Handler>:
 8002582:	4770      	bx	lr

08002584 <DebugMon_Handler>:
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002588:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258a:	f7fd fe1d 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002592:	f7fd beb2 	b.w	80002fa <HAL_SYSTICK_IRQHandler>

08002596 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002596:	2002      	movs	r0, #2
 8002598:	f7fd bfe2 	b.w	8000560 <HAL_GPIO_EXTI_IRQHandler>

0800259c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <TIM2_IRQHandler+0x8>)
 800259e:	f7fe bcd4 	b.w	8000f4a <HAL_TIM_IRQHandler>
 80025a2:	bf00      	nop
 80025a4:	2000034c 	.word	0x2000034c

080025a8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <USART1_IRQHandler+0x8>)
 80025aa:	f7fe bfad 	b.w	8001508 <HAL_UART_IRQHandler>
 80025ae:	bf00      	nop
 80025b0:	200002b4 	.word	0x200002b4

080025b4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <SystemInit+0x40>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <SystemInit+0x44>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80025cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025d0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80025e0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <SystemInit+0x48>)
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	f8ff0000 	.word	0xf8ff0000
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <udp_reply>:
{
  uint8_t res=0;
  uint16_t port;
  ip_pkt_ptr * ip_pkt = ( void *) (frame-> data);
  udp_pkt_ptr * udp_pkt = ( void *) (ip_pkt-> data);
  port = udp_pkt-> port_dst ;
 8002600:	8c83      	ldrh	r3, [r0, #36]	; 0x24
  udp_pkt-> port_dst = udp_pkt-> port_src;
 8002602:	8c42      	ldrh	r2, [r0, #34]	; 0x22
{
 8002604:	b570      	push	{r4, r5, r6, lr}
  udp_pkt-> port_src = port;
 8002606:	8443      	strh	r3, [r0, #34]	; 0x22
  strcpy((char*)udp_pkt->data,"UDP Reply:\r\nHello from UDP Server to UDPClient!!!\r\n");
 8002608:	f100 032a 	add.w	r3, r0, #42	; 0x2a
{
 800260c:	4604      	mov	r4, r0
  udp_pkt-> port_dst = udp_pkt-> port_src;
 800260e:	8482      	strh	r2, [r0, #36]	; 0x24
  strcpy((char*)udp_pkt->data,"UDP Reply:\r\nHello from UDP Server to UDPClient!!!\r\n");
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <udp_reply+0x4c>)
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f936 	bl	8002884 <strcpy>
  len = strlen((char*)udp_pkt->data) + sizeof(udp_pkt_ptr);
 8002618:	f7fd fd98 	bl	800014c <strlen>
  udp_pkt->len = be16toword(len);
  udp_pkt->cs=0;
 800261c:	2600      	movs	r6, #0
  len = strlen((char*)udp_pkt->data) + sizeof(udp_pkt_ptr);
 800261e:	b285      	uxth	r5, r0
 8002620:	f105 0308 	add.w	r3, r5, #8
  udp_pkt->len = be16toword(len);
 8002624:	ba5b      	rev16	r3, r3
  udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 8002626:	f105 0110 	add.w	r1, r5, #16
  udp_pkt->len = be16toword(len);
 800262a:	84e3      	strh	r3, [r4, #38]	; 0x26
  udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 800262c:	2201      	movs	r2, #1
  udp_pkt->cs=0;
 800262e:	8526      	strh	r6, [r4, #40]	; 0x28
  udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 8002630:	b289      	uxth	r1, r1
 8002632:	f104 001a 	add.w	r0, r4, #26
 8002636:	f7ff fd1f 	bl	8002078 <checksum>
  ip_send(frame,len+sizeof(ip_pkt_ptr));
 800263a:	f105 011c 	add.w	r1, r5, #28
  udp_pkt->cs=checksum((uint8_t*)udp_pkt-8, len+8, 1);
 800263e:	8520      	strh	r0, [r4, #40]	; 0x28
  ip_send(frame,len+sizeof(ip_pkt_ptr));
 8002640:	b289      	uxth	r1, r1
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fd5e 	bl	8002104 <ip_send>
  return res;
}
 8002648:	4630      	mov	r0, r6
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	080034bb 	.word	0x080034bb

08002650 <udp_read>:
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b08d      	sub	sp, #52	; 0x34
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 8002654:	79c3      	ldrb	r3, [r0, #7]
 8002656:	7982      	ldrb	r2, [r0, #6]
 8002658:	910a      	str	r1, [sp, #40]	; 0x28
{
 800265a:	460f      	mov	r7, r1
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 800265c:	7941      	ldrb	r1, [r0, #5]
 800265e:	4d37      	ldr	r5, [pc, #220]	; (800273c <udp_read+0xec>)
 8002660:	9109      	str	r1, [sp, #36]	; 0x24
 8002662:	7901      	ldrb	r1, [r0, #4]
{
 8002664:	4604      	mov	r4, r0
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 8002666:	9108      	str	r1, [sp, #32]
 8002668:	78c1      	ldrb	r1, [r0, #3]
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800266a:	4e35      	ldr	r6, [pc, #212]	; (8002740 <udp_read+0xf0>)
  sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 800266c:	9107      	str	r1, [sp, #28]
 800266e:	7881      	ldrb	r1, [r0, #2]
 8002670:	9106      	str	r1, [sp, #24]
 8002672:	7841      	ldrb	r1, [r0, #1]
 8002674:	9105      	str	r1, [sp, #20]
 8002676:	7801      	ldrb	r1, [r0, #0]
 8002678:	9104      	str	r1, [sp, #16]
 800267a:	7ac1      	ldrb	r1, [r0, #11]
 800267c:	9103      	str	r1, [sp, #12]
 800267e:	7a81      	ldrb	r1, [r0, #10]
 8002680:	9102      	str	r1, [sp, #8]
 8002682:	7a41      	ldrb	r1, [r0, #9]
 8002684:	9101      	str	r1, [sp, #4]
 8002686:	7a01      	ldrb	r1, [r0, #8]
 8002688:	4628      	mov	r0, r5
 800268a:	9100      	str	r1, [sp, #0]
 800268c:	492d      	ldr	r1, [pc, #180]	; (8002744 <udp_read+0xf4>)
 800268e:	f000 f8c7 	bl	8002820 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8002692:	4628      	mov	r0, r5
 8002694:	f7fd fd5a 	bl	800014c <strlen>
 8002698:	4629      	mov	r1, r5
 800269a:	b282      	uxth	r2, r0
 800269c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a0:	4630      	mov	r0, r6
 80026a2:	f7fe fe6d 	bl	8001380 <HAL_UART_Transmit>
  sprintf(str1,"%d.%d.%d.%d-%d.%d.%d.%d udp request\r\n",
 80026a6:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 80026aa:	7ee3      	ldrb	r3, [r4, #27]
 80026ac:	9105      	str	r1, [sp, #20]
 80026ae:	f894 1020 	ldrb.w	r1, [r4, #32]
 80026b2:	7ea2      	ldrb	r2, [r4, #26]
 80026b4:	9104      	str	r1, [sp, #16]
 80026b6:	7fe1      	ldrb	r1, [r4, #31]
 80026b8:	4628      	mov	r0, r5
 80026ba:	9103      	str	r1, [sp, #12]
 80026bc:	7fa1      	ldrb	r1, [r4, #30]
 80026be:	9102      	str	r1, [sp, #8]
 80026c0:	7f61      	ldrb	r1, [r4, #29]
 80026c2:	9101      	str	r1, [sp, #4]
 80026c4:	7f21      	ldrb	r1, [r4, #28]
 80026c6:	9100      	str	r1, [sp, #0]
 80026c8:	491f      	ldr	r1, [pc, #124]	; (8002748 <udp_read+0xf8>)
 80026ca:	f000 f8a9 	bl	8002820 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80026ce:	4628      	mov	r0, r5
 80026d0:	f7fd fd3c 	bl	800014c <strlen>
 80026d4:	4629      	mov	r1, r5
 80026d6:	b282      	uxth	r2, r0
 80026d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026dc:	4630      	mov	r0, r6
 80026de:	f7fe fe4f 	bl	8001380 <HAL_UART_Transmit>
  sprintf(str1,"%u-%u\r\n", be16toword(udp_pkt->port_src),be16toword(udp_pkt->port_dst));
 80026e2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80026e4:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80026e6:	ba5b      	rev16	r3, r3
 80026e8:	ba52      	rev16	r2, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	b292      	uxth	r2, r2
 80026ee:	4917      	ldr	r1, [pc, #92]	; (800274c <udp_read+0xfc>)
 80026f0:	4628      	mov	r0, r5
 80026f2:	f000 f895 	bl	8002820 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80026f6:	4628      	mov	r0, r5
 80026f8:	f7fd fd28 	bl	800014c <strlen>
 80026fc:	4629      	mov	r1, r5
 80026fe:	b282      	uxth	r2, r0
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002704:	4630      	mov	r0, r6
 8002706:	f7fe fe3b 	bl	8001380 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,udp_pkt->data,len - sizeof(udp_pkt_ptr),0x1000);
 800270a:	f1a7 0208 	sub.w	r2, r7, #8
 800270e:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8002712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002716:	b292      	uxth	r2, r2
 8002718:	4630      	mov	r0, r6
 800271a:	f7fe fe31 	bl	8001380 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	2202      	movs	r2, #2
 8002724:	490a      	ldr	r1, [pc, #40]	; (8002750 <udp_read+0x100>)
 8002726:	4630      	mov	r0, r6
 8002728:	f7fe fe2a 	bl	8001380 <HAL_UART_Transmit>
  udp_reply(frame,len);
 800272c:	4639      	mov	r1, r7
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff ff66 	bl	8002600 <udp_reply>
}
 8002734:	2000      	movs	r0, #0
 8002736:	b00d      	add	sp, #52	; 0x34
 8002738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273a:	bf00      	nop
 800273c:	20000218 	.word	0x20000218
 8002740:	200002b4 	.word	0x200002b4
 8002744:	08003447 	.word	0x08003447
 8002748:	0800348d 	.word	0x0800348d
 800274c:	080034b3 	.word	0x080034b3
 8002750:	0800342c 	.word	0x0800342c

08002754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002754:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002756:	e003      	b.n	8002760 <LoopCopyDataInit>

08002758 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800275a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800275c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800275e:	3104      	adds	r1, #4

08002760 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002760:	480a      	ldr	r0, [pc, #40]	; (800278c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002764:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002766:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002768:	d3f6      	bcc.n	8002758 <CopyDataInit>
  ldr r2, =_sbss
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800276c:	e002      	b.n	8002774 <LoopFillZerobss>

0800276e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002770:	f842 3b04 	str.w	r3, [r2], #4

08002774 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002776:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002778:	d3f9      	bcc.n	800276e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800277a:	f7ff ff1b 	bl	80025b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277e:	f000 f813 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002782:	f7ff fb85 	bl	8001e90 <main>
  bx lr
 8002786:	4770      	bx	lr
  ldr r3, =_sidata
 8002788:	08003638 	.word	0x08003638
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002790:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8002794:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8002798:	200005bc 	.word	0x200005bc

0800279c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC1_2_IRQHandler>

0800279e <atoi>:
 800279e:	220a      	movs	r2, #10
 80027a0:	2100      	movs	r1, #0
 80027a2:	f000 b90d 	b.w	80029c0 <strtol>
	...

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	2500      	movs	r5, #0
 80027ac:	4e0c      	ldr	r6, [pc, #48]	; (80027e0 <__libc_init_array+0x38>)
 80027ae:	4c0d      	ldr	r4, [pc, #52]	; (80027e4 <__libc_init_array+0x3c>)
 80027b0:	1ba4      	subs	r4, r4, r6
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	42a5      	cmp	r5, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	f000 fd4e 	bl	8003258 <_init>
 80027bc:	2500      	movs	r5, #0
 80027be:	4e0a      	ldr	r6, [pc, #40]	; (80027e8 <__libc_init_array+0x40>)
 80027c0:	4c0a      	ldr	r4, [pc, #40]	; (80027ec <__libc_init_array+0x44>)
 80027c2:	1ba4      	subs	r4, r4, r6
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	42a5      	cmp	r5, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d0:	4798      	blx	r3
 80027d2:	3501      	adds	r5, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027da:	4798      	blx	r3
 80027dc:	3501      	adds	r5, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	08003630 	.word	0x08003630
 80027e4:	08003630 	.word	0x08003630
 80027e8:	08003630 	.word	0x08003630
 80027ec:	08003634 	.word	0x08003634

080027f0 <memcmp>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	3901      	subs	r1, #1
 80027f4:	4402      	add	r2, r0
 80027f6:	4290      	cmp	r0, r2
 80027f8:	d101      	bne.n	80027fe <memcmp+0xe>
 80027fa:	2000      	movs	r0, #0
 80027fc:	bd10      	pop	{r4, pc}
 80027fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002802:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002806:	42a3      	cmp	r3, r4
 8002808:	d0f5      	beq.n	80027f6 <memcmp+0x6>
 800280a:	1b18      	subs	r0, r3, r4
 800280c:	bd10      	pop	{r4, pc}

0800280e <memset>:
 800280e:	4603      	mov	r3, r0
 8002810:	4402      	add	r2, r0
 8002812:	4293      	cmp	r3, r2
 8002814:	d100      	bne.n	8002818 <memset+0xa>
 8002816:	4770      	bx	lr
 8002818:	f803 1b01 	strb.w	r1, [r3], #1
 800281c:	e7f9      	b.n	8002812 <memset+0x4>
	...

08002820 <siprintf>:
 8002820:	b40e      	push	{r1, r2, r3}
 8002822:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002826:	b500      	push	{lr}
 8002828:	b09c      	sub	sp, #112	; 0x70
 800282a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800282e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002832:	9104      	str	r1, [sp, #16]
 8002834:	9107      	str	r1, [sp, #28]
 8002836:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800283a:	ab1d      	add	r3, sp, #116	; 0x74
 800283c:	9002      	str	r0, [sp, #8]
 800283e:	9006      	str	r0, [sp, #24]
 8002840:	4808      	ldr	r0, [pc, #32]	; (8002864 <siprintf+0x44>)
 8002842:	f853 2b04 	ldr.w	r2, [r3], #4
 8002846:	f8ad 1016 	strh.w	r1, [sp, #22]
 800284a:	6800      	ldr	r0, [r0, #0]
 800284c:	a902      	add	r1, sp, #8
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	f000 f93c 	bl	8002acc <_svfiprintf_r>
 8002854:	2200      	movs	r2, #0
 8002856:	9b02      	ldr	r3, [sp, #8]
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	b01c      	add	sp, #112	; 0x70
 800285c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002860:	b003      	add	sp, #12
 8002862:	4770      	bx	lr
 8002864:	2000001c 	.word	0x2000001c

08002868 <strchr>:
 8002868:	b2c9      	uxtb	r1, r1
 800286a:	4603      	mov	r3, r0
 800286c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002870:	b11a      	cbz	r2, 800287a <strchr+0x12>
 8002872:	4291      	cmp	r1, r2
 8002874:	d1f9      	bne.n	800286a <strchr+0x2>
 8002876:	4618      	mov	r0, r3
 8002878:	4770      	bx	lr
 800287a:	2900      	cmp	r1, #0
 800287c:	bf0c      	ite	eq
 800287e:	4618      	moveq	r0, r3
 8002880:	2000      	movne	r0, #0
 8002882:	4770      	bx	lr

08002884 <strcpy>:
 8002884:	4603      	mov	r3, r0
 8002886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800288a:	f803 2b01 	strb.w	r2, [r3], #1
 800288e:	2a00      	cmp	r2, #0
 8002890:	d1f9      	bne.n	8002886 <strcpy+0x2>
 8002892:	4770      	bx	lr

08002894 <strncpy>:
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4604      	mov	r4, r0
 8002898:	b902      	cbnz	r2, 800289c <strncpy+0x8>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	4623      	mov	r3, r4
 800289e:	f811 5b01 	ldrb.w	r5, [r1], #1
 80028a2:	1e56      	subs	r6, r2, #1
 80028a4:	f803 5b01 	strb.w	r5, [r3], #1
 80028a8:	b91d      	cbnz	r5, 80028b2 <strncpy+0x1e>
 80028aa:	4414      	add	r4, r2
 80028ac:	42a3      	cmp	r3, r4
 80028ae:	d103      	bne.n	80028b8 <strncpy+0x24>
 80028b0:	bd70      	pop	{r4, r5, r6, pc}
 80028b2:	461c      	mov	r4, r3
 80028b4:	4632      	mov	r2, r6
 80028b6:	e7ef      	b.n	8002898 <strncpy+0x4>
 80028b8:	f803 5b01 	strb.w	r5, [r3], #1
 80028bc:	e7f6      	b.n	80028ac <strncpy+0x18>

080028be <_strtol_l.isra.0>:
 80028be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c2:	4680      	mov	r8, r0
 80028c4:	4689      	mov	r9, r1
 80028c6:	4692      	mov	sl, r2
 80028c8:	461f      	mov	r7, r3
 80028ca:	468b      	mov	fp, r1
 80028cc:	465d      	mov	r5, fp
 80028ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80028d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028d4:	f000 f88a 	bl	80029ec <__locale_ctype_ptr_l>
 80028d8:	4420      	add	r0, r4
 80028da:	7846      	ldrb	r6, [r0, #1]
 80028dc:	f016 0608 	ands.w	r6, r6, #8
 80028e0:	d10b      	bne.n	80028fa <_strtol_l.isra.0+0x3c>
 80028e2:	2c2d      	cmp	r4, #45	; 0x2d
 80028e4:	d10b      	bne.n	80028fe <_strtol_l.isra.0+0x40>
 80028e6:	2601      	movs	r6, #1
 80028e8:	782c      	ldrb	r4, [r5, #0]
 80028ea:	f10b 0502 	add.w	r5, fp, #2
 80028ee:	b167      	cbz	r7, 800290a <_strtol_l.isra.0+0x4c>
 80028f0:	2f10      	cmp	r7, #16
 80028f2:	d114      	bne.n	800291e <_strtol_l.isra.0+0x60>
 80028f4:	2c30      	cmp	r4, #48	; 0x30
 80028f6:	d00a      	beq.n	800290e <_strtol_l.isra.0+0x50>
 80028f8:	e011      	b.n	800291e <_strtol_l.isra.0+0x60>
 80028fa:	46ab      	mov	fp, r5
 80028fc:	e7e6      	b.n	80028cc <_strtol_l.isra.0+0xe>
 80028fe:	2c2b      	cmp	r4, #43	; 0x2b
 8002900:	bf04      	itt	eq
 8002902:	782c      	ldrbeq	r4, [r5, #0]
 8002904:	f10b 0502 	addeq.w	r5, fp, #2
 8002908:	e7f1      	b.n	80028ee <_strtol_l.isra.0+0x30>
 800290a:	2c30      	cmp	r4, #48	; 0x30
 800290c:	d127      	bne.n	800295e <_strtol_l.isra.0+0xa0>
 800290e:	782b      	ldrb	r3, [r5, #0]
 8002910:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002914:	2b58      	cmp	r3, #88	; 0x58
 8002916:	d14b      	bne.n	80029b0 <_strtol_l.isra.0+0xf2>
 8002918:	2710      	movs	r7, #16
 800291a:	786c      	ldrb	r4, [r5, #1]
 800291c:	3502      	adds	r5, #2
 800291e:	2e00      	cmp	r6, #0
 8002920:	bf0c      	ite	eq
 8002922:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002926:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800292a:	2200      	movs	r2, #0
 800292c:	fbb1 fef7 	udiv	lr, r1, r7
 8002930:	4610      	mov	r0, r2
 8002932:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002936:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800293a:	2b09      	cmp	r3, #9
 800293c:	d811      	bhi.n	8002962 <_strtol_l.isra.0+0xa4>
 800293e:	461c      	mov	r4, r3
 8002940:	42a7      	cmp	r7, r4
 8002942:	dd1d      	ble.n	8002980 <_strtol_l.isra.0+0xc2>
 8002944:	1c53      	adds	r3, r2, #1
 8002946:	d007      	beq.n	8002958 <_strtol_l.isra.0+0x9a>
 8002948:	4586      	cmp	lr, r0
 800294a:	d316      	bcc.n	800297a <_strtol_l.isra.0+0xbc>
 800294c:	d101      	bne.n	8002952 <_strtol_l.isra.0+0x94>
 800294e:	45a4      	cmp	ip, r4
 8002950:	db13      	blt.n	800297a <_strtol_l.isra.0+0xbc>
 8002952:	2201      	movs	r2, #1
 8002954:	fb00 4007 	mla	r0, r0, r7, r4
 8002958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800295c:	e7eb      	b.n	8002936 <_strtol_l.isra.0+0x78>
 800295e:	270a      	movs	r7, #10
 8002960:	e7dd      	b.n	800291e <_strtol_l.isra.0+0x60>
 8002962:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002966:	2b19      	cmp	r3, #25
 8002968:	d801      	bhi.n	800296e <_strtol_l.isra.0+0xb0>
 800296a:	3c37      	subs	r4, #55	; 0x37
 800296c:	e7e8      	b.n	8002940 <_strtol_l.isra.0+0x82>
 800296e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002972:	2b19      	cmp	r3, #25
 8002974:	d804      	bhi.n	8002980 <_strtol_l.isra.0+0xc2>
 8002976:	3c57      	subs	r4, #87	; 0x57
 8002978:	e7e2      	b.n	8002940 <_strtol_l.isra.0+0x82>
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	e7eb      	b.n	8002958 <_strtol_l.isra.0+0x9a>
 8002980:	1c53      	adds	r3, r2, #1
 8002982:	d108      	bne.n	8002996 <_strtol_l.isra.0+0xd8>
 8002984:	2322      	movs	r3, #34	; 0x22
 8002986:	4608      	mov	r0, r1
 8002988:	f8c8 3000 	str.w	r3, [r8]
 800298c:	f1ba 0f00 	cmp.w	sl, #0
 8002990:	d107      	bne.n	80029a2 <_strtol_l.isra.0+0xe4>
 8002992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002996:	b106      	cbz	r6, 800299a <_strtol_l.isra.0+0xdc>
 8002998:	4240      	negs	r0, r0
 800299a:	f1ba 0f00 	cmp.w	sl, #0
 800299e:	d00c      	beq.n	80029ba <_strtol_l.isra.0+0xfc>
 80029a0:	b122      	cbz	r2, 80029ac <_strtol_l.isra.0+0xee>
 80029a2:	3d01      	subs	r5, #1
 80029a4:	f8ca 5000 	str.w	r5, [sl]
 80029a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ac:	464d      	mov	r5, r9
 80029ae:	e7f9      	b.n	80029a4 <_strtol_l.isra.0+0xe6>
 80029b0:	2430      	movs	r4, #48	; 0x30
 80029b2:	2f00      	cmp	r7, #0
 80029b4:	d1b3      	bne.n	800291e <_strtol_l.isra.0+0x60>
 80029b6:	2708      	movs	r7, #8
 80029b8:	e7b1      	b.n	800291e <_strtol_l.isra.0+0x60>
 80029ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080029c0 <strtol>:
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <strtol+0x24>)
 80029c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029c4:	681c      	ldr	r4, [r3, #0]
 80029c6:	4d08      	ldr	r5, [pc, #32]	; (80029e8 <strtol+0x28>)
 80029c8:	6a23      	ldr	r3, [r4, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf08      	it	eq
 80029ce:	462b      	moveq	r3, r5
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	460a      	mov	r2, r1
 80029d6:	4601      	mov	r1, r0
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff ff70 	bl	80028be <_strtol_l.isra.0>
 80029de:	b003      	add	sp, #12
 80029e0:	bd30      	pop	{r4, r5, pc}
 80029e2:	bf00      	nop
 80029e4:	2000001c 	.word	0x2000001c
 80029e8:	20000080 	.word	0x20000080

080029ec <__locale_ctype_ptr_l>:
 80029ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80029f0:	4770      	bx	lr

080029f2 <__ascii_mbtowc>:
 80029f2:	b082      	sub	sp, #8
 80029f4:	b901      	cbnz	r1, 80029f8 <__ascii_mbtowc+0x6>
 80029f6:	a901      	add	r1, sp, #4
 80029f8:	b142      	cbz	r2, 8002a0c <__ascii_mbtowc+0x1a>
 80029fa:	b14b      	cbz	r3, 8002a10 <__ascii_mbtowc+0x1e>
 80029fc:	7813      	ldrb	r3, [r2, #0]
 80029fe:	600b      	str	r3, [r1, #0]
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	1c10      	adds	r0, r2, #0
 8002a04:	bf18      	it	ne
 8002a06:	2001      	movne	r0, #1
 8002a08:	b002      	add	sp, #8
 8002a0a:	4770      	bx	lr
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	e7fb      	b.n	8002a08 <__ascii_mbtowc+0x16>
 8002a10:	f06f 0001 	mvn.w	r0, #1
 8002a14:	e7f8      	b.n	8002a08 <__ascii_mbtowc+0x16>

08002a16 <__ssputs_r>:
 8002a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1a:	688e      	ldr	r6, [r1, #8]
 8002a1c:	4682      	mov	sl, r0
 8002a1e:	429e      	cmp	r6, r3
 8002a20:	460c      	mov	r4, r1
 8002a22:	4691      	mov	r9, r2
 8002a24:	4698      	mov	r8, r3
 8002a26:	d835      	bhi.n	8002a94 <__ssputs_r+0x7e>
 8002a28:	898a      	ldrh	r2, [r1, #12]
 8002a2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a2e:	d031      	beq.n	8002a94 <__ssputs_r+0x7e>
 8002a30:	2302      	movs	r3, #2
 8002a32:	6825      	ldr	r5, [r4, #0]
 8002a34:	6909      	ldr	r1, [r1, #16]
 8002a36:	1a6f      	subs	r7, r5, r1
 8002a38:	6965      	ldr	r5, [r4, #20]
 8002a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a3e:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a42:	f108 0301 	add.w	r3, r8, #1
 8002a46:	443b      	add	r3, r7
 8002a48:	429d      	cmp	r5, r3
 8002a4a:	bf38      	it	cc
 8002a4c:	461d      	movcc	r5, r3
 8002a4e:	0553      	lsls	r3, r2, #21
 8002a50:	d531      	bpl.n	8002ab6 <__ssputs_r+0xa0>
 8002a52:	4629      	mov	r1, r5
 8002a54:	f000 fb52 	bl	80030fc <_malloc_r>
 8002a58:	4606      	mov	r6, r0
 8002a5a:	b950      	cbnz	r0, 8002a72 <__ssputs_r+0x5c>
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	f8ca 3000 	str.w	r3, [sl]
 8002a62:	89a3      	ldrh	r3, [r4, #12]
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a6c:	81a3      	strh	r3, [r4, #12]
 8002a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a72:	463a      	mov	r2, r7
 8002a74:	6921      	ldr	r1, [r4, #16]
 8002a76:	f000 fad0 	bl	800301a <memcpy>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a84:	81a3      	strh	r3, [r4, #12]
 8002a86:	6126      	str	r6, [r4, #16]
 8002a88:	443e      	add	r6, r7
 8002a8a:	6026      	str	r6, [r4, #0]
 8002a8c:	4646      	mov	r6, r8
 8002a8e:	6165      	str	r5, [r4, #20]
 8002a90:	1bed      	subs	r5, r5, r7
 8002a92:	60a5      	str	r5, [r4, #8]
 8002a94:	4546      	cmp	r6, r8
 8002a96:	bf28      	it	cs
 8002a98:	4646      	movcs	r6, r8
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	6820      	ldr	r0, [r4, #0]
 8002aa0:	f000 fac6 	bl	8003030 <memmove>
 8002aa4:	68a3      	ldr	r3, [r4, #8]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	1b9b      	subs	r3, r3, r6
 8002aaa:	60a3      	str	r3, [r4, #8]
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	441e      	add	r6, r3
 8002ab0:	6026      	str	r6, [r4, #0]
 8002ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab6:	462a      	mov	r2, r5
 8002ab8:	f000 fb7e 	bl	80031b8 <_realloc_r>
 8002abc:	4606      	mov	r6, r0
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d1e1      	bne.n	8002a86 <__ssputs_r+0x70>
 8002ac2:	6921      	ldr	r1, [r4, #16]
 8002ac4:	4650      	mov	r0, sl
 8002ac6:	f000 facd 	bl	8003064 <_free_r>
 8002aca:	e7c7      	b.n	8002a5c <__ssputs_r+0x46>

08002acc <_svfiprintf_r>:
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad0:	b09d      	sub	sp, #116	; 0x74
 8002ad2:	9303      	str	r3, [sp, #12]
 8002ad4:	898b      	ldrh	r3, [r1, #12]
 8002ad6:	4680      	mov	r8, r0
 8002ad8:	061c      	lsls	r4, r3, #24
 8002ada:	460d      	mov	r5, r1
 8002adc:	4616      	mov	r6, r2
 8002ade:	d50f      	bpl.n	8002b00 <_svfiprintf_r+0x34>
 8002ae0:	690b      	ldr	r3, [r1, #16]
 8002ae2:	b96b      	cbnz	r3, 8002b00 <_svfiprintf_r+0x34>
 8002ae4:	2140      	movs	r1, #64	; 0x40
 8002ae6:	f000 fb09 	bl	80030fc <_malloc_r>
 8002aea:	6028      	str	r0, [r5, #0]
 8002aec:	6128      	str	r0, [r5, #16]
 8002aee:	b928      	cbnz	r0, 8002afc <_svfiprintf_r+0x30>
 8002af0:	230c      	movs	r3, #12
 8002af2:	f8c8 3000 	str.w	r3, [r8]
 8002af6:	f04f 30ff 	mov.w	r0, #4294967295
 8002afa:	e0c4      	b.n	8002c86 <_svfiprintf_r+0x1ba>
 8002afc:	2340      	movs	r3, #64	; 0x40
 8002afe:	616b      	str	r3, [r5, #20]
 8002b00:	2300      	movs	r3, #0
 8002b02:	9309      	str	r3, [sp, #36]	; 0x24
 8002b04:	2320      	movs	r3, #32
 8002b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b0a:	2330      	movs	r3, #48	; 0x30
 8002b0c:	f04f 0b01 	mov.w	fp, #1
 8002b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b14:	4637      	mov	r7, r6
 8002b16:	463c      	mov	r4, r7
 8002b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13c      	bne.n	8002b9a <_svfiprintf_r+0xce>
 8002b20:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b24:	d00b      	beq.n	8002b3e <_svfiprintf_r+0x72>
 8002b26:	4653      	mov	r3, sl
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4640      	mov	r0, r8
 8002b2e:	f7ff ff72 	bl	8002a16 <__ssputs_r>
 8002b32:	3001      	adds	r0, #1
 8002b34:	f000 80a2 	beq.w	8002c7c <_svfiprintf_r+0x1b0>
 8002b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b3a:	4453      	add	r3, sl
 8002b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b3e:	783b      	ldrb	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 809b 	beq.w	8002c7c <_svfiprintf_r+0x1b0>
 8002b46:	2300      	movs	r3, #0
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	9304      	str	r3, [sp, #16]
 8002b4e:	9307      	str	r3, [sp, #28]
 8002b50:	9205      	str	r2, [sp, #20]
 8002b52:	9306      	str	r3, [sp, #24]
 8002b54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b58:	931a      	str	r3, [sp, #104]	; 0x68
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	7821      	ldrb	r1, [r4, #0]
 8002b5e:	4850      	ldr	r0, [pc, #320]	; (8002ca0 <_svfiprintf_r+0x1d4>)
 8002b60:	f000 fa4d 	bl	8002ffe <memchr>
 8002b64:	1c67      	adds	r7, r4, #1
 8002b66:	9b04      	ldr	r3, [sp, #16]
 8002b68:	b9d8      	cbnz	r0, 8002ba2 <_svfiprintf_r+0xd6>
 8002b6a:	06d9      	lsls	r1, r3, #27
 8002b6c:	bf44      	itt	mi
 8002b6e:	2220      	movmi	r2, #32
 8002b70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b74:	071a      	lsls	r2, r3, #28
 8002b76:	bf44      	itt	mi
 8002b78:	222b      	movmi	r2, #43	; 0x2b
 8002b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b7e:	7822      	ldrb	r2, [r4, #0]
 8002b80:	2a2a      	cmp	r2, #42	; 0x2a
 8002b82:	d016      	beq.n	8002bb2 <_svfiprintf_r+0xe6>
 8002b84:	2100      	movs	r1, #0
 8002b86:	200a      	movs	r0, #10
 8002b88:	9a07      	ldr	r2, [sp, #28]
 8002b8a:	4627      	mov	r7, r4
 8002b8c:	783b      	ldrb	r3, [r7, #0]
 8002b8e:	3401      	adds	r4, #1
 8002b90:	3b30      	subs	r3, #48	; 0x30
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d950      	bls.n	8002c38 <_svfiprintf_r+0x16c>
 8002b96:	b1c9      	cbz	r1, 8002bcc <_svfiprintf_r+0x100>
 8002b98:	e011      	b.n	8002bbe <_svfiprintf_r+0xf2>
 8002b9a:	2b25      	cmp	r3, #37	; 0x25
 8002b9c:	d0c0      	beq.n	8002b20 <_svfiprintf_r+0x54>
 8002b9e:	4627      	mov	r7, r4
 8002ba0:	e7b9      	b.n	8002b16 <_svfiprintf_r+0x4a>
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	; (8002ca0 <_svfiprintf_r+0x1d4>)
 8002ba4:	463c      	mov	r4, r7
 8002ba6:	1a80      	subs	r0, r0, r2
 8002ba8:	fa0b f000 	lsl.w	r0, fp, r0
 8002bac:	4318      	orrs	r0, r3
 8002bae:	9004      	str	r0, [sp, #16]
 8002bb0:	e7d3      	b.n	8002b5a <_svfiprintf_r+0x8e>
 8002bb2:	9a03      	ldr	r2, [sp, #12]
 8002bb4:	1d11      	adds	r1, r2, #4
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	9103      	str	r1, [sp, #12]
 8002bba:	2a00      	cmp	r2, #0
 8002bbc:	db01      	blt.n	8002bc2 <_svfiprintf_r+0xf6>
 8002bbe:	9207      	str	r2, [sp, #28]
 8002bc0:	e004      	b.n	8002bcc <_svfiprintf_r+0x100>
 8002bc2:	4252      	negs	r2, r2
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	9207      	str	r2, [sp, #28]
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	783b      	ldrb	r3, [r7, #0]
 8002bce:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd0:	d10d      	bne.n	8002bee <_svfiprintf_r+0x122>
 8002bd2:	787b      	ldrb	r3, [r7, #1]
 8002bd4:	1c79      	adds	r1, r7, #1
 8002bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8002bd8:	d132      	bne.n	8002c40 <_svfiprintf_r+0x174>
 8002bda:	9b03      	ldr	r3, [sp, #12]
 8002bdc:	3702      	adds	r7, #2
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	9203      	str	r2, [sp, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bfb8      	it	lt
 8002be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bec:	9305      	str	r3, [sp, #20]
 8002bee:	4c2d      	ldr	r4, [pc, #180]	; (8002ca4 <_svfiprintf_r+0x1d8>)
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	7839      	ldrb	r1, [r7, #0]
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f000 fa02 	bl	8002ffe <memchr>
 8002bfa:	b138      	cbz	r0, 8002c0c <_svfiprintf_r+0x140>
 8002bfc:	2340      	movs	r3, #64	; 0x40
 8002bfe:	1b00      	subs	r0, r0, r4
 8002c00:	fa03 f000 	lsl.w	r0, r3, r0
 8002c04:	9b04      	ldr	r3, [sp, #16]
 8002c06:	3701      	adds	r7, #1
 8002c08:	4303      	orrs	r3, r0
 8002c0a:	9304      	str	r3, [sp, #16]
 8002c0c:	7839      	ldrb	r1, [r7, #0]
 8002c0e:	2206      	movs	r2, #6
 8002c10:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <_svfiprintf_r+0x1dc>)
 8002c12:	1c7e      	adds	r6, r7, #1
 8002c14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c18:	f000 f9f1 	bl	8002ffe <memchr>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d035      	beq.n	8002c8c <_svfiprintf_r+0x1c0>
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <_svfiprintf_r+0x1e0>)
 8002c22:	b9fb      	cbnz	r3, 8002c64 <_svfiprintf_r+0x198>
 8002c24:	9b03      	ldr	r3, [sp, #12]
 8002c26:	3307      	adds	r3, #7
 8002c28:	f023 0307 	bic.w	r3, r3, #7
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	9303      	str	r3, [sp, #12]
 8002c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c32:	444b      	add	r3, r9
 8002c34:	9309      	str	r3, [sp, #36]	; 0x24
 8002c36:	e76d      	b.n	8002b14 <_svfiprintf_r+0x48>
 8002c38:	fb00 3202 	mla	r2, r0, r2, r3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	e7a4      	b.n	8002b8a <_svfiprintf_r+0xbe>
 8002c40:	2300      	movs	r3, #0
 8002c42:	240a      	movs	r4, #10
 8002c44:	4618      	mov	r0, r3
 8002c46:	9305      	str	r3, [sp, #20]
 8002c48:	460f      	mov	r7, r1
 8002c4a:	783a      	ldrb	r2, [r7, #0]
 8002c4c:	3101      	adds	r1, #1
 8002c4e:	3a30      	subs	r2, #48	; 0x30
 8002c50:	2a09      	cmp	r2, #9
 8002c52:	d903      	bls.n	8002c5c <_svfiprintf_r+0x190>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ca      	beq.n	8002bee <_svfiprintf_r+0x122>
 8002c58:	9005      	str	r0, [sp, #20]
 8002c5a:	e7c8      	b.n	8002bee <_svfiprintf_r+0x122>
 8002c5c:	fb04 2000 	mla	r0, r4, r0, r2
 8002c60:	2301      	movs	r3, #1
 8002c62:	e7f1      	b.n	8002c48 <_svfiprintf_r+0x17c>
 8002c64:	ab03      	add	r3, sp, #12
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	462a      	mov	r2, r5
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <_svfiprintf_r+0x1e4>)
 8002c6c:	a904      	add	r1, sp, #16
 8002c6e:	4640      	mov	r0, r8
 8002c70:	f3af 8000 	nop.w
 8002c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c78:	4681      	mov	r9, r0
 8002c7a:	d1d9      	bne.n	8002c30 <_svfiprintf_r+0x164>
 8002c7c:	89ab      	ldrh	r3, [r5, #12]
 8002c7e:	065b      	lsls	r3, r3, #25
 8002c80:	f53f af39 	bmi.w	8002af6 <_svfiprintf_r+0x2a>
 8002c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c86:	b01d      	add	sp, #116	; 0x74
 8002c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c8c:	ab03      	add	r3, sp, #12
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	462a      	mov	r2, r5
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <_svfiprintf_r+0x1e4>)
 8002c94:	a904      	add	r1, sp, #16
 8002c96:	4640      	mov	r0, r8
 8002c98:	f000 f884 	bl	8002da4 <_printf_i>
 8002c9c:	e7ea      	b.n	8002c74 <_svfiprintf_r+0x1a8>
 8002c9e:	bf00      	nop
 8002ca0:	080034f9 	.word	0x080034f9
 8002ca4:	080034ff 	.word	0x080034ff
 8002ca8:	08003503 	.word	0x08003503
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	08002a17 	.word	0x08002a17

08002cb4 <_printf_common>:
 8002cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb8:	4691      	mov	r9, r2
 8002cba:	461f      	mov	r7, r3
 8002cbc:	688a      	ldr	r2, [r1, #8]
 8002cbe:	690b      	ldr	r3, [r1, #16]
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bfb8      	it	lt
 8002cc6:	4613      	movlt	r3, r2
 8002cc8:	f8c9 3000 	str.w	r3, [r9]
 8002ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd6:	b112      	cbz	r2, 8002cde <_printf_common+0x2a>
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8c9 3000 	str.w	r3, [r9]
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	0699      	lsls	r1, r3, #26
 8002ce2:	bf42      	ittt	mi
 8002ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ce8:	3302      	addmi	r3, #2
 8002cea:	f8c9 3000 	strmi.w	r3, [r9]
 8002cee:	6825      	ldr	r5, [r4, #0]
 8002cf0:	f015 0506 	ands.w	r5, r5, #6
 8002cf4:	d107      	bne.n	8002d06 <_printf_common+0x52>
 8002cf6:	f104 0a19 	add.w	sl, r4, #25
 8002cfa:	68e3      	ldr	r3, [r4, #12]
 8002cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	429d      	cmp	r5, r3
 8002d04:	db2a      	blt.n	8002d5c <_printf_common+0xa8>
 8002d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	3300      	adds	r3, #0
 8002d0e:	bf18      	it	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	0692      	lsls	r2, r2, #26
 8002d14:	d42f      	bmi.n	8002d76 <_printf_common+0xc2>
 8002d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d1a:	4639      	mov	r1, r7
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	47c0      	blx	r8
 8002d20:	3001      	adds	r0, #1
 8002d22:	d022      	beq.n	8002d6a <_printf_common+0xb6>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	68e5      	ldr	r5, [r4, #12]
 8002d28:	f003 0306 	and.w	r3, r3, #6
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	bf18      	it	ne
 8002d30:	2500      	movne	r5, #0
 8002d32:	f8d9 2000 	ldr.w	r2, [r9]
 8002d36:	f04f 0900 	mov.w	r9, #0
 8002d3a:	bf08      	it	eq
 8002d3c:	1aad      	subeq	r5, r5, r2
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	6922      	ldr	r2, [r4, #16]
 8002d42:	bf08      	it	eq
 8002d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bfc4      	itt	gt
 8002d4c:	1a9b      	subgt	r3, r3, r2
 8002d4e:	18ed      	addgt	r5, r5, r3
 8002d50:	341a      	adds	r4, #26
 8002d52:	454d      	cmp	r5, r9
 8002d54:	d11b      	bne.n	8002d8e <_printf_common+0xda>
 8002d56:	2000      	movs	r0, #0
 8002d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4652      	mov	r2, sl
 8002d60:	4639      	mov	r1, r7
 8002d62:	4630      	mov	r0, r6
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d103      	bne.n	8002d72 <_printf_common+0xbe>
 8002d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d72:	3501      	adds	r5, #1
 8002d74:	e7c1      	b.n	8002cfa <_printf_common+0x46>
 8002d76:	2030      	movs	r0, #48	; 0x30
 8002d78:	18e1      	adds	r1, r4, r3
 8002d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d84:	4422      	add	r2, r4
 8002d86:	3302      	adds	r3, #2
 8002d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d8c:	e7c3      	b.n	8002d16 <_printf_common+0x62>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4622      	mov	r2, r4
 8002d92:	4639      	mov	r1, r7
 8002d94:	4630      	mov	r0, r6
 8002d96:	47c0      	blx	r8
 8002d98:	3001      	adds	r0, #1
 8002d9a:	d0e6      	beq.n	8002d6a <_printf_common+0xb6>
 8002d9c:	f109 0901 	add.w	r9, r9, #1
 8002da0:	e7d7      	b.n	8002d52 <_printf_common+0x9e>
	...

08002da4 <_printf_i>:
 8002da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002da8:	4617      	mov	r7, r2
 8002daa:	7e0a      	ldrb	r2, [r1, #24]
 8002dac:	b085      	sub	sp, #20
 8002dae:	2a6e      	cmp	r2, #110	; 0x6e
 8002db0:	4698      	mov	r8, r3
 8002db2:	4606      	mov	r6, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002db8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002dbc:	f000 80bc 	beq.w	8002f38 <_printf_i+0x194>
 8002dc0:	d81a      	bhi.n	8002df8 <_printf_i+0x54>
 8002dc2:	2a63      	cmp	r2, #99	; 0x63
 8002dc4:	d02e      	beq.n	8002e24 <_printf_i+0x80>
 8002dc6:	d80a      	bhi.n	8002dde <_printf_i+0x3a>
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	f000 80c8 	beq.w	8002f5e <_printf_i+0x1ba>
 8002dce:	2a58      	cmp	r2, #88	; 0x58
 8002dd0:	f000 808a 	beq.w	8002ee8 <_printf_i+0x144>
 8002dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002ddc:	e02a      	b.n	8002e34 <_printf_i+0x90>
 8002dde:	2a64      	cmp	r2, #100	; 0x64
 8002de0:	d001      	beq.n	8002de6 <_printf_i+0x42>
 8002de2:	2a69      	cmp	r2, #105	; 0x69
 8002de4:	d1f6      	bne.n	8002dd4 <_printf_i+0x30>
 8002de6:	6821      	ldr	r1, [r4, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002dee:	d023      	beq.n	8002e38 <_printf_i+0x94>
 8002df0:	1d11      	adds	r1, r2, #4
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	e027      	b.n	8002e48 <_printf_i+0xa4>
 8002df8:	2a73      	cmp	r2, #115	; 0x73
 8002dfa:	f000 80b4 	beq.w	8002f66 <_printf_i+0x1c2>
 8002dfe:	d808      	bhi.n	8002e12 <_printf_i+0x6e>
 8002e00:	2a6f      	cmp	r2, #111	; 0x6f
 8002e02:	d02a      	beq.n	8002e5a <_printf_i+0xb6>
 8002e04:	2a70      	cmp	r2, #112	; 0x70
 8002e06:	d1e5      	bne.n	8002dd4 <_printf_i+0x30>
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	600a      	str	r2, [r1, #0]
 8002e10:	e003      	b.n	8002e1a <_printf_i+0x76>
 8002e12:	2a75      	cmp	r2, #117	; 0x75
 8002e14:	d021      	beq.n	8002e5a <_printf_i+0xb6>
 8002e16:	2a78      	cmp	r2, #120	; 0x78
 8002e18:	d1dc      	bne.n	8002dd4 <_printf_i+0x30>
 8002e1a:	2278      	movs	r2, #120	; 0x78
 8002e1c:	496f      	ldr	r1, [pc, #444]	; (8002fdc <_printf_i+0x238>)
 8002e1e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002e22:	e064      	b.n	8002eee <_printf_i+0x14a>
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002e2a:	1d11      	adds	r1, r2, #4
 8002e2c:	6019      	str	r1, [r3, #0]
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a3      	b.n	8002f80 <_printf_i+0x1dc>
 8002e38:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e3c:	f102 0104 	add.w	r1, r2, #4
 8002e40:	6019      	str	r1, [r3, #0]
 8002e42:	d0d7      	beq.n	8002df4 <_printf_i+0x50>
 8002e44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da03      	bge.n	8002e54 <_printf_i+0xb0>
 8002e4c:	222d      	movs	r2, #45	; 0x2d
 8002e4e:	425b      	negs	r3, r3
 8002e50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e54:	4962      	ldr	r1, [pc, #392]	; (8002fe0 <_printf_i+0x23c>)
 8002e56:	220a      	movs	r2, #10
 8002e58:	e017      	b.n	8002e8a <_printf_i+0xe6>
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e62:	d003      	beq.n	8002e6c <_printf_i+0xc8>
 8002e64:	1d08      	adds	r0, r1, #4
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	680b      	ldr	r3, [r1, #0]
 8002e6a:	e006      	b.n	8002e7a <_printf_i+0xd6>
 8002e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e70:	f101 0004 	add.w	r0, r1, #4
 8002e74:	6018      	str	r0, [r3, #0]
 8002e76:	d0f7      	beq.n	8002e68 <_printf_i+0xc4>
 8002e78:	880b      	ldrh	r3, [r1, #0]
 8002e7a:	2a6f      	cmp	r2, #111	; 0x6f
 8002e7c:	bf14      	ite	ne
 8002e7e:	220a      	movne	r2, #10
 8002e80:	2208      	moveq	r2, #8
 8002e82:	4957      	ldr	r1, [pc, #348]	; (8002fe0 <_printf_i+0x23c>)
 8002e84:	2000      	movs	r0, #0
 8002e86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002e8a:	6865      	ldr	r5, [r4, #4]
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	60a5      	str	r5, [r4, #8]
 8002e90:	f2c0 809c 	blt.w	8002fcc <_printf_i+0x228>
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f020 0004 	bic.w	r0, r0, #4
 8002e9a:	6020      	str	r0, [r4, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13f      	bne.n	8002f20 <_printf_i+0x17c>
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	f040 8095 	bne.w	8002fd0 <_printf_i+0x22c>
 8002ea6:	4675      	mov	r5, lr
 8002ea8:	2a08      	cmp	r2, #8
 8002eaa:	d10b      	bne.n	8002ec4 <_printf_i+0x120>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	07da      	lsls	r2, r3, #31
 8002eb0:	d508      	bpl.n	8002ec4 <_printf_i+0x120>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	6862      	ldr	r2, [r4, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bfde      	ittt	le
 8002eba:	2330      	movle	r3, #48	; 0x30
 8002ebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ec4:	ebae 0305 	sub.w	r3, lr, r5
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	f8cd 8000 	str.w	r8, [sp]
 8002ece:	463b      	mov	r3, r7
 8002ed0:	aa03      	add	r2, sp, #12
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7ff feed 	bl	8002cb4 <_printf_common>
 8002eda:	3001      	adds	r0, #1
 8002edc:	d155      	bne.n	8002f8a <_printf_i+0x1e6>
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee2:	b005      	add	sp, #20
 8002ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ee8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002eec:	493c      	ldr	r1, [pc, #240]	; (8002fe0 <_printf_i+0x23c>)
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ef6:	f100 0504 	add.w	r5, r0, #4
 8002efa:	601d      	str	r5, [r3, #0]
 8002efc:	d001      	beq.n	8002f02 <_printf_i+0x15e>
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	e002      	b.n	8002f08 <_printf_i+0x164>
 8002f02:	0655      	lsls	r5, r2, #25
 8002f04:	d5fb      	bpl.n	8002efe <_printf_i+0x15a>
 8002f06:	8803      	ldrh	r3, [r0, #0]
 8002f08:	07d0      	lsls	r0, r2, #31
 8002f0a:	bf44      	itt	mi
 8002f0c:	f042 0220 	orrmi.w	r2, r2, #32
 8002f10:	6022      	strmi	r2, [r4, #0]
 8002f12:	b91b      	cbnz	r3, 8002f1c <_printf_i+0x178>
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	f022 0220 	bic.w	r2, r2, #32
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	e7b1      	b.n	8002e84 <_printf_i+0xe0>
 8002f20:	4675      	mov	r5, lr
 8002f22:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f26:	fb02 3310 	mls	r3, r2, r0, r3
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f30:	4603      	mov	r3, r0
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d1f5      	bne.n	8002f22 <_printf_i+0x17e>
 8002f36:	e7b7      	b.n	8002ea8 <_printf_i+0x104>
 8002f38:	6808      	ldr	r0, [r1, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f40:	6949      	ldr	r1, [r1, #20]
 8002f42:	d004      	beq.n	8002f4e <_printf_i+0x1aa>
 8002f44:	1d10      	adds	r0, r2, #4
 8002f46:	6018      	str	r0, [r3, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	e007      	b.n	8002f5e <_printf_i+0x1ba>
 8002f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f52:	f102 0004 	add.w	r0, r2, #4
 8002f56:	6018      	str	r0, [r3, #0]
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	d0f6      	beq.n	8002f4a <_printf_i+0x1a6>
 8002f5c:	8019      	strh	r1, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	4675      	mov	r5, lr
 8002f62:	6123      	str	r3, [r4, #16]
 8002f64:	e7b1      	b.n	8002eca <_printf_i+0x126>
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	1d11      	adds	r1, r2, #4
 8002f6a:	6019      	str	r1, [r3, #0]
 8002f6c:	6815      	ldr	r5, [r2, #0]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	6862      	ldr	r2, [r4, #4]
 8002f72:	4628      	mov	r0, r5
 8002f74:	f000 f843 	bl	8002ffe <memchr>
 8002f78:	b108      	cbz	r0, 8002f7e <_printf_i+0x1da>
 8002f7a:	1b40      	subs	r0, r0, r5
 8002f7c:	6060      	str	r0, [r4, #4]
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	2300      	movs	r3, #0
 8002f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f88:	e79f      	b.n	8002eca <_printf_i+0x126>
 8002f8a:	6923      	ldr	r3, [r4, #16]
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d0a2      	beq.n	8002ede <_printf_i+0x13a>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	079b      	lsls	r3, r3, #30
 8002f9c:	d507      	bpl.n	8002fae <_printf_i+0x20a>
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	f104 0919 	add.w	r9, r4, #25
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	9a03      	ldr	r2, [sp, #12]
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	429d      	cmp	r5, r3
 8002fac:	db05      	blt.n	8002fba <_printf_i+0x216>
 8002fae:	68e0      	ldr	r0, [r4, #12]
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	4298      	cmp	r0, r3
 8002fb4:	bfb8      	it	lt
 8002fb6:	4618      	movlt	r0, r3
 8002fb8:	e793      	b.n	8002ee2 <_printf_i+0x13e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	47c0      	blx	r8
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d08a      	beq.n	8002ede <_printf_i+0x13a>
 8002fc8:	3501      	adds	r5, #1
 8002fca:	e7eb      	b.n	8002fa4 <_printf_i+0x200>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1a7      	bne.n	8002f20 <_printf_i+0x17c>
 8002fd0:	780b      	ldrb	r3, [r1, #0]
 8002fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fda:	e765      	b.n	8002ea8 <_printf_i+0x104>
 8002fdc:	0800351b 	.word	0x0800351b
 8002fe0:	0800350a 	.word	0x0800350a

08002fe4 <__ascii_wctomb>:
 8002fe4:	b149      	cbz	r1, 8002ffa <__ascii_wctomb+0x16>
 8002fe6:	2aff      	cmp	r2, #255	; 0xff
 8002fe8:	bf8b      	itete	hi
 8002fea:	238a      	movhi	r3, #138	; 0x8a
 8002fec:	700a      	strbls	r2, [r1, #0]
 8002fee:	6003      	strhi	r3, [r0, #0]
 8002ff0:	2001      	movls	r0, #1
 8002ff2:	bf88      	it	hi
 8002ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8002ff8:	4770      	bx	lr
 8002ffa:	4608      	mov	r0, r1
 8002ffc:	4770      	bx	lr

08002ffe <memchr>:
 8002ffe:	b510      	push	{r4, lr}
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	4402      	add	r2, r0
 8003004:	4290      	cmp	r0, r2
 8003006:	4603      	mov	r3, r0
 8003008:	d101      	bne.n	800300e <memchr+0x10>
 800300a:	2000      	movs	r0, #0
 800300c:	bd10      	pop	{r4, pc}
 800300e:	781c      	ldrb	r4, [r3, #0]
 8003010:	3001      	adds	r0, #1
 8003012:	428c      	cmp	r4, r1
 8003014:	d1f6      	bne.n	8003004 <memchr+0x6>
 8003016:	4618      	mov	r0, r3
 8003018:	bd10      	pop	{r4, pc}

0800301a <memcpy>:
 800301a:	b510      	push	{r4, lr}
 800301c:	1e43      	subs	r3, r0, #1
 800301e:	440a      	add	r2, r1
 8003020:	4291      	cmp	r1, r2
 8003022:	d100      	bne.n	8003026 <memcpy+0xc>
 8003024:	bd10      	pop	{r4, pc}
 8003026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800302a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800302e:	e7f7      	b.n	8003020 <memcpy+0x6>

08003030 <memmove>:
 8003030:	4288      	cmp	r0, r1
 8003032:	b510      	push	{r4, lr}
 8003034:	eb01 0302 	add.w	r3, r1, r2
 8003038:	d803      	bhi.n	8003042 <memmove+0x12>
 800303a:	1e42      	subs	r2, r0, #1
 800303c:	4299      	cmp	r1, r3
 800303e:	d10c      	bne.n	800305a <memmove+0x2a>
 8003040:	bd10      	pop	{r4, pc}
 8003042:	4298      	cmp	r0, r3
 8003044:	d2f9      	bcs.n	800303a <memmove+0xa>
 8003046:	1881      	adds	r1, r0, r2
 8003048:	1ad2      	subs	r2, r2, r3
 800304a:	42d3      	cmn	r3, r2
 800304c:	d100      	bne.n	8003050 <memmove+0x20>
 800304e:	bd10      	pop	{r4, pc}
 8003050:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003054:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003058:	e7f7      	b.n	800304a <memmove+0x1a>
 800305a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003062:	e7eb      	b.n	800303c <memmove+0xc>

08003064 <_free_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4605      	mov	r5, r0
 8003068:	2900      	cmp	r1, #0
 800306a:	d043      	beq.n	80030f4 <_free_r+0x90>
 800306c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003070:	1f0c      	subs	r4, r1, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	bfb8      	it	lt
 8003076:	18e4      	addlt	r4, r4, r3
 8003078:	f000 f8d4 	bl	8003224 <__malloc_lock>
 800307c:	4a1e      	ldr	r2, [pc, #120]	; (80030f8 <_free_r+0x94>)
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	4610      	mov	r0, r2
 8003082:	b933      	cbnz	r3, 8003092 <_free_r+0x2e>
 8003084:	6063      	str	r3, [r4, #4]
 8003086:	6014      	str	r4, [r2, #0]
 8003088:	4628      	mov	r0, r5
 800308a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800308e:	f000 b8ca 	b.w	8003226 <__malloc_unlock>
 8003092:	42a3      	cmp	r3, r4
 8003094:	d90b      	bls.n	80030ae <_free_r+0x4a>
 8003096:	6821      	ldr	r1, [r4, #0]
 8003098:	1862      	adds	r2, r4, r1
 800309a:	4293      	cmp	r3, r2
 800309c:	bf01      	itttt	eq
 800309e:	681a      	ldreq	r2, [r3, #0]
 80030a0:	685b      	ldreq	r3, [r3, #4]
 80030a2:	1852      	addeq	r2, r2, r1
 80030a4:	6022      	streq	r2, [r4, #0]
 80030a6:	6063      	str	r3, [r4, #4]
 80030a8:	6004      	str	r4, [r0, #0]
 80030aa:	e7ed      	b.n	8003088 <_free_r+0x24>
 80030ac:	4613      	mov	r3, r2
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	b10a      	cbz	r2, 80030b6 <_free_r+0x52>
 80030b2:	42a2      	cmp	r2, r4
 80030b4:	d9fa      	bls.n	80030ac <_free_r+0x48>
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	1858      	adds	r0, r3, r1
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d10b      	bne.n	80030d6 <_free_r+0x72>
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	4401      	add	r1, r0
 80030c2:	1858      	adds	r0, r3, r1
 80030c4:	4282      	cmp	r2, r0
 80030c6:	6019      	str	r1, [r3, #0]
 80030c8:	d1de      	bne.n	8003088 <_free_r+0x24>
 80030ca:	6810      	ldr	r0, [r2, #0]
 80030cc:	6852      	ldr	r2, [r2, #4]
 80030ce:	4401      	add	r1, r0
 80030d0:	6019      	str	r1, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	e7d8      	b.n	8003088 <_free_r+0x24>
 80030d6:	d902      	bls.n	80030de <_free_r+0x7a>
 80030d8:	230c      	movs	r3, #12
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	e7d4      	b.n	8003088 <_free_r+0x24>
 80030de:	6820      	ldr	r0, [r4, #0]
 80030e0:	1821      	adds	r1, r4, r0
 80030e2:	428a      	cmp	r2, r1
 80030e4:	bf01      	itttt	eq
 80030e6:	6811      	ldreq	r1, [r2, #0]
 80030e8:	6852      	ldreq	r2, [r2, #4]
 80030ea:	1809      	addeq	r1, r1, r0
 80030ec:	6021      	streq	r1, [r4, #0]
 80030ee:	6062      	str	r2, [r4, #4]
 80030f0:	605c      	str	r4, [r3, #4]
 80030f2:	e7c9      	b.n	8003088 <_free_r+0x24>
 80030f4:	bd38      	pop	{r3, r4, r5, pc}
 80030f6:	bf00      	nop
 80030f8:	20000254 	.word	0x20000254

080030fc <_malloc_r>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	1ccd      	adds	r5, r1, #3
 8003100:	f025 0503 	bic.w	r5, r5, #3
 8003104:	3508      	adds	r5, #8
 8003106:	2d0c      	cmp	r5, #12
 8003108:	bf38      	it	cc
 800310a:	250c      	movcc	r5, #12
 800310c:	2d00      	cmp	r5, #0
 800310e:	4606      	mov	r6, r0
 8003110:	db01      	blt.n	8003116 <_malloc_r+0x1a>
 8003112:	42a9      	cmp	r1, r5
 8003114:	d903      	bls.n	800311e <_malloc_r+0x22>
 8003116:	230c      	movs	r3, #12
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	2000      	movs	r0, #0
 800311c:	bd70      	pop	{r4, r5, r6, pc}
 800311e:	f000 f881 	bl	8003224 <__malloc_lock>
 8003122:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <_malloc_r+0xb4>)
 8003124:	6814      	ldr	r4, [r2, #0]
 8003126:	4621      	mov	r1, r4
 8003128:	b991      	cbnz	r1, 8003150 <_malloc_r+0x54>
 800312a:	4c22      	ldr	r4, [pc, #136]	; (80031b4 <_malloc_r+0xb8>)
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	b91b      	cbnz	r3, 8003138 <_malloc_r+0x3c>
 8003130:	4630      	mov	r0, r6
 8003132:	f000 f867 	bl	8003204 <_sbrk_r>
 8003136:	6020      	str	r0, [r4, #0]
 8003138:	4629      	mov	r1, r5
 800313a:	4630      	mov	r0, r6
 800313c:	f000 f862 	bl	8003204 <_sbrk_r>
 8003140:	1c43      	adds	r3, r0, #1
 8003142:	d126      	bne.n	8003192 <_malloc_r+0x96>
 8003144:	230c      	movs	r3, #12
 8003146:	4630      	mov	r0, r6
 8003148:	6033      	str	r3, [r6, #0]
 800314a:	f000 f86c 	bl	8003226 <__malloc_unlock>
 800314e:	e7e4      	b.n	800311a <_malloc_r+0x1e>
 8003150:	680b      	ldr	r3, [r1, #0]
 8003152:	1b5b      	subs	r3, r3, r5
 8003154:	d41a      	bmi.n	800318c <_malloc_r+0x90>
 8003156:	2b0b      	cmp	r3, #11
 8003158:	d90f      	bls.n	800317a <_malloc_r+0x7e>
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	18cc      	adds	r4, r1, r3
 800315e:	50cd      	str	r5, [r1, r3]
 8003160:	4630      	mov	r0, r6
 8003162:	f000 f860 	bl	8003226 <__malloc_unlock>
 8003166:	f104 000b 	add.w	r0, r4, #11
 800316a:	1d23      	adds	r3, r4, #4
 800316c:	f020 0007 	bic.w	r0, r0, #7
 8003170:	1ac3      	subs	r3, r0, r3
 8003172:	d01b      	beq.n	80031ac <_malloc_r+0xb0>
 8003174:	425a      	negs	r2, r3
 8003176:	50e2      	str	r2, [r4, r3]
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	428c      	cmp	r4, r1
 800317c:	bf0b      	itete	eq
 800317e:	6863      	ldreq	r3, [r4, #4]
 8003180:	684b      	ldrne	r3, [r1, #4]
 8003182:	6013      	streq	r3, [r2, #0]
 8003184:	6063      	strne	r3, [r4, #4]
 8003186:	bf18      	it	ne
 8003188:	460c      	movne	r4, r1
 800318a:	e7e9      	b.n	8003160 <_malloc_r+0x64>
 800318c:	460c      	mov	r4, r1
 800318e:	6849      	ldr	r1, [r1, #4]
 8003190:	e7ca      	b.n	8003128 <_malloc_r+0x2c>
 8003192:	1cc4      	adds	r4, r0, #3
 8003194:	f024 0403 	bic.w	r4, r4, #3
 8003198:	42a0      	cmp	r0, r4
 800319a:	d005      	beq.n	80031a8 <_malloc_r+0xac>
 800319c:	1a21      	subs	r1, r4, r0
 800319e:	4630      	mov	r0, r6
 80031a0:	f000 f830 	bl	8003204 <_sbrk_r>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d0cd      	beq.n	8003144 <_malloc_r+0x48>
 80031a8:	6025      	str	r5, [r4, #0]
 80031aa:	e7d9      	b.n	8003160 <_malloc_r+0x64>
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	bf00      	nop
 80031b0:	20000254 	.word	0x20000254
 80031b4:	20000258 	.word	0x20000258

080031b8 <_realloc_r>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	4607      	mov	r7, r0
 80031bc:	4614      	mov	r4, r2
 80031be:	460e      	mov	r6, r1
 80031c0:	b921      	cbnz	r1, 80031cc <_realloc_r+0x14>
 80031c2:	4611      	mov	r1, r2
 80031c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031c8:	f7ff bf98 	b.w	80030fc <_malloc_r>
 80031cc:	b922      	cbnz	r2, 80031d8 <_realloc_r+0x20>
 80031ce:	f7ff ff49 	bl	8003064 <_free_r>
 80031d2:	4625      	mov	r5, r4
 80031d4:	4628      	mov	r0, r5
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d8:	f000 f826 	bl	8003228 <_malloc_usable_size_r>
 80031dc:	4284      	cmp	r4, r0
 80031de:	d90f      	bls.n	8003200 <_realloc_r+0x48>
 80031e0:	4621      	mov	r1, r4
 80031e2:	4638      	mov	r0, r7
 80031e4:	f7ff ff8a 	bl	80030fc <_malloc_r>
 80031e8:	4605      	mov	r5, r0
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d0f2      	beq.n	80031d4 <_realloc_r+0x1c>
 80031ee:	4631      	mov	r1, r6
 80031f0:	4622      	mov	r2, r4
 80031f2:	f7ff ff12 	bl	800301a <memcpy>
 80031f6:	4631      	mov	r1, r6
 80031f8:	4638      	mov	r0, r7
 80031fa:	f7ff ff33 	bl	8003064 <_free_r>
 80031fe:	e7e9      	b.n	80031d4 <_realloc_r+0x1c>
 8003200:	4635      	mov	r5, r6
 8003202:	e7e7      	b.n	80031d4 <_realloc_r+0x1c>

08003204 <_sbrk_r>:
 8003204:	b538      	push	{r3, r4, r5, lr}
 8003206:	2300      	movs	r3, #0
 8003208:	4c05      	ldr	r4, [pc, #20]	; (8003220 <_sbrk_r+0x1c>)
 800320a:	4605      	mov	r5, r0
 800320c:	4608      	mov	r0, r1
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	f000 f814 	bl	800323c <_sbrk>
 8003214:	1c43      	adds	r3, r0, #1
 8003216:	d102      	bne.n	800321e <_sbrk_r+0x1a>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	b103      	cbz	r3, 800321e <_sbrk_r+0x1a>
 800321c:	602b      	str	r3, [r5, #0]
 800321e:	bd38      	pop	{r3, r4, r5, pc}
 8003220:	200005b8 	.word	0x200005b8

08003224 <__malloc_lock>:
 8003224:	4770      	bx	lr

08003226 <__malloc_unlock>:
 8003226:	4770      	bx	lr

08003228 <_malloc_usable_size_r>:
 8003228:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800322c:	2800      	cmp	r0, #0
 800322e:	f1a0 0004 	sub.w	r0, r0, #4
 8003232:	bfbc      	itt	lt
 8003234:	580b      	ldrlt	r3, [r1, r0]
 8003236:	18c0      	addlt	r0, r0, r3
 8003238:	4770      	bx	lr
	...

0800323c <_sbrk>:
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <_sbrk+0x14>)
 800323e:	4602      	mov	r2, r0
 8003240:	6819      	ldr	r1, [r3, #0]
 8003242:	b909      	cbnz	r1, 8003248 <_sbrk+0xc>
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <_sbrk+0x18>)
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	4402      	add	r2, r0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	4770      	bx	lr
 8003250:	2000025c 	.word	0x2000025c
 8003254:	200005bc 	.word	0x200005bc

08003258 <_init>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr

08003264 <_fini>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr
