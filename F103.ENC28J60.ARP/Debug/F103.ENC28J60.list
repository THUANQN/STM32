
F103.ENC28J60.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08002648  08002648  00012648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  080027f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000030c  2000007c  08002870  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000388  08002870  00020388  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011e53  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027d4  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004695  00000000  00000000  000346cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007d0  00000000  00000000  00038d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000960  00000000  00000000  00039538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c34  00000000  00000000  00039e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029b9  00000000  00000000  0003eacc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00041485  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000195c  00000000  00000000  00041504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002630 	.word	0x08002630

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002630 	.word	0x08002630

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000014 	.word	0x20000014
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fcbe 	bl	8001b3c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000e8 	.word	0x200000e8
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000e8 	.word	0x200000e8

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	bf0c      	ite	eq
 80002e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002ec:	f022 0204 	bicne.w	r2, r2, #4
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002f8:	4770      	bx	lr

080002fa <HAL_SYSTICK_IRQHandler>:
{
 80002fa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002fc:	f7ff fffc 	bl	80002f8 <HAL_SYSTICK_Callback>
 8000300:	bd08      	pop	{r3, pc}
	...

08000304 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000304:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000308:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800030a:	2b02      	cmp	r3, #2
 800030c:	d003      	beq.n	8000316 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800030e:	2304      	movs	r3, #4
 8000310:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000316:	6803      	ldr	r3, [r0, #0]
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	f022 020e 	bic.w	r2, r2, #14
 800031e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	f022 0201 	bic.w	r2, r2, #1
 8000326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000328:	4a18      	ldr	r2, [pc, #96]	; (800038c <HAL_DMA_Abort_IT+0x88>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d01f      	beq.n	800036e <HAL_DMA_Abort_IT+0x6a>
 800032e:	3214      	adds	r2, #20
 8000330:	4293      	cmp	r3, r2
 8000332:	d01e      	beq.n	8000372 <HAL_DMA_Abort_IT+0x6e>
 8000334:	3214      	adds	r2, #20
 8000336:	4293      	cmp	r3, r2
 8000338:	d01d      	beq.n	8000376 <HAL_DMA_Abort_IT+0x72>
 800033a:	3214      	adds	r2, #20
 800033c:	4293      	cmp	r3, r2
 800033e:	d01d      	beq.n	800037c <HAL_DMA_Abort_IT+0x78>
 8000340:	3214      	adds	r2, #20
 8000342:	4293      	cmp	r3, r2
 8000344:	d01d      	beq.n	8000382 <HAL_DMA_Abort_IT+0x7e>
 8000346:	3214      	adds	r2, #20
 8000348:	4293      	cmp	r3, r2
 800034a:	bf0c      	ite	eq
 800034c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000350:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000356:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000358:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800035a:	2301      	movs	r3, #1
 800035c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000360:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000362:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000366:	b17b      	cbz	r3, 8000388 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000368:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800036a:	4620      	mov	r0, r4
 800036c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800036e:	2301      	movs	r3, #1
 8000370:	e7f0      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000372:	2310      	movs	r3, #16
 8000374:	e7ee      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800037a:	e7eb      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 800037c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000380:	e7e8      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
 8000382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000386:	e7e5      	b.n	8000354 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000388:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800038a:	bd10      	pop	{r4, pc}
 800038c:	40020008 	.word	0x40020008
 8000390:	40020000 	.word	0x40020000

08000394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000398:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800039a:	4616      	mov	r6, r2
 800039c:	4b65      	ldr	r3, [pc, #404]	; (8000534 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800039e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000544 <HAL_GPIO_Init+0x1b0>
 80003a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000548 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80003a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	d17f      	bne.n	80004b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80003b8:	684d      	ldr	r5, [r1, #4]
 80003ba:	2d12      	cmp	r5, #18
 80003bc:	f000 80af 	beq.w	800051e <HAL_GPIO_Init+0x18a>
 80003c0:	f200 8088 	bhi.w	80004d4 <HAL_GPIO_Init+0x140>
 80003c4:	2d02      	cmp	r5, #2
 80003c6:	f000 80a7 	beq.w	8000518 <HAL_GPIO_Init+0x184>
 80003ca:	d87c      	bhi.n	80004c6 <HAL_GPIO_Init+0x132>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	f000 808e 	beq.w	80004ee <HAL_GPIO_Init+0x15a>
 80003d2:	2d01      	cmp	r5, #1
 80003d4:	f000 809e 	beq.w	8000514 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	bf93      	iteet	ls
 80003e0:	4682      	movls	sl, r0
 80003e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003e6:	3d08      	subhi	r5, #8
 80003e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ec:	bf92      	itee	ls
 80003ee:	00b5      	lslls	r5, r6, #2
 80003f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f6:	fa09 f805 	lsl.w	r8, r9, r5
 80003fa:	ea2b 0808 	bic.w	r8, fp, r8
 80003fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000402:	bf88      	it	hi
 8000404:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000408:	ea48 0505 	orr.w	r5, r8, r5
 800040c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000410:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000414:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000418:	d04e      	beq.n	80004b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4d47      	ldr	r5, [pc, #284]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041c:	4f46      	ldr	r7, [pc, #280]	; (8000538 <HAL_GPIO_Init+0x1a4>)
 800041e:	69ad      	ldr	r5, [r5, #24]
 8000420:	f026 0803 	bic.w	r8, r6, #3
 8000424:	f045 0501 	orr.w	r5, r5, #1
 8000428:	61bd      	str	r5, [r7, #24]
 800042a:	69bd      	ldr	r5, [r7, #24]
 800042c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000430:	f005 0501 	and.w	r5, r5, #1
 8000434:	9501      	str	r5, [sp, #4]
 8000436:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000440:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000444:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000448:	fa09 f90b 	lsl.w	r9, r9, fp
 800044c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000450:	4d3a      	ldr	r5, [pc, #232]	; (800053c <HAL_GPIO_Init+0x1a8>)
 8000452:	42a8      	cmp	r0, r5
 8000454:	d068      	beq.n	8000528 <HAL_GPIO_Init+0x194>
 8000456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045a:	42a8      	cmp	r0, r5
 800045c:	d066      	beq.n	800052c <HAL_GPIO_Init+0x198>
 800045e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000462:	42a8      	cmp	r0, r5
 8000464:	d064      	beq.n	8000530 <HAL_GPIO_Init+0x19c>
 8000466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046a:	42a8      	cmp	r0, r5
 800046c:	bf0c      	ite	eq
 800046e:	2503      	moveq	r5, #3
 8000470:	2504      	movne	r5, #4
 8000472:	fa05 f50b 	lsl.w	r5, r5, fp
 8000476:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800047a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800047e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000480:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000484:	bf14      	ite	ne
 8000486:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000488:	43a5      	biceq	r5, r4
 800048a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800048c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000492:	bf14      	ite	ne
 8000494:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000496:	43a5      	biceq	r5, r4
 8000498:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800049a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a0:	bf14      	ite	ne
 80004a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004a4:	43a5      	biceq	r5, r4
 80004a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004ae:	bf14      	ite	ne
 80004b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004b2:	ea25 0404 	biceq.w	r4, r5, r4
 80004b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004b8:	3601      	adds	r6, #1
 80004ba:	2e10      	cmp	r6, #16
 80004bc:	f47f af73 	bne.w	80003a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80004c0:	b003      	add	sp, #12
 80004c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004c6:	2d03      	cmp	r5, #3
 80004c8:	d022      	beq.n	8000510 <HAL_GPIO_Init+0x17c>
 80004ca:	2d11      	cmp	r5, #17
 80004cc:	d184      	bne.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ce:	68ca      	ldr	r2, [r1, #12]
 80004d0:	3204      	adds	r2, #4
          break;
 80004d2:	e781      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004d4:	4f1a      	ldr	r7, [pc, #104]	; (8000540 <HAL_GPIO_Init+0x1ac>)
 80004d6:	42bd      	cmp	r5, r7
 80004d8:	d009      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004da:	d812      	bhi.n	8000502 <HAL_GPIO_Init+0x16e>
 80004dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800054c <HAL_GPIO_Init+0x1b8>
 80004e0:	454d      	cmp	r5, r9
 80004e2:	d004      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 80004e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004e8:	454d      	cmp	r5, r9
 80004ea:	f47f af75 	bne.w	80003d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ee:	688a      	ldr	r2, [r1, #8]
 80004f0:	b1c2      	cbz	r2, 8000524 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004f4:	bf0c      	ite	eq
 80004f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fe:	2208      	movs	r2, #8
 8000500:	e76a      	b.n	80003d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000502:	4575      	cmp	r5, lr
 8000504:	d0f3      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 8000506:	4565      	cmp	r5, ip
 8000508:	d0f1      	beq.n	80004ee <HAL_GPIO_Init+0x15a>
 800050a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000550 <HAL_GPIO_Init+0x1bc>
 800050e:	e7eb      	b.n	80004e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000510:	2200      	movs	r2, #0
 8000512:	e761      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000514:	68ca      	ldr	r2, [r1, #12]
          break;
 8000516:	e75f      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000518:	68ca      	ldr	r2, [r1, #12]
 800051a:	3208      	adds	r2, #8
          break;
 800051c:	e75c      	b.n	80003d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051e:	68ca      	ldr	r2, [r1, #12]
 8000520:	320c      	adds	r2, #12
          break;
 8000522:	e759      	b.n	80003d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000524:	2204      	movs	r2, #4
 8000526:	e757      	b.n	80003d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000528:	2500      	movs	r5, #0
 800052a:	e7a2      	b.n	8000472 <HAL_GPIO_Init+0xde>
 800052c:	2501      	movs	r5, #1
 800052e:	e7a0      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000530:	2502      	movs	r5, #2
 8000532:	e79e      	b.n	8000472 <HAL_GPIO_Init+0xde>
 8000534:	40010400 	.word	0x40010400
 8000538:	40021000 	.word	0x40021000
 800053c:	40010800 	.word	0x40010800
 8000540:	10210000 	.word	0x10210000
 8000544:	10310000 	.word	0x10310000
 8000548:	10320000 	.word	0x10320000
 800054c:	10110000 	.word	0x10110000
 8000550:	10220000 	.word	0x10220000

08000554 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000554:	b10a      	cbz	r2, 800055a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000556:	6101      	str	r1, [r0, #16]
 8000558:	4770      	bx	lr
 800055a:	0409      	lsls	r1, r1, #16
 800055c:	e7fb      	b.n	8000556 <HAL_GPIO_WritePin+0x2>
	...

08000560 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000560:	6803      	ldr	r3, [r0, #0]
{
 8000562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000566:	07db      	lsls	r3, r3, #31
{
 8000568:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056a:	d410      	bmi.n	800058e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056c:	682b      	ldr	r3, [r5, #0]
 800056e:	079f      	lsls	r7, r3, #30
 8000570:	d45e      	bmi.n	8000630 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000572:	682b      	ldr	r3, [r5, #0]
 8000574:	0719      	lsls	r1, r3, #28
 8000576:	f100 8095 	bmi.w	80006a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800057a:	682b      	ldr	r3, [r5, #0]
 800057c:	075a      	lsls	r2, r3, #29
 800057e:	f100 80bf 	bmi.w	8000700 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000582:	69ea      	ldr	r2, [r5, #28]
 8000584:	2a00      	cmp	r2, #0
 8000586:	f040 812d 	bne.w	80007e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800058a:	2000      	movs	r0, #0
 800058c:	e014      	b.n	80005b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800058e:	4c90      	ldr	r4, [pc, #576]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	f003 030c 	and.w	r3, r3, #12
 8000596:	2b04      	cmp	r3, #4
 8000598:	d007      	beq.n	80005aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800059a:	6863      	ldr	r3, [r4, #4]
 800059c:	f003 030c 	and.w	r3, r3, #12
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	d10c      	bne.n	80005be <HAL_RCC_OscConfig+0x5e>
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	03de      	lsls	r6, r3, #15
 80005a8:	d509      	bpl.n	80005be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	039c      	lsls	r4, r3, #14
 80005ae:	d5dd      	bpl.n	800056c <HAL_RCC_OscConfig+0xc>
 80005b0:	686b      	ldr	r3, [r5, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1da      	bne.n	800056c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005b6:	2001      	movs	r0, #1
}
 80005b8:	b002      	add	sp, #8
 80005ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	686b      	ldr	r3, [r5, #4]
 80005c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005c4:	d110      	bne.n	80005e8 <HAL_RCC_OscConfig+0x88>
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ce:	f7ff fe07 	bl	80001e0 <HAL_GetTick>
 80005d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	0398      	lsls	r0, r3, #14
 80005d8:	d4c8      	bmi.n	800056c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005da:	f7ff fe01 	bl	80001e0 <HAL_GetTick>
 80005de:	1b80      	subs	r0, r0, r6
 80005e0:	2864      	cmp	r0, #100	; 0x64
 80005e2:	d9f7      	bls.n	80005d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005e4:	2003      	movs	r0, #3
 80005e6:	e7e7      	b.n	80005b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e8:	b99b      	cbnz	r3, 8000612 <HAL_RCC_OscConfig+0xb2>
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f0:	6023      	str	r3, [r4, #0]
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005fa:	f7ff fdf1 	bl	80001e0 <HAL_GetTick>
 80005fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	0399      	lsls	r1, r3, #14
 8000604:	d5b2      	bpl.n	800056c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000606:	f7ff fdeb 	bl	80001e0 <HAL_GetTick>
 800060a:	1b80      	subs	r0, r0, r6
 800060c:	2864      	cmp	r0, #100	; 0x64
 800060e:	d9f7      	bls.n	8000600 <HAL_RCC_OscConfig+0xa0>
 8000610:	e7e8      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	d103      	bne.n	8000622 <HAL_RCC_OscConfig+0xc2>
 800061a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800061e:	6023      	str	r3, [r4, #0]
 8000620:	e7d1      	b.n	80005c6 <HAL_RCC_OscConfig+0x66>
 8000622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000626:	6023      	str	r3, [r4, #0]
 8000628:	6823      	ldr	r3, [r4, #0]
 800062a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800062e:	e7cd      	b.n	80005cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000630:	4c67      	ldr	r4, [pc, #412]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	f013 0f0c 	tst.w	r3, #12
 8000638:	d007      	beq.n	800064a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800063a:	6863      	ldr	r3, [r4, #4]
 800063c:	f003 030c 	and.w	r3, r3, #12
 8000640:	2b08      	cmp	r3, #8
 8000642:	d110      	bne.n	8000666 <HAL_RCC_OscConfig+0x106>
 8000644:	6863      	ldr	r3, [r4, #4]
 8000646:	03da      	lsls	r2, r3, #15
 8000648:	d40d      	bmi.n	8000666 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	079b      	lsls	r3, r3, #30
 800064e:	d502      	bpl.n	8000656 <HAL_RCC_OscConfig+0xf6>
 8000650:	692b      	ldr	r3, [r5, #16]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d1af      	bne.n	80005b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000656:	6823      	ldr	r3, [r4, #0]
 8000658:	696a      	ldr	r2, [r5, #20]
 800065a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800065e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000662:	6023      	str	r3, [r4, #0]
 8000664:	e785      	b.n	8000572 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000666:	692a      	ldr	r2, [r5, #16]
 8000668:	4b5a      	ldr	r3, [pc, #360]	; (80007d4 <HAL_RCC_OscConfig+0x274>)
 800066a:	b16a      	cbz	r2, 8000688 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000670:	f7ff fdb6 	bl	80001e0 <HAL_GetTick>
 8000674:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	079f      	lsls	r7, r3, #30
 800067a:	d4ec      	bmi.n	8000656 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067c:	f7ff fdb0 	bl	80001e0 <HAL_GetTick>
 8000680:	1b80      	subs	r0, r0, r6
 8000682:	2802      	cmp	r0, #2
 8000684:	d9f7      	bls.n	8000676 <HAL_RCC_OscConfig+0x116>
 8000686:	e7ad      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000688:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800068a:	f7ff fda9 	bl	80001e0 <HAL_GetTick>
 800068e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	0798      	lsls	r0, r3, #30
 8000694:	f57f af6d 	bpl.w	8000572 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000698:	f7ff fda2 	bl	80001e0 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	2802      	cmp	r0, #2
 80006a0:	d9f6      	bls.n	8000690 <HAL_RCC_OscConfig+0x130>
 80006a2:	e79f      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006a4:	69aa      	ldr	r2, [r5, #24]
 80006a6:	4c4a      	ldr	r4, [pc, #296]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 80006a8:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <HAL_RCC_OscConfig+0x278>)
 80006aa:	b1da      	cbz	r2, 80006e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006b0:	f7ff fd96 	bl	80001e0 <HAL_GetTick>
 80006b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b8:	079b      	lsls	r3, r3, #30
 80006ba:	d50d      	bpl.n	80006d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <HAL_RCC_OscConfig+0x27c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006cc:	9b01      	ldr	r3, [sp, #4]
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f9      	bne.n	80006ca <HAL_RCC_OscConfig+0x16a>
 80006d6:	e750      	b.n	800057a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d8:	f7ff fd82 	bl	80001e0 <HAL_GetTick>
 80006dc:	1b80      	subs	r0, r0, r6
 80006de:	2802      	cmp	r0, #2
 80006e0:	d9e9      	bls.n	80006b6 <HAL_RCC_OscConfig+0x156>
 80006e2:	e77f      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006e6:	f7ff fd7b 	bl	80001e0 <HAL_GetTick>
 80006ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ee:	079f      	lsls	r7, r3, #30
 80006f0:	f57f af43 	bpl.w	800057a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006f4:	f7ff fd74 	bl	80001e0 <HAL_GetTick>
 80006f8:	1b80      	subs	r0, r0, r6
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9f6      	bls.n	80006ec <HAL_RCC_OscConfig+0x18c>
 80006fe:	e771      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000700:	4c33      	ldr	r4, [pc, #204]	; (80007d0 <HAL_RCC_OscConfig+0x270>)
 8000702:	69e3      	ldr	r3, [r4, #28]
 8000704:	00d8      	lsls	r0, r3, #3
 8000706:	d424      	bmi.n	8000752 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000708:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	69e3      	ldr	r3, [r4, #28]
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	61e3      	str	r3, [r4, #28]
 8000712:	69e3      	ldr	r3, [r4, #28]
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800071c:	4e30      	ldr	r6, [pc, #192]	; (80007e0 <HAL_RCC_OscConfig+0x280>)
 800071e:	6833      	ldr	r3, [r6, #0]
 8000720:	05d9      	lsls	r1, r3, #23
 8000722:	d518      	bpl.n	8000756 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000724:	68eb      	ldr	r3, [r5, #12]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d126      	bne.n	8000778 <HAL_RCC_OscConfig+0x218>
 800072a:	6a23      	ldr	r3, [r4, #32]
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000732:	f7ff fd55 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000736:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800073a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800073c:	6a23      	ldr	r3, [r4, #32]
 800073e:	079b      	lsls	r3, r3, #30
 8000740:	d53f      	bpl.n	80007c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000742:	2f00      	cmp	r7, #0
 8000744:	f43f af1d 	beq.w	8000582 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000748:	69e3      	ldr	r3, [r4, #28]
 800074a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800074e:	61e3      	str	r3, [r4, #28]
 8000750:	e717      	b.n	8000582 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000752:	2700      	movs	r7, #0
 8000754:	e7e2      	b.n	800071c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000756:	6833      	ldr	r3, [r6, #0]
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd3f 	bl	80001e0 <HAL_GetTick>
 8000762:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000764:	6833      	ldr	r3, [r6, #0]
 8000766:	05da      	lsls	r2, r3, #23
 8000768:	d4dc      	bmi.n	8000724 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800076a:	f7ff fd39 	bl	80001e0 <HAL_GetTick>
 800076e:	eba0 0008 	sub.w	r0, r0, r8
 8000772:	2864      	cmp	r0, #100	; 0x64
 8000774:	d9f6      	bls.n	8000764 <HAL_RCC_OscConfig+0x204>
 8000776:	e735      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000778:	b9ab      	cbnz	r3, 80007a6 <HAL_RCC_OscConfig+0x246>
 800077a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6223      	str	r3, [r4, #32]
 8000786:	6a23      	ldr	r3, [r4, #32]
 8000788:	f023 0304 	bic.w	r3, r3, #4
 800078c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800078e:	f7ff fd27 	bl	80001e0 <HAL_GetTick>
 8000792:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000794:	6a23      	ldr	r3, [r4, #32]
 8000796:	0798      	lsls	r0, r3, #30
 8000798:	d5d3      	bpl.n	8000742 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079a:	f7ff fd21 	bl	80001e0 <HAL_GetTick>
 800079e:	1b80      	subs	r0, r0, r6
 80007a0:	4540      	cmp	r0, r8
 80007a2:	d9f7      	bls.n	8000794 <HAL_RCC_OscConfig+0x234>
 80007a4:	e71e      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a6:	2b05      	cmp	r3, #5
 80007a8:	6a23      	ldr	r3, [r4, #32]
 80007aa:	d103      	bne.n	80007b4 <HAL_RCC_OscConfig+0x254>
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6223      	str	r3, [r4, #32]
 80007b2:	e7ba      	b.n	800072a <HAL_RCC_OscConfig+0x1ca>
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	6223      	str	r3, [r4, #32]
 80007ba:	6a23      	ldr	r3, [r4, #32]
 80007bc:	f023 0304 	bic.w	r3, r3, #4
 80007c0:	e7b6      	b.n	8000730 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c2:	f7ff fd0d 	bl	80001e0 <HAL_GetTick>
 80007c6:	eba0 0008 	sub.w	r0, r0, r8
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d9b6      	bls.n	800073c <HAL_RCC_OscConfig+0x1dc>
 80007ce:	e709      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
 80007d0:	40021000 	.word	0x40021000
 80007d4:	42420000 	.word	0x42420000
 80007d8:	42420480 	.word	0x42420480
 80007dc:	20000014 	.word	0x20000014
 80007e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e4:	4c22      	ldr	r4, [pc, #136]	; (8000870 <HAL_RCC_OscConfig+0x310>)
 80007e6:	6863      	ldr	r3, [r4, #4]
 80007e8:	f003 030c 	and.w	r3, r3, #12
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	f43f aee2 	beq.w	80005b6 <HAL_RCC_OscConfig+0x56>
 80007f2:	2300      	movs	r3, #0
 80007f4:	4e1f      	ldr	r6, [pc, #124]	; (8000874 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007fa:	d12b      	bne.n	8000854 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007fc:	f7ff fcf0 	bl	80001e0 <HAL_GetTick>
 8000800:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	0199      	lsls	r1, r3, #6
 8000806:	d41f      	bmi.n	8000848 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000808:	6a2b      	ldr	r3, [r5, #32]
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800080e:	d105      	bne.n	800081c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000810:	6862      	ldr	r2, [r4, #4]
 8000812:	68a9      	ldr	r1, [r5, #8]
 8000814:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000818:	430a      	orrs	r2, r1
 800081a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800081c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800081e:	6862      	ldr	r2, [r4, #4]
 8000820:	430b      	orrs	r3, r1
 8000822:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000826:	4313      	orrs	r3, r2
 8000828:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800082a:	2301      	movs	r3, #1
 800082c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800082e:	f7ff fcd7 	bl	80001e0 <HAL_GetTick>
 8000832:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000834:	6823      	ldr	r3, [r4, #0]
 8000836:	019a      	lsls	r2, r3, #6
 8000838:	f53f aea7 	bmi.w	800058a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800083c:	f7ff fcd0 	bl	80001e0 <HAL_GetTick>
 8000840:	1b40      	subs	r0, r0, r5
 8000842:	2802      	cmp	r0, #2
 8000844:	d9f6      	bls.n	8000834 <HAL_RCC_OscConfig+0x2d4>
 8000846:	e6cd      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000848:	f7ff fcca 	bl	80001e0 <HAL_GetTick>
 800084c:	1bc0      	subs	r0, r0, r7
 800084e:	2802      	cmp	r0, #2
 8000850:	d9d7      	bls.n	8000802 <HAL_RCC_OscConfig+0x2a2>
 8000852:	e6c7      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000854:	f7ff fcc4 	bl	80001e0 <HAL_GetTick>
 8000858:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	f57f ae94 	bpl.w	800058a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000862:	f7ff fcbd 	bl	80001e0 <HAL_GetTick>
 8000866:	1b40      	subs	r0, r0, r5
 8000868:	2802      	cmp	r0, #2
 800086a:	d9f6      	bls.n	800085a <HAL_RCC_OscConfig+0x2fa>
 800086c:	e6ba      	b.n	80005e4 <HAL_RCC_OscConfig+0x84>
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000
 8000874:	42420060 	.word	0x42420060

08000878 <HAL_RCC_GetSysClockFreq>:
{
 8000878:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800087c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800087e:	ac02      	add	r4, sp, #8
 8000880:	f103 0510 	add.w	r5, r3, #16
 8000884:	4622      	mov	r2, r4
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	6859      	ldr	r1, [r3, #4]
 800088a:	3308      	adds	r3, #8
 800088c:	c203      	stmia	r2!, {r0, r1}
 800088e:	42ab      	cmp	r3, r5
 8000890:	4614      	mov	r4, r2
 8000892:	d1f7      	bne.n	8000884 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000894:	2301      	movs	r3, #1
 8000896:	f88d 3004 	strb.w	r3, [sp, #4]
 800089a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800089c:	4911      	ldr	r1, [pc, #68]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800089e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008a4:	f003 020c 	and.w	r2, r3, #12
 80008a8:	2a08      	cmp	r2, #8
 80008aa:	d117      	bne.n	80008dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008b0:	a806      	add	r0, sp, #24
 80008b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ba:	d50c      	bpl.n	80008d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c6:	aa06      	add	r2, sp, #24
 80008c8:	4413      	add	r3, r2
 80008ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008d2:	b007      	add	sp, #28
 80008d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_RCC_GetSysClockFreq+0x74>)
 80008d8:	4350      	muls	r0, r2
 80008da:	e7fa      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008de:	e7f8      	b.n	80008d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80008e0:	08002648 	.word	0x08002648
 80008e4:	40021000 	.word	0x40021000
 80008e8:	007a1200 	.word	0x007a1200
 80008ec:	003d0900 	.word	0x003d0900

080008f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f0:	4a4d      	ldr	r2, [pc, #308]	; (8000a28 <HAL_RCC_ClockConfig+0x138>)
{
 80008f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	6813      	ldr	r3, [r2, #0]
{
 80008f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	428b      	cmp	r3, r1
{
 8000900:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000902:	d328      	bcc.n	8000956 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000904:	682a      	ldr	r2, [r5, #0]
 8000906:	0791      	lsls	r1, r2, #30
 8000908:	d432      	bmi.n	8000970 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800090a:	07d2      	lsls	r2, r2, #31
 800090c:	d438      	bmi.n	8000980 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_RCC_ClockConfig+0x138>)
 8000910:	6813      	ldr	r3, [r2, #0]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	429e      	cmp	r6, r3
 8000918:	d373      	bcc.n	8000a02 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800091a:	682a      	ldr	r2, [r5, #0]
 800091c:	4c43      	ldr	r4, [pc, #268]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 800091e:	f012 0f04 	tst.w	r2, #4
 8000922:	d179      	bne.n	8000a18 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000924:	0713      	lsls	r3, r2, #28
 8000926:	d506      	bpl.n	8000936 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	692a      	ldr	r2, [r5, #16]
 800092c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000930:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000934:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000936:	f7ff ff9f 	bl	8000878 <HAL_RCC_GetSysClockFreq>
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	4a3c      	ldr	r2, [pc, #240]	; (8000a30 <HAL_RCC_ClockConfig+0x140>)
 800093e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	40d8      	lsrs	r0, r3
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <HAL_RCC_ClockConfig+0x144>)
 8000948:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fc06 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
}
 8000952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000956:	6813      	ldr	r3, [r2, #0]
 8000958:	f023 0307 	bic.w	r3, r3, #7
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	4299      	cmp	r1, r3
 8000968:	d0cc      	beq.n	8000904 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800096a:	2001      	movs	r0, #1
 800096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000970:	492e      	ldr	r1, [pc, #184]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 8000972:	68a8      	ldr	r0, [r5, #8]
 8000974:	684b      	ldr	r3, [r1, #4]
 8000976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800097a:	4303      	orrs	r3, r0
 800097c:	604b      	str	r3, [r1, #4]
 800097e:	e7c4      	b.n	800090a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000980:	686a      	ldr	r2, [r5, #4]
 8000982:	4c2a      	ldr	r4, [pc, #168]	; (8000a2c <HAL_RCC_ClockConfig+0x13c>)
 8000984:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000986:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000988:	d11c      	bne.n	80009c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098e:	d0ec      	beq.n	800096a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000990:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000992:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000996:	f023 0303 	bic.w	r3, r3, #3
 800099a:	4313      	orrs	r3, r2
 800099c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800099e:	f7ff fc1f 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d114      	bne.n	80009d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009aa:	6863      	ldr	r3, [r4, #4]
 80009ac:	f003 030c 	and.w	r3, r3, #12
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d0ac      	beq.n	800090e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b4:	f7ff fc14 	bl	80001e0 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	4540      	cmp	r0, r8
 80009bc:	d9f5      	bls.n	80009aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80009be:	2003      	movs	r0, #3
 80009c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c4:	2a02      	cmp	r2, #2
 80009c6:	d102      	bne.n	80009ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009cc:	e7df      	b.n	800098e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ce:	f013 0f02 	tst.w	r3, #2
 80009d2:	e7dc      	b.n	800098e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d10f      	bne.n	80009f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	f003 030c 	and.w	r3, r3, #12
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d095      	beq.n	800090e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e2:	f7ff fbfd 	bl	80001e0 <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	4540      	cmp	r0, r8
 80009ea:	d9f5      	bls.n	80009d8 <HAL_RCC_ClockConfig+0xe8>
 80009ec:	e7e7      	b.n	80009be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ee:	f7ff fbf7 	bl	80001e0 <HAL_GetTick>
 80009f2:	1bc0      	subs	r0, r0, r7
 80009f4:	4540      	cmp	r0, r8
 80009f6:	d8e2      	bhi.n	80009be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009f8:	6863      	ldr	r3, [r4, #4]
 80009fa:	f013 0f0c 	tst.w	r3, #12
 80009fe:	d1f6      	bne.n	80009ee <HAL_RCC_ClockConfig+0xfe>
 8000a00:	e785      	b.n	800090e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	f023 0307 	bic.w	r3, r3, #7
 8000a08:	4333      	orrs	r3, r6
 8000a0a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a0c:	6813      	ldr	r3, [r2, #0]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	429e      	cmp	r6, r3
 8000a14:	d1a9      	bne.n	800096a <HAL_RCC_ClockConfig+0x7a>
 8000a16:	e780      	b.n	800091a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	68e9      	ldr	r1, [r5, #12]
 8000a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a20:	430b      	orrs	r3, r1
 8000a22:	6063      	str	r3, [r4, #4]
 8000a24:	e77e      	b.n	8000924 <HAL_RCC_ClockConfig+0x34>
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	0800279e 	.word	0x0800279e
 8000a34:	20000014 	.word	0x20000014

08000a38 <HAL_RCC_GetHCLKFreq>:
}
 8000a38:	4b01      	ldr	r3, [pc, #4]	; (8000a40 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000014 	.word	0x20000014

08000a44 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a52:	6810      	ldr	r0, [r2, #0]
}    
 8000a54:	40d8      	lsrs	r0, r3
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	080027ae 	.word	0x080027ae
 8000a60:	20000014 	.word	0x20000014

08000a64 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a72:	6810      	ldr	r0, [r2, #0]
} 
 8000a74:	40d8      	lsrs	r0, r3
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	080027ae 	.word	0x080027ae
 8000a80:	20000014 	.word	0x20000014

08000a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a88:	4604      	mov	r4, r0
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	4617      	mov	r7, r2
 8000a8e:	461d      	mov	r5, r3
 8000a90:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000a92:	6822      	ldr	r2, [r4, #0]
 8000a94:	6893      	ldr	r3, [r2, #8]
 8000a96:	ea38 0303 	bics.w	r3, r8, r3
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d102      	bne.n	8000aaa <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000aa4:	2000      	movs	r0, #0
}
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000aaa:	1c6b      	adds	r3, r5, #1
 8000aac:	d0f2      	beq.n	8000a94 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000aae:	bb55      	cbnz	r5, 8000b06 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ab8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000aba:	6862      	ldr	r2, [r4, #4]
 8000abc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ac0:	d10a      	bne.n	8000ad8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000ac2:	68a2      	ldr	r2, [r4, #8]
 8000ac4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000ac8:	d002      	beq.n	8000ad0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000aca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000ace:	d103      	bne.n	8000ad8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ad6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ada:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ade:	d109      	bne.n	8000af4 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ae6:	0412      	lsls	r2, r2, #16
 8000ae8:	0c12      	lsrs	r2, r2, #16
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000af2:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000af4:	2301      	movs	r3, #1
 8000af6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000afa:	2300      	movs	r3, #0
 8000afc:	2003      	movs	r0, #3
 8000afe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b06:	f7ff fb6b 	bl	80001e0 <HAL_GetTick>
 8000b0a:	1b80      	subs	r0, r0, r6
 8000b0c:	4285      	cmp	r5, r0
 8000b0e:	d8c0      	bhi.n	8000a92 <SPI_WaitFlagStateUntilTimeout+0xe>
 8000b10:	e7ce      	b.n	8000ab0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000b12 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b12:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b14:	460b      	mov	r3, r1
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	2200      	movs	r2, #0
{
 8000b1c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b1e:	f7ff ffb1 	bl	8000a84 <SPI_WaitFlagStateUntilTimeout>
 8000b22:	b120      	cbz	r0, 8000b2e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000b24:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b28:	f043 0320 	orr.w	r3, r3, #32
 8000b2c:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd10      	pop	{r4, pc}

08000b32 <HAL_SPI_TransmitReceive>:
{
 8000b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b36:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8000b38:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b3c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8000b3e:	2b01      	cmp	r3, #1
{
 8000b40:	4604      	mov	r4, r0
 8000b42:	460d      	mov	r5, r1
 8000b44:	4616      	mov	r6, r2
 8000b46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8000b48:	f000 80ee 	beq.w	8000d28 <HAL_SPI_TransmitReceive+0x1f6>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b52:	f7ff fb45 	bl	80001e0 <HAL_GetTick>
  tmp  = hspi->State;
 8000b56:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000b5a:	4680      	mov	r8, r0
  tmp  = hspi->State;
 8000b5c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b5e:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 8000b60:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8000b62:	d00a      	beq.n	8000b7a <HAL_SPI_TransmitReceive+0x48>
 8000b64:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000b68:	f040 80dc 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000b6c:	68a2      	ldr	r2, [r4, #8]
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	f040 80d8 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	f040 80d5 	bne.w	8000d24 <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d04e      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d04c      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
 8000b82:	f1b9 0f00 	cmp.w	r9, #0
 8000b86:	d049      	beq.n	8000c1c <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000b88:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000b8c:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8000b8e:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000b90:	bf04      	itt	eq
 8000b92:	2305      	moveq	r3, #5
 8000b94:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000b9c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000b9e:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ba0:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000ba2:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000ba6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000baa:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000bac:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bb0:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000bb2:	bf58      	it	pl
 8000bb4:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000bb6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000bb8:	bf58      	it	pl
 8000bba:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000bbe:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000bc2:	bf58      	it	pl
 8000bc4:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bc6:	68e2      	ldr	r2, [r4, #12]
 8000bc8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000bcc:	d15d      	bne.n	8000c8a <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000bce:	b119      	cbz	r1, 8000bd8 <HAL_SPI_TransmitReceive+0xa6>
 8000bd0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	2a01      	cmp	r2, #1
 8000bd6:	d106      	bne.n	8000be6 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000bd8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000bdc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000bde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000be6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000bea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b9bb      	cbnz	r3, 8000c20 <HAL_SPI_TransmitReceive+0xee>
 8000bf0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b9a3      	cbnz	r3, 8000c20 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000bf6:	f8cd 8000 	str.w	r8, [sp]
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff3f 	bl	8000a84 <SPI_WaitFlagStateUntilTimeout>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d135      	bne.n	8000c76 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f7ff ff7f 	bl	8000b12 <SPI_CheckFlag_BSY>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d07a      	beq.n	8000d0e <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	e02b      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000c20:	f1b9 0f00 	cmp.w	r9, #0
 8000c24:	d00f      	beq.n	8000c46 <HAL_SPI_TransmitReceive+0x114>
 8000c26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b163      	cbz	r3, 8000c46 <HAL_SPI_TransmitReceive+0x114>
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	0791      	lsls	r1, r2, #30
 8000c32:	d508      	bpl.n	8000c46 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8000c34:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c38:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c3c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000c3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000c46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b163      	cbz	r3, 8000c66 <HAL_SPI_TransmitReceive+0x134>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	07d2      	lsls	r2, r2, #31
 8000c52:	d508      	bpl.n	8000c66 <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 8000c54:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8000c5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c60:	3b01      	subs	r3, #1
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000c66:	1c78      	adds	r0, r7, #1
 8000c68:	d0bf      	beq.n	8000bea <HAL_SPI_TransmitReceive+0xb8>
 8000c6a:	f7ff fab9 	bl	80001e0 <HAL_GetTick>
 8000c6e:	eba0 0008 	sub.w	r0, r0, r8
 8000c72:	4287      	cmp	r7, r0
 8000c74:	d8b9      	bhi.n	8000bea <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c84:	b005      	add	sp, #20
 8000c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c8a:	b119      	cbz	r1, 8000c94 <HAL_SPI_TransmitReceive+0x162>
 8000c8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d106      	bne.n	8000ca2 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8000c94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000c98:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000ca2:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ca6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b91b      	cbnz	r3, 8000cb4 <HAL_SPI_TransmitReceive+0x182>
 8000cac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0a0      	beq.n	8000bf6 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000cb4:	f1b9 0f00 	cmp.w	r9, #0
 8000cb8:	d00f      	beq.n	8000cda <HAL_SPI_TransmitReceive+0x1a8>
 8000cba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	b163      	cbz	r3, 8000cda <HAL_SPI_TransmitReceive+0x1a8>
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	0791      	lsls	r1, r2, #30
 8000cc6:	d508      	bpl.n	8000cda <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8000cc8:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000ccc:	782a      	ldrb	r2, [r5, #0]
 8000cce:	3501      	adds	r5, #1
 8000cd0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000cd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000cda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b16b      	cbz	r3, 8000cfc <HAL_SPI_TransmitReceive+0x1ca>
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	07d2      	lsls	r2, r2, #31
 8000ce6:	d509      	bpl.n	8000cfc <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8000ce8:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3601      	adds	r6, #1
 8000cf0:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8000cf4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8000cfc:	1c7b      	adds	r3, r7, #1
 8000cfe:	d0d2      	beq.n	8000ca6 <HAL_SPI_TransmitReceive+0x174>
 8000d00:	f7ff fa6e 	bl	80001e0 <HAL_GetTick>
 8000d04:	eba0 0008 	sub.w	r0, r0, r8
 8000d08:	4287      	cmp	r7, r0
 8000d0a:	d8cc      	bhi.n	8000ca6 <HAL_SPI_TransmitReceive+0x174>
 8000d0c:	e7b3      	b.n	8000c76 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d0e:	68a3      	ldr	r3, [r4, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1b1      	bne.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	9003      	str	r0, [sp, #12]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	9203      	str	r2, [sp, #12]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	e7a9      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8000d24:	2002      	movs	r0, #2
 8000d26:	e7a7      	b.n	8000c78 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	e7ab      	b.n	8000c84 <HAL_SPI_TransmitReceive+0x152>

08000d2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000d2c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000d2e:	4604      	mov	r4, r0
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d034      	beq.n	8000d9e <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d38:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d3c:	b90b      	cbnz	r3, 8000d42 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000d3e:	f000 ff41 	bl	8001bc4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d42:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d44:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d4a:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d4c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d52:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	69a2      	ldr	r2, [r4, #24]
 8000d58:	4303      	orrs	r3, r0
 8000d5a:	68e0      	ldr	r0, [r4, #12]
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	6920      	ldr	r0, [r4, #16]
 8000d60:	4303      	orrs	r3, r0
 8000d62:	6960      	ldr	r0, [r4, #20]
 8000d64:	4303      	orrs	r3, r0
 8000d66:	69e0      	ldr	r0, [r4, #28]
 8000d68:	4303      	orrs	r3, r0
 8000d6a:	6a20      	ldr	r0, [r4, #32]
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d70:	4303      	orrs	r3, r0
 8000d72:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000d76:	4303      	orrs	r3, r0
 8000d78:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d7a:	0c12      	lsrs	r2, r2, #16
 8000d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d7e:	f002 0204 	and.w	r2, r2, #4
 8000d82:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d86:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d88:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d8a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d8c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d92:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000d94:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d96:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000d98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000d9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d9e:	2001      	movs	r0, #1
}
 8000da0:	bd10      	pop	{r4, pc}

08000da2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000daa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000db4:	2320      	movs	r3, #32
 8000db6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000dba:	4770      	bx	lr

08000dbc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc0:	6805      	ldr	r5, [r0, #0]
 8000dc2:	68c2      	ldr	r2, [r0, #12]
 8000dc4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dc6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dd0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000dd2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000dd8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ddc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000de0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000de6:	696b      	ldr	r3, [r5, #20]
 8000de8:	6982      	ldr	r2, [r0, #24]
 8000dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dee:	4313      	orrs	r3, r2
 8000df0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <UART_SetConfig+0x138>)
{
 8000df4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000df6:	429d      	cmp	r5, r3
 8000df8:	f04f 0419 	mov.w	r4, #25
 8000dfc:	d146      	bne.n	8000e8c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000dfe:	f7ff fe31 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8000e02:	fb04 f300 	mul.w	r3, r4, r0
 8000e06:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e0a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e0e:	00b6      	lsls	r6, r6, #2
 8000e10:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e14:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e18:	011e      	lsls	r6, r3, #4
 8000e1a:	f7ff fe23 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8000e1e:	4360      	muls	r0, r4
 8000e20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e2a:	f7ff fe1b 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8000e2e:	4360      	muls	r0, r4
 8000e30:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e3e:	fb08 7313 	mls	r3, r8, r3, r7
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	3332      	adds	r3, #50	; 0x32
 8000e46:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e4a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e4e:	f7ff fe09 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
 8000e52:	4360      	muls	r0, r4
 8000e54:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	fbb0 faf2 	udiv	sl, r0, r2
 8000e5e:	f7ff fe01 	bl	8000a64 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e62:	4360      	muls	r0, r4
 8000e64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e6e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e72:	fb08 a313 	mls	r3, r8, r3, sl
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	3332      	adds	r3, #50	; 0x32
 8000e7a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	433b      	orrs	r3, r7
 8000e84:	4433      	add	r3, r6
 8000e86:	60ab      	str	r3, [r5, #8]
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	f7ff fdda 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8000e90:	fb04 f300 	mul.w	r3, r4, r0
 8000e94:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e98:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e9c:	00b6      	lsls	r6, r6, #2
 8000e9e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ea2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ea6:	011e      	lsls	r6, r3, #4
 8000ea8:	f7ff fdcc 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8000eac:	4360      	muls	r0, r4
 8000eae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eb8:	f7ff fdc4 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8000ebc:	4360      	muls	r0, r4
 8000ebe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ecc:	fb08 7313 	mls	r3, r8, r3, r7
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	3332      	adds	r3, #50	; 0x32
 8000ed4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000edc:	f7ff fdb2 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	4360      	muls	r0, r4
 8000ee2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	fbb0 faf2 	udiv	sl, r0, r2
 8000eec:	f7ff fdaa 	bl	8000a44 <HAL_RCC_GetPCLK1Freq>
 8000ef0:	e7b7      	b.n	8000e62 <UART_SetConfig+0xa6>
 8000ef2:	bf00      	nop
 8000ef4:	40013800 	.word	0x40013800

08000ef8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	4604      	mov	r4, r0
 8000efc:	460e      	mov	r6, r1
 8000efe:	4617      	mov	r7, r2
 8000f00:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000f02:	6821      	ldr	r1, [r4, #0]
 8000f04:	680b      	ldr	r3, [r1, #0]
 8000f06:	ea36 0303 	bics.w	r3, r6, r3
 8000f0a:	d101      	bne.n	8000f10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
}
 8000f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f10:	1c6b      	adds	r3, r5, #1
 8000f12:	d0f7      	beq.n	8000f04 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f14:	b995      	cbnz	r5, 8000f3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f16:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000f18:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	f022 0201 	bic.w	r2, r2, #1
 8000f28:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000f30:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000f34:	2300      	movs	r3, #0
 8000f36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f3c:	f7ff f950 	bl	80001e0 <HAL_GetTick>
 8000f40:	1bc0      	subs	r0, r0, r7
 8000f42:	4285      	cmp	r5, r0
 8000f44:	d2dd      	bcs.n	8000f02 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000f46:	e7e6      	b.n	8000f16 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000f48 <HAL_UART_Init>:
{
 8000f48:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	b340      	cbz	r0, 8000fa0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f56:	b91b      	cbnz	r3, 8000f60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f5c:	f000 fe5c 	bl	8001c18 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f60:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f62:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f68:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f6a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f70:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f72:	f7ff ff23 	bl	8000dbc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f76:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f78:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f88:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f90:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa0:	2001      	movs	r0, #1
}
 8000fa2:	bd10      	pop	{r4, pc}

08000fa4 <HAL_UART_Transmit>:
{
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000faa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000fae:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000fb0:	2b20      	cmp	r3, #32
{
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000fb6:	d14e      	bne.n	8001056 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000fb8:	2900      	cmp	r1, #0
 8000fba:	d049      	beq.n	8001050 <HAL_UART_Transmit+0xac>
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d047      	beq.n	8001050 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000fc0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d046      	beq.n	8001056 <HAL_UART_Transmit+0xb2>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fd2:	2321      	movs	r3, #33	; 0x21
 8000fd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000fd8:	f7ff f902 	bl	80001e0 <HAL_GetTick>
 8000fdc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000fde:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000fe2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000fe6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b96b      	cbnz	r3, 8001008 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4632      	mov	r2, r6
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff ff80 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ff8:	b9a8      	cbnz	r0, 8001026 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000ffa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ffc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001000:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001008:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800100a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800100c:	3b01      	subs	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001012:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001014:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800101a:	4620      	mov	r0, r4
 800101c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800101e:	d10e      	bne.n	800103e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001020:	f7ff ff6a 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001024:	b110      	cbz	r0, 800102c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800102c:	882b      	ldrh	r3, [r5, #0]
 800102e:	6822      	ldr	r2, [r4, #0]
 8001030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001034:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001036:	6923      	ldr	r3, [r4, #16]
 8001038:	b943      	cbnz	r3, 800104c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800103a:	3502      	adds	r5, #2
 800103c:	e7d3      	b.n	8000fe6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800103e:	f7ff ff5b 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1ef      	bne.n	8001026 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	782a      	ldrb	r2, [r5, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	3501      	adds	r5, #1
 800104e:	e7ca      	b.n	8000fe6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001050:	2001      	movs	r0, #1
 8001052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001056:	2002      	movs	r0, #2
}
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800105c <HAL_UART_TxCpltCallback>:
 800105c:	4770      	bx	lr

0800105e <HAL_UART_RxCpltCallback>:
 800105e:	4770      	bx	lr

08001060 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001060:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001064:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001066:	2b22      	cmp	r3, #34	; 0x22
 8001068:	d136      	bne.n	80010d8 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800106a:	6883      	ldr	r3, [r0, #8]
 800106c:	6901      	ldr	r1, [r0, #16]
 800106e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001072:	6802      	ldr	r2, [r0, #0]
 8001074:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001076:	d123      	bne.n	80010c0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001078:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800107a:	b9e9      	cbnz	r1, 80010b8 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800107c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001080:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001084:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001086:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001088:	3c01      	subs	r4, #1
 800108a:	b2a4      	uxth	r4, r4
 800108c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800108e:	b98c      	cbnz	r4, 80010b4 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001090:	6803      	ldr	r3, [r0, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	f022 0220 	bic.w	r2, r2, #32
 8001098:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010a0:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80010aa:	2320      	movs	r3, #32
 80010ac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80010b0:	f7ff ffd5 	bl	800105e <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80010b4:	2000      	movs	r0, #0
}
 80010b6:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f823 2b01 	strh.w	r2, [r3], #1
 80010be:	e7e1      	b.n	8001084 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80010c0:	b921      	cbnz	r1, 80010cc <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e7dc      	b.n	8001086 <UART_Receive_IT+0x26>
 80010cc:	6852      	ldr	r2, [r2, #4]
 80010ce:	1c59      	adds	r1, r3, #1
 80010d0:	6281      	str	r1, [r0, #40]	; 0x28
 80010d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010d6:	e7f7      	b.n	80010c8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80010d8:	2002      	movs	r0, #2
 80010da:	bd10      	pop	{r4, pc}

080010dc <HAL_UART_ErrorCallback>:
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010e0:	6803      	ldr	r3, [r0, #0]
{
 80010e2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010e4:	681a      	ldr	r2, [r3, #0]
{
 80010e6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80010e8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010ea:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010ec:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80010ee:	d107      	bne.n	8001100 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010f0:	0696      	lsls	r6, r2, #26
 80010f2:	d55a      	bpl.n	80011aa <HAL_UART_IRQHandler+0xca>
 80010f4:	068d      	lsls	r5, r1, #26
 80010f6:	d558      	bpl.n	80011aa <HAL_UART_IRQHandler+0xca>
}
 80010f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80010fc:	f7ff bfb0 	b.w	8001060 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001100:	f015 0501 	ands.w	r5, r5, #1
 8001104:	d102      	bne.n	800110c <HAL_UART_IRQHandler+0x2c>
 8001106:	f411 7f90 	tst.w	r1, #288	; 0x120
 800110a:	d04e      	beq.n	80011aa <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800110c:	07d3      	lsls	r3, r2, #31
 800110e:	d505      	bpl.n	800111c <HAL_UART_IRQHandler+0x3c>
 8001110:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001112:	bf42      	ittt	mi
 8001114:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001116:	f043 0301 	orrmi.w	r3, r3, #1
 800111a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800111c:	0750      	lsls	r0, r2, #29
 800111e:	d504      	bpl.n	800112a <HAL_UART_IRQHandler+0x4a>
 8001120:	b11d      	cbz	r5, 800112a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001122:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800112a:	0793      	lsls	r3, r2, #30
 800112c:	d504      	bpl.n	8001138 <HAL_UART_IRQHandler+0x58>
 800112e:	b11d      	cbz	r5, 8001138 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001138:	0716      	lsls	r6, r2, #28
 800113a:	d504      	bpl.n	8001146 <HAL_UART_IRQHandler+0x66>
 800113c:	b11d      	cbz	r5, 8001146 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800113e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001146:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d066      	beq.n	800121a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800114c:	0695      	lsls	r5, r2, #26
 800114e:	d504      	bpl.n	800115a <HAL_UART_IRQHandler+0x7a>
 8001150:	0688      	lsls	r0, r1, #26
 8001152:	d502      	bpl.n	800115a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ff83 	bl	8001060 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800115a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800115c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800115e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001160:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001162:	0711      	lsls	r1, r2, #28
 8001164:	d402      	bmi.n	800116c <HAL_UART_IRQHandler+0x8c>
 8001166:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800116a:	d01a      	beq.n	80011a2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800116c:	f7ff fe19 	bl	8000da2 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	0652      	lsls	r2, r2, #25
 8001176:	d510      	bpl.n	800119a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001178:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800117a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800117c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001180:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001182:	b150      	cbz	r0, 800119a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_UART_IRQHandler+0x13c>)
 8001186:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001188:	f7ff f8bc 	bl	8000304 <HAL_DMA_Abort_IT>
 800118c:	2800      	cmp	r0, #0
 800118e:	d044      	beq.n	800121a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001190:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001196:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001198:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800119a:	4620      	mov	r0, r4
 800119c:	f7ff ff9e 	bl	80010dc <HAL_UART_ErrorCallback>
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80011a2:	f7ff ff9b 	bl	80010dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011aa:	0616      	lsls	r6, r2, #24
 80011ac:	d527      	bpl.n	80011fe <HAL_UART_IRQHandler+0x11e>
 80011ae:	060d      	lsls	r5, r1, #24
 80011b0:	d525      	bpl.n	80011fe <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80011b2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80011b6:	2a21      	cmp	r2, #33	; 0x21
 80011b8:	d12f      	bne.n	800121a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011ba:	68a2      	ldr	r2, [r4, #8]
 80011bc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011c0:	6a22      	ldr	r2, [r4, #32]
 80011c2:	d117      	bne.n	80011f4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80011c4:	8811      	ldrh	r1, [r2, #0]
 80011c6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80011ca:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80011cc:	6921      	ldr	r1, [r4, #16]
 80011ce:	b979      	cbnz	r1, 80011f0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80011d0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80011d2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80011d4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011d6:	3a01      	subs	r2, #1
 80011d8:	b292      	uxth	r2, r2
 80011da:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011dc:	b9ea      	cbnz	r2, 800121a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80011f0:	3201      	adds	r2, #1
 80011f2:	e7ee      	b.n	80011d2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80011f4:	1c51      	adds	r1, r2, #1
 80011f6:	6221      	str	r1, [r4, #32]
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	e7ea      	b.n	80011d4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011fe:	0650      	lsls	r0, r2, #25
 8001200:	d50b      	bpl.n	800121a <HAL_UART_IRQHandler+0x13a>
 8001202:	064a      	lsls	r2, r1, #25
 8001204:	d509      	bpl.n	800121a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001206:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001208:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800120a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800120e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001210:	2320      	movs	r3, #32
 8001212:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001216:	f7ff ff21 	bl	800105c <HAL_UART_TxCpltCallback>
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	08001221 	.word	0x08001221

08001220 <UART_DMAAbortOnError>:
{
 8001220:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001222:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001224:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001226:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001228:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800122a:	f7ff ff57 	bl	80010dc <HAL_UART_ErrorCallback>
 800122e:	bd08      	pop	{r3, pc}

08001230 <SPIx_WriteRead>:
{
 LD_ON;
}
//--------------------------------------------------
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001230:	b510      	push	{r4, lr}
  uint8_t receivedbyte = 0;
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  uint8_t receivedbyte = 0;
 8001236:	2400      	movs	r4, #0
{
 8001238:	b086      	sub	sp, #24
  uint8_t receivedbyte = 0;
 800123a:	aa06      	add	r2, sp, #24
{
 800123c:	f88d 000f 	strb.w	r0, [sp, #15]
  uint8_t receivedbyte = 0;
 8001240:	f802 4d01 	strb.w	r4, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8001244:	f10d 010f 	add.w	r1, sp, #15
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <SPIx_WriteRead+0x38>)
 800124c:	2301      	movs	r3, #1
 800124e:	f7ff fc70 	bl	8000b32 <HAL_SPI_TransmitReceive>
 8001252:	b120      	cbz	r0, 800125e <SPIx_WriteRead+0x2e>
 LD_ON;
 8001254:	4622      	mov	r2, r4
 8001256:	2120      	movs	r1, #32
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <SPIx_WriteRead+0x3c>)
 800125a:	f7ff f97b 	bl	8000554 <HAL_GPIO_WritePin>
  {
    Error();
  }
  return receivedbyte;
}
 800125e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001262:	b006      	add	sp, #24
 8001264:	bd10      	pop	{r4, pc}
 8001266:	bf00      	nop
 8001268:	2000012c 	.word	0x2000012c
 800126c:	40010c00 	.word	0x40010c00

08001270 <enc28j60_readBuf>:
  SS_DESELECT();
  return result;
}
//--------------------------------------------------
static void enc28j60_readBuf(uint16_t len,uint8_t* data)
{
 8001270:	b538      	push	{r3, r4, r5, lr}
 SS_SELECT();
 8001272:	2200      	movs	r2, #0
{
 8001274:	4605      	mov	r5, r0
 8001276:	460c      	mov	r4, r1
 SS_SELECT();
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <enc28j60_readBuf+0x38>)
 800127a:	2110      	movs	r1, #16
 800127c:	f7ff f96a 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 8001280:	203a      	movs	r0, #58	; 0x3a
 8001282:	f7ff ffd5 	bl	8001230 <SPIx_WriteRead>
 8001286:	4425      	add	r5, r4
 SPI_SendByte(ENC28J60_READ_BUF_MEM);
 while(len--){
 8001288:	42ac      	cmp	r4, r5
 800128a:	d106      	bne.n	800129a <enc28j60_readBuf+0x2a>
  *data++=SPIx_WriteRead(0x00);
 }
 SS_DESELECT();
 800128c:	2201      	movs	r2, #1
}
 800128e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 SS_DESELECT();
 8001292:	2110      	movs	r1, #16
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <enc28j60_readBuf+0x38>)
 8001296:	f7ff b95d 	b.w	8000554 <HAL_GPIO_WritePin>
  *data++=SPIx_WriteRead(0x00);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff ffc8 	bl	8001230 <SPIx_WriteRead>
 80012a0:	f804 0b01 	strb.w	r0, [r4], #1
 80012a4:	e7f0      	b.n	8001288 <enc28j60_readBuf+0x18>
 80012a6:	bf00      	nop
 80012a8:	40010800 	.word	0x40010800

080012ac <enc28j60_writeBuf>:
//--------------------------------------------------
static void enc28j60_writeBuf(uint16_t len,uint8_t* data)
{
 80012ac:	b538      	push	{r3, r4, r5, lr}
  SS_SELECT();
 80012ae:	2200      	movs	r2, #0
{
 80012b0:	4605      	mov	r5, r0
 80012b2:	460c      	mov	r4, r1
  SS_SELECT();
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <enc28j60_writeBuf+0x34>)
 80012b6:	2110      	movs	r1, #16
 80012b8:	f7ff f94c 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 80012bc:	207a      	movs	r0, #122	; 0x7a
 80012be:	f7ff ffb7 	bl	8001230 <SPIx_WriteRead>
 80012c2:	4425      	add	r5, r4
  SPI_SendByte(ENC28J60_WRITE_BUF_MEM);
  while(len--)
 80012c4:	42ac      	cmp	r4, r5
 80012c6:	d106      	bne.n	80012d6 <enc28j60_writeBuf+0x2a>
    SPI_SendByte(*data++);
  SS_DESELECT();
 80012c8:	2201      	movs	r2, #1
}
 80012ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SS_DESELECT();
 80012ce:	2110      	movs	r1, #16
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <enc28j60_writeBuf+0x34>)
 80012d2:	f7ff b93f 	b.w	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 80012d6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80012da:	f7ff ffa9 	bl	8001230 <SPIx_WriteRead>
 80012de:	e7f1      	b.n	80012c4 <enc28j60_writeBuf+0x18>
 80012e0:	40010800 	.word	0x40010800

080012e4 <SPI_ReceiveByte>:
 uint8_t bt = SPIx_WriteRead(0xFF);
 80012e4:	20ff      	movs	r0, #255	; 0xff
 80012e6:	f7ff bfa3 	b.w	8001230 <SPIx_WriteRead>
	...

080012ec <enc28j60_readOp.constprop.0>:
static uint8_t enc28j60_readOp(uint8_t op,uint8_t addres)
 80012ec:	b510      	push	{r4, lr}
 80012ee:	4604      	mov	r4, r0
 SS_SELECT();
 80012f0:	2200      	movs	r2, #0
 80012f2:	2110      	movs	r1, #16
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <enc28j60_readOp.constprop.0+0x3c>)
 SPI_SendByte(op|(addres&ADDR_MASK));
 80012f6:	b264      	sxtb	r4, r4
 SS_SELECT();
 80012f8:	f7ff f92c 	bl	8000554 <HAL_GPIO_WritePin>
 SPIx_WriteRead(bt);
 80012fc:	f004 001f 	and.w	r0, r4, #31
 8001300:	f7ff ff96 	bl	8001230 <SPIx_WriteRead>
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff93 	bl	8001230 <SPIx_WriteRead>
  if(addres & 0x80) SPI_ReceiveByte();
 800130a:	2c00      	cmp	r4, #0
 800130c:	da01      	bge.n	8001312 <enc28j60_readOp.constprop.0+0x26>
 800130e:	f7ff ffe9 	bl	80012e4 <SPI_ReceiveByte>
 result=SPI_ReceiveByte();
 8001312:	f7ff ffe7 	bl	80012e4 <SPI_ReceiveByte>
 8001316:	4604      	mov	r4, r0
  SS_DESELECT();
 8001318:	2201      	movs	r2, #1
 800131a:	2110      	movs	r1, #16
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <enc28j60_readOp.constprop.0+0x3c>)
 800131e:	f7ff f919 	bl	8000554 <HAL_GPIO_WritePin>
}
 8001322:	4620      	mov	r0, r4
 8001324:	bd10      	pop	{r4, pc}
 8001326:	bf00      	nop
 8001328:	40010800 	.word	0x40010800

0800132c <enc28j60_writeOp>:
{
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	460c      	mov	r4, r1
 8001330:	4607      	mov	r7, r0
 8001332:	4616      	mov	r6, r2
 SS_SELECT();
 8001334:	4d0a      	ldr	r5, [pc, #40]	; (8001360 <enc28j60_writeOp+0x34>)
 8001336:	2200      	movs	r2, #0
 8001338:	2110      	movs	r1, #16
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff f90a 	bl	8000554 <HAL_GPIO_WritePin>
 SPI_SendByte(op|(addres&ADDR_MASK));
 8001340:	f004 001f 	and.w	r0, r4, #31
 SPIx_WriteRead(bt);
 8001344:	4338      	orrs	r0, r7
 8001346:	f7ff ff73 	bl	8001230 <SPIx_WriteRead>
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff ff70 	bl	8001230 <SPIx_WriteRead>
 SS_DESELECT();
 8001350:	4628      	mov	r0, r5
}
 8001352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 SS_DESELECT();
 8001356:	2201      	movs	r2, #1
 8001358:	2110      	movs	r1, #16
 800135a:	f7ff b8fb 	b.w	8000554 <HAL_GPIO_WritePin>
 800135e:	bf00      	nop
 8001360:	40010800 	.word	0x40010800

08001364 <enc28j60_SetBank>:
//--------------------------------------------------
static void enc28j60_SetBank(uint8_t addres)
{
 8001364:	b538      	push	{r3, r4, r5, lr}
 if ((addres&BANK_MASK)!=Enc28j60Bank)
 8001366:	4d0a      	ldr	r5, [pc, #40]	; (8001390 <enc28j60_SetBank+0x2c>)
 8001368:	f000 0460 	and.w	r4, r0, #96	; 0x60
 800136c:	782b      	ldrb	r3, [r5, #0]
 800136e:	42a3      	cmp	r3, r4
 8001370:	d00c      	beq.n	800138c <enc28j60_SetBank+0x28>
 {
  enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_BSEL1|ECON1_BSEL0);
 8001372:	2203      	movs	r2, #3
 8001374:	211f      	movs	r1, #31
 8001376:	20a0      	movs	r0, #160	; 0xa0
 8001378:	f7ff ffd8 	bl	800132c <enc28j60_writeOp>
  Enc28j60Bank = addres&BANK_MASK;
 800137c:	702c      	strb	r4, [r5, #0]
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 800137e:	0962      	lsrs	r2, r4, #5
 8001380:	211f      	movs	r1, #31
 }
}
 8001382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,Enc28j60Bank>>5);
 8001386:	2080      	movs	r0, #128	; 0x80
 8001388:	f7ff bfd0 	b.w	800132c <enc28j60_writeOp>
 800138c:	bd38      	pop	{r3, r4, r5, pc}
 800138e:	bf00      	nop
 8001390:	20000098 	.word	0x20000098

08001394 <enc28j60_readRegByte>:
 enc28j60_SetBank(addres);
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
}
//--------------------------------------------------
static uint8_t enc28j60_readRegByte(uint8_t addres)
{
 8001394:	b510      	push	{r4, lr}
 8001396:	4604      	mov	r4, r0
 enc28j60_SetBank(addres);
 8001398:	f7ff ffe4 	bl	8001364 <enc28j60_SetBank>
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 800139c:	4620      	mov	r0, r4
}
 800139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 return enc28j60_readOp(ENC28J60_READ_CTRL_REG,addres);
 80013a2:	f7ff bfa3 	b.w	80012ec <enc28j60_readOp.constprop.0>

080013a6 <enc28j60_writeRegByte>:
{
 80013a6:	b538      	push	{r3, r4, r5, lr}
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 enc28j60_SetBank(addres);
 80013ac:	f7ff ffda 	bl	8001364 <enc28j60_SetBank>
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 80013b0:	462a      	mov	r2, r5
 80013b2:	4621      	mov	r1, r4
}
 80013b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeOp(ENC28J60_WRITE_CTRL_REG,addres,data);
 80013b8:	2040      	movs	r0, #64	; 0x40
 80013ba:	f7ff bfb7 	b.w	800132c <enc28j60_writeOp>

080013be <enc28j60_writeReg>:
//--------------------------------------------------
static void enc28j60_writeReg(uint8_t addres,uint16_t data)
{
 80013be:	b538      	push	{r3, r4, r5, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 enc28j60_writeRegByte(addres, data);
 80013c4:	b2c9      	uxtb	r1, r1
 80013c6:	f7ff ffee 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(addres+1, data>>8);
 80013ca:	1c60      	adds	r0, r4, #1
 80013cc:	0a29      	lsrs	r1, r5, #8
 80013ce:	b2c0      	uxtb	r0, r0
}
 80013d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 enc28j60_writeRegByte(addres+1, data>>8);
 80013d4:	f7ff bfe7 	b.w	80013a6 <enc28j60_writeRegByte>

080013d8 <enc28j60_writePhy>:
//--------------------------------------------------
static void enc28j60_writePhy(uint8_t addres,uint16_t data)
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	460c      	mov	r4, r1
  enc28j60_writeRegByte(MIREGADR, addres);
 80013dc:	4601      	mov	r1, r0
 80013de:	20d4      	movs	r0, #212	; 0xd4
 80013e0:	f7ff ffe1 	bl	80013a6 <enc28j60_writeRegByte>
  enc28j60_writeReg(MIWR, data);
 80013e4:	4621      	mov	r1, r4
 80013e6:	20d6      	movs	r0, #214	; 0xd6
 80013e8:	f7ff ffe9 	bl	80013be <enc28j60_writeReg>
  while(enc28j60_readRegByte(MISTAT)&MISTAT_BUSY)
 80013ec:	20ea      	movs	r0, #234	; 0xea
 80013ee:	f7ff ffd1 	bl	8001394 <enc28j60_readRegByte>
 80013f2:	07c3      	lsls	r3, r0, #31
 80013f4:	d4fa      	bmi.n	80013ec <enc28j60_writePhy+0x14>
  ;
}
 80013f6:	bd10      	pop	{r4, pc}

080013f8 <enc28j60_ini>:
//--------------------------------------------------
void enc28j60_ini(void)
{
 80013f8:	b510      	push	{r4, lr}
 LD_OFF;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2120      	movs	r1, #32
 80013fe:	483e      	ldr	r0, [pc, #248]	; (80014f8 <enc28j60_ini+0x100>)
 8001400:	f7ff f8a8 	bl	8000554 <HAL_GPIO_WritePin>
 enc28j60_writeOp(ENC28J60_SOFT_RESET,0,ENC28J60_SOFT_RESET);
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	2100      	movs	r1, #0
 8001408:	4610      	mov	r0, r2
 800140a:	f7ff ff8f 	bl	800132c <enc28j60_writeOp>
 HAL_Delay(2);
 800140e:	2002      	movs	r0, #2
 8001410:	f7fe feec 	bl	80001ec <HAL_Delay>
 //Kiem tra lai moi thu da khoi dong lai chua
 while(!enc28j60_readOp(ENC28J60_READ_CTRL_REG,ESTAT)&ESTAT_CLKRDY)
 8001414:	201d      	movs	r0, #29
 8001416:	f7ff ff69 	bl	80012ec <enc28j60_readOp.constprop.0>
 800141a:	2800      	cmp	r0, #0
 800141c:	d0fa      	beq.n	8001414 <enc28j60_ini+0x1c>
 ;
 // Cau hinh bo dem 
 enc28j60_writeReg(ERXST,RXSTART_INIT);
 800141e:	2100      	movs	r1, #0
 8001420:	2008      	movs	r0, #8
 8001422:	f7ff ffcc 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeReg(ERXRDPT,RXSTART_INIT);
 8001426:	2100      	movs	r1, #0
 8001428:	200c      	movs	r0, #12
 800142a:	f7ff ffc8 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeReg(ERXND,RXSTOP_INIT);
 800142e:	f640 31ff 	movw	r1, #3071	; 0xbff
 8001432:	200a      	movs	r0, #10
 8001434:	f7ff ffc3 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeReg(ETXST,TXSTART_INIT);
 8001438:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800143c:	2004      	movs	r0, #4
 800143e:	f7ff ffbe 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeReg(ETXND,TXSTOP_INIT);
 8001442:	f241 11ff 	movw	r1, #4607	; 0x11ff
 8001446:	2006      	movs	r0, #6
 8001448:	f7ff ffb9 	bl	80013be <enc28j60_writeReg>
 // Enable Broadcast
 enc28j60_writeRegByte(ERXFCON,enc28j60_readRegByte(ERXFCON)|ERXFCON_BCEN);
 800144c:	2038      	movs	r0, #56	; 0x38
 800144e:	f7ff ffa1 	bl	8001394 <enc28j60_readRegByte>
 8001452:	f040 0101 	orr.w	r1, r0, #1
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	2038      	movs	r0, #56	; 0x38
 800145a:	f7ff ffa4 	bl	80013a6 <enc28j60_writeRegByte>
 // Cau hinh lop lien ket
 enc28j60_writeRegByte(MACON1,MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 800145e:	210d      	movs	r1, #13
 8001460:	20c0      	movs	r0, #192	; 0xc0
 8001462:	f7ff ffa0 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MACON2,0x00);
 8001466:	2100      	movs	r1, #0
 8001468:	20c1      	movs	r0, #193	; 0xc1
 800146a:	f7ff ff9c 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,MACON3,MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	21c2      	movs	r1, #194	; 0xc2
 8001472:	2080      	movs	r0, #128	; 0x80
 8001474:	f7ff ff5a 	bl	800132c <enc28j60_writeOp>
 enc28j60_writeReg(MAIPG,0x0C12);
 8001478:	f640 4112 	movw	r1, #3090	; 0xc12
 800147c:	20c6      	movs	r0, #198	; 0xc6
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 800147e:	4c1f      	ldr	r4, [pc, #124]	; (80014fc <enc28j60_ini+0x104>)
 enc28j60_writeReg(MAIPG,0x0C12);
 8001480:	f7ff ff9d 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeRegByte(MABBIPG,0x12);//Khong gian giua cac khung
 8001484:	2112      	movs	r1, #18
 8001486:	20c4      	movs	r0, #196	; 0xc4
 8001488:	f7ff ff8d 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeReg(MAMXFL,MAX_FRAMELEN);//Kich thuoc toi da
 800148c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001490:	20ca      	movs	r0, #202	; 0xca
 8001492:	f7ff ff94 	bl	80013be <enc28j60_writeReg>
 enc28j60_writeRegByte(MAADR5,macaddr[0]);//Set MAC addres
 8001496:	7821      	ldrb	r1, [r4, #0]
 8001498:	20e4      	movs	r0, #228	; 0xe4
 800149a:	f7ff ff84 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR4,macaddr[1]);
 800149e:	7861      	ldrb	r1, [r4, #1]
 80014a0:	20e5      	movs	r0, #229	; 0xe5
 80014a2:	f7ff ff80 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR3,macaddr[2]);
 80014a6:	78a1      	ldrb	r1, [r4, #2]
 80014a8:	20e2      	movs	r0, #226	; 0xe2
 80014aa:	f7ff ff7c 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR2,macaddr[3]);
 80014ae:	78e1      	ldrb	r1, [r4, #3]
 80014b0:	20e3      	movs	r0, #227	; 0xe3
 80014b2:	f7ff ff78 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR1,macaddr[4]);
 80014b6:	7921      	ldrb	r1, [r4, #4]
 80014b8:	20e0      	movs	r0, #224	; 0xe0
 80014ba:	f7ff ff74 	bl	80013a6 <enc28j60_writeRegByte>
 enc28j60_writeRegByte(MAADR0,macaddr[5]);
 80014be:	7961      	ldrb	r1, [r4, #5]
 80014c0:	20e1      	movs	r0, #225	; 0xe1
 80014c2:	f7ff ff70 	bl	80013a6 <enc28j60_writeRegByte>
 // Dieu chinh lop vat ly 
 enc28j60_writePhy(PHCON2,PHCON2_HDLDIS);//vo hieu hoa loopback
 80014c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ca:	2010      	movs	r0, #16
 80014cc:	f7ff ff84 	bl	80013d8 <enc28j60_writePhy>
 enc28j60_writePhy(PHLCON,PHLCON_LACFG2|PHLCON_LBCFG2|PHLCON_LBCFG1|PHLCON_LBCFG0|PHLCON_LFRQ0|PHLCON_STRCH); // Den LED
 80014d0:	f240 4176 	movw	r1, #1142	; 0x476
 80014d4:	2014      	movs	r0, #20
 80014d6:	f7ff ff7f 	bl	80013d8 <enc28j60_writePhy>
 enc28j60_SetBank (ECON1);
 80014da:	201f      	movs	r0, #31
 80014dc:	f7ff ff42 	bl	8001364 <enc28j60_SetBank>
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 80014e0:	22c0      	movs	r2, #192	; 0xc0
 80014e2:	211b      	movs	r1, #27
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	f7ff ff21 	bl	800132c <enc28j60_writeOp>
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN); // allow receiving packets
}
 80014ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 enc28j60_writeOp (ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN); // allow receiving packets
 80014ee:	2204      	movs	r2, #4
 80014f0:	211f      	movs	r1, #31
 80014f2:	2080      	movs	r0, #128	; 0x80
 80014f4:	f7ff bf1a 	b.w	800132c <enc28j60_writeOp>
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	20000008 	.word	0x20000008

08001500 <enc28j60_packetReceive>:
//--------------------------------------------------
uint16_t enc28j60_packetReceive(uint8_t *buf,uint16_t buflen)
{
 8001500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001502:	4605      	mov	r5, r0
 uint16_t len=0;
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001504:	2039      	movs	r0, #57	; 0x39
{
 8001506:	460e      	mov	r6, r1
 if(enc28j60_readRegByte(EPKTCNT)>0)
 8001508:	f7ff ff44 	bl	8001394 <enc28j60_readRegByte>
 800150c:	b388      	cbz	r0, 8001572 <enc28j60_packetReceive+0x72>
 {
   enc28j60_writeReg(ERDPT,gNextPacketPtr);
 800150e:	4f1a      	ldr	r7, [pc, #104]	; (8001578 <enc28j60_packetReceive+0x78>)
 8001510:	2000      	movs	r0, #0
 8001512:	8839      	ldrh	r1, [r7, #0]
 8001514:	f7ff ff53 	bl	80013be <enc28j60_writeReg>
   struct{
    uint16_t nextPacket;
    uint16_t byteCount;
    uint16_t status;
   } header;
	 enc28j60_readBuf(sizeof header,(uint8_t*)&header);
 8001518:	2006      	movs	r0, #6
 800151a:	4669      	mov	r1, sp
 800151c:	f7ff fea8 	bl	8001270 <enc28j60_readBuf>
	 gNextPacketPtr=header.nextPacket;
	 len=header.byteCount-4;//remove the CRC count
	 if(len>buflen) len=buflen;
	 if((header.status&0x80)==0) len=0;
 8001520:	f8bd 0004 	ldrh.w	r0, [sp, #4]
	 gNextPacketPtr=header.nextPacket;
 8001524:	f8bd 3000 	ldrh.w	r3, [sp]
	 if((header.status&0x80)==0) len=0;
 8001528:	f010 0480 	ands.w	r4, r0, #128	; 0x80
	 gNextPacketPtr=header.nextPacket;
 800152c:	603b      	str	r3, [r7, #0]
	 if((header.status&0x80)==0) len=0;
 800152e:	d00a      	beq.n	8001546 <enc28j60_packetReceive+0x46>
	 len=header.byteCount-4;//remove the CRC count
 8001530:	f8bd 4002 	ldrh.w	r4, [sp, #2]
   else enc28j60_readBuf(len, buf);
 8001534:	4629      	mov	r1, r5
	 len=header.byteCount-4;//remove the CRC count
 8001536:	3c04      	subs	r4, #4
 8001538:	b2a4      	uxth	r4, r4
 800153a:	42b4      	cmp	r4, r6
 800153c:	bf28      	it	cs
 800153e:	4634      	movcs	r4, r6
   else enc28j60_readBuf(len, buf);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fe95 	bl	8001270 <enc28j60_readBuf>
	 buf[len]=0;
 8001546:	2300      	movs	r3, #0
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 8001548:	6839      	ldr	r1, [r7, #0]
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
   else
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 800154a:	200c      	movs	r0, #12
	 if(gNextPacketPtr-1>RXSTOP_INIT)
 800154c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 8001550:	bfd6      	itet	le
 8001552:	f101 31ff 	addle.w	r1, r1, #4294967295
     enc28j60_writeReg(ERXRDPT,RXSTOP_INIT);
 8001556:	f640 31ff 	movwgt	r1, #3071	; 0xbff
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 800155a:	b289      	uxthle	r1, r1
	 buf[len]=0;
 800155c:	552b      	strb	r3, [r5, r4]
     enc28j60_writeReg(ERXRDPT,gNextPacketPtr-1);
 800155e:	f7ff ff2e 	bl	80013be <enc28j60_writeReg>
	 enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON2,ECON2_PKTDEC);
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	211e      	movs	r1, #30
 8001566:	2080      	movs	r0, #128	; 0x80
 8001568:	f7ff fee0 	bl	800132c <enc28j60_writeOp>
 }
 return len;
}
 800156c:	4620      	mov	r0, r4
 800156e:	b003      	add	sp, #12
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 uint16_t len=0;
 8001572:	4604      	mov	r4, r0
 8001574:	e7fa      	b.n	800156c <enc28j60_packetReceive+0x6c>
 8001576:	bf00      	nop
 8001578:	2000009c 	.word	0x2000009c

0800157c <enc28j60_packetSend>:
//--------------------------------------------------
void enc28j60_packetSend(uint8_t *buf,uint16_t buflen)
{
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	4605      	mov	r5, r0
 8001580:	460c      	mov	r4, r1
  while(enc28j60_readOp(ENC28J60_READ_CTRL_REG,ECON1)&ECON1_TXRTS)
 8001582:	201f      	movs	r0, #31
 8001584:	f7ff feb2 	bl	80012ec <enc28j60_readOp.constprop.0>
 8001588:	0703      	lsls	r3, r0, #28
 800158a:	d419      	bmi.n	80015c0 <enc28j60_packetSend+0x44>
    {
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
    }
  }
	enc28j60_writeReg(EWRPT,TXSTART_INIT);
 800158c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001590:	2002      	movs	r0, #2
 8001592:	f7ff ff14 	bl	80013be <enc28j60_writeReg>
  enc28j60_writeReg(ETXND,TXSTART_INIT+buflen);
 8001596:	f504 6140 	add.w	r1, r4, #3072	; 0xc00
 800159a:	b289      	uxth	r1, r1
 800159c:	2006      	movs	r0, #6
 800159e:	f7ff ff0e 	bl	80013be <enc28j60_writeReg>
  enc28j60_writeBuf(1,(uint8_t*)"x00");
 80015a2:	490f      	ldr	r1, [pc, #60]	; (80015e0 <enc28j60_packetSend+0x64>)
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fe81 	bl	80012ac <enc28j60_writeBuf>
  enc28j60_writeBuf(buflen,buf);
 80015aa:	4629      	mov	r1, r5
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fe7d 	bl	80012ac <enc28j60_writeBuf>
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRTS);
}
 80015b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRTS);
 80015b6:	2208      	movs	r2, #8
 80015b8:	211f      	movs	r1, #31
 80015ba:	2080      	movs	r0, #128	; 0x80
 80015bc:	f7ff beb6 	b.w	800132c <enc28j60_writeOp>
		if(enc28j60_readRegByte(EIR)& EIR_TXERIF)
 80015c0:	201c      	movs	r0, #28
 80015c2:	f7ff fee7 	bl	8001394 <enc28j60_readRegByte>
 80015c6:	0782      	lsls	r2, r0, #30
 80015c8:	d5db      	bpl.n	8001582 <enc28j60_packetSend+0x6>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_SET,ECON1,ECON1_TXRST);
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	211f      	movs	r1, #31
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff feac 	bl	800132c <enc28j60_writeOp>
      enc28j60_writeOp(ENC28J60_BIT_FIELD_CLR,ECON1,ECON1_TXRST);
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	211f      	movs	r1, #31
 80015d8:	20a0      	movs	r0, #160	; 0xa0
 80015da:	f7ff fea7 	bl	800132c <enc28j60_writeOp>
 80015de:	e7d0      	b.n	8001582 <enc28j60_packetSend+0x6>
 80015e0:	08002658 	.word	0x08002658

080015e4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 80015e8:	b530      	push	{r4, r5, lr}
 80015ea:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ec:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ee:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015f0:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80015f6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015fe:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001602:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001604:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f7fe ffab 	bl	8000560 <HAL_RCC_OscConfig>
 800160a:	b100      	cbz	r0, 800160e <SystemClock_Config+0x2a>
 800160c:	e7fe      	b.n	800160c <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001618:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800161a:	4621      	mov	r1, r4
 800161c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001620:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001622:	f7ff f965 	bl	80008f0 <HAL_RCC_ClockConfig>
 8001626:	4604      	mov	r4, r0
 8001628:	b100      	cbz	r0, 800162c <SystemClock_Config+0x48>
 800162a:	e7fe      	b.n	800162a <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800162c:	f7ff fa04 	bl	8000a38 <HAL_RCC_GetHCLKFreq>
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	fbb0 f0f3 	udiv	r0, r0, r3
 8001638:	f7fe fe3c 	bl	80002b4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe4f 	bl	80002e0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001642:	4622      	mov	r2, r4
 8001644:	4621      	mov	r1, r4
 8001646:	f04f 30ff 	mov.w	r0, #4294967295
 800164a:	f7fe fdf3 	bl	8000234 <HAL_NVIC_SetPriority>
}
 800164e:	b011      	add	sp, #68	; 0x44
 8001650:	bd30      	pop	{r4, r5, pc}
	...

08001654 <main>:
{
 8001654:	b500      	push	{lr}
 8001656:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001658:	f7fe fda4 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800165c:	f7ff ffc2 	bl	80015e4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <main+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001662:	2110      	movs	r1, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001664:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001666:	4833      	ldr	r0, [pc, #204]	; (8001734 <main+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	f002 0220 	and.w	r2, r2, #32
 8001676:	9201      	str	r2, [sp, #4]
 8001678:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	f042 0204 	orr.w	r2, r2, #4
 8001680:	619a      	str	r2, [r3, #24]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	f002 0204 	and.w	r2, r2, #4
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	699a      	ldr	r2, [r3, #24]
 800168e:	f042 0208 	orr.w	r2, r2, #8
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	9303      	str	r3, [sp, #12]
 800169e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016a0:	f7fe ff58 	bl	8000554 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2120      	movs	r1, #32
 80016a8:	4823      	ldr	r0, [pc, #140]	; (8001738 <main+0xe4>)
 80016aa:	f7fe ff53 	bl	8000554 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ae:	2310      	movs	r3, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	4820      	ldr	r0, [pc, #128]	; (8001734 <main+0xe0>)
 80016b2:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f7fe fe6a 	bl	8000394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016c0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	481d      	ldr	r0, [pc, #116]	; (8001738 <main+0xe4>)
 80016c4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f7fe fe62 	bl	8000394 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d0:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi1.Instance = SPI1;
 80016d4:	4819      	ldr	r0, [pc, #100]	; (800173c <main+0xe8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0xec>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016dc:	e880 1008 	stmia.w	r0, {r3, ip}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e0:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e2:	6182      	str	r2, [r0, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016ec:	2208      	movs	r2, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ee:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f4:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016f6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 10;
 80016f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fa:	f7ff fb17 	bl	8000d2c <HAL_SPI_Init>
 80016fe:	b100      	cbz	r0, 8001702 <main+0xae>
 8001700:	e7fe      	b.n	8001700 <main+0xac>
  huart1.Init.BaudRate = 230400;
 8001702:	f44f 3261 	mov.w	r2, #230400	; 0x38400
  huart1.Instance = USART1;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <main+0xf0>)
  huart1.Init.BaudRate = 230400;
 8001708:	490f      	ldr	r1, [pc, #60]	; (8001748 <main+0xf4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 230400;
 800170c:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001712:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001714:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800171a:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800171e:	f7ff fc13 	bl	8000f48 <HAL_UART_Init>
 8001722:	b100      	cbz	r0, 8001726 <main+0xd2>
 8001724:	e7fe      	b.n	8001724 <main+0xd0>
  net_ini();
 8001726:	f000 f811 	bl	800174c <net_ini>
	  net_poll();
 800172a:	f000 f9f7 	bl	8001b1c <net_poll>
 800172e:	e7fc      	b.n	800172a <main+0xd6>
 8001730:	40021000 	.word	0x40021000
 8001734:	40010800 	.word	0x40010800
 8001738:	40010c00 	.word	0x40010c00
 800173c:	2000012c 	.word	0x2000012c
 8001740:	40013000 	.word	0x40013000
 8001744:	200000ec 	.word	0x200000ec
 8001748:	40013800 	.word	0x40013800

0800174c <net_ini>:
extern uint8_t macaddr[6];
uint8_t ipaddr[4]=IP_ADDR;
char str1[60]={0};
//--------------------------------------------------
void net_ini(void)
{
 800174c:	b510      	push	{r4, lr}
  enc28j60_ini();
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 800174e:	4c09      	ldr	r4, [pc, #36]	; (8001774 <net_ini+0x28>)
  enc28j60_ini();
 8001750:	f7ff fe52 	bl	80013f8 <enc28j60_ini>
  sprintf(str1,"Hello ENC28J60 Ethernet Shield !\r\n");
 8001754:	4908      	ldr	r1, [pc, #32]	; (8001778 <net_ini+0x2c>)
 8001756:	4620      	mov	r0, r4
 8001758:	f000 fb4c 	bl	8001df4 <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 800175c:	4620      	mov	r0, r4
 800175e:	f7fe fcf5 	bl	800014c <strlen>
 8001762:	4621      	mov	r1, r4
}
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001768:	b282      	uxth	r2, r0
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <net_ini+0x30>)
 8001770:	f7ff bc18 	b.w	8000fa4 <HAL_UART_Transmit>
 8001774:	200000a0 	.word	0x200000a0
 8001778:	0800277b 	.word	0x0800277b
 800177c:	200000ec 	.word	0x200000ec

08001780 <checksum>:
//--------------------------------------------------
uint16_t checksum(uint8_t *ptr, uint16_t len)
{
  uint32_t sum = 0;
 8001780:	2300      	movs	r3, #0
{
 8001782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001784:	084c      	lsrs	r4, r1, #1
 8001786:	eb00 0544 	add.w	r5, r0, r4, lsl #1
 800178a:	1c42      	adds	r2, r0, #1
 800178c:	3503      	adds	r5, #3
 800178e:	3202      	adds	r2, #2
	while(len>1)
 8001790:	4295      	cmp	r5, r2
 8001792:	d114      	bne.n	80017be <checksum+0x3e>
  {
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
	ptr+=2;
    len-=2;
  }
	if(len) sum+=((uint32_t)*ptr)<<8;
 8001794:	ebc4 32c4 	rsb	r2, r4, r4, lsl #15
 8001798:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800179c:	b289      	uxth	r1, r1
 800179e:	b119      	cbz	r1, 80017a8 <checksum+0x28>
 80017a0:	f810 2014 	ldrb.w	r2, [r0, r4, lsl #1]
 80017a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 80017a8:	0c1a      	lsrs	r2, r3, #16
 80017aa:	d110      	bne.n	80017ce <checksum+0x4e>
	return ~be16toword((uint16_t)sum);
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <checksum+0x54>)
 80017ae:	ea00 2003 	and.w	r0, r0, r3, lsl #8
 80017b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80017b6:	4303      	orrs	r3, r0
 80017b8:	43d8      	mvns	r0, r3
}
 80017ba:	b280      	uxth	r0, r0
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (uint16_t) (((uint32_t)*ptr<<8)|*(ptr+1));
 80017be:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 80017c2:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 80017c6:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80017ca:	4433      	add	r3, r6
 80017cc:	e7df      	b.n	800178e <checksum+0xe>
 80017ce:	b29b      	uxth	r3, r3
	while (sum>>16) sum=(uint16_t)sum+(sum>>16);
 80017d0:	4413      	add	r3, r2
 80017d2:	e7e9      	b.n	80017a8 <checksum+0x28>
 80017d4:	00ffff00 	.word	0x00ffff00

080017d8 <arp_read>:
//--------------------------------------------------
uint8_t arp_read(enc28j60_frame_ptr *frame, uint16_t len)
{
	uint8_t res=0;
  arp_msg_ptr *msg=(void*)(frame->data);
	if (len>=sizeof(arp_msg_ptr))
 80017d8:	291b      	cmp	r1, #27
{
 80017da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017dc:	4604      	mov	r4, r0
	if (len>=sizeof(arp_msg_ptr))
 80017de:	d976      	bls.n	80018ce <arp_read+0xf6>
  {
   if ((msg->net_tp==ARP_ETH)&&(msg->proto_tp==ARP_IP))
 80017e0:	89c3      	ldrh	r3, [r0, #14]
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e6:	d172      	bne.n	80018ce <arp_read+0xf6>
 80017e8:	8a03      	ldrh	r3, [r0, #16]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d16f      	bne.n	80018ce <arp_read+0xf6>
   {
    if ((msg->op==ARP_REQUEST)&&(!memcmp(msg->ipaddr_dst,ipaddr,4)))
 80017ee:	8a83      	ldrh	r3, [r0, #20]
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	d16b      	bne.n	80018ce <arp_read+0xf6>
 80017f6:	2204      	movs	r2, #4
 80017f8:	4936      	ldr	r1, [pc, #216]	; (80018d4 <arp_read+0xfc>)
 80017fa:	3026      	adds	r0, #38	; 0x26
 80017fc:	f000 fac6 	bl	8001d8c <memcmp>
 8001800:	2800      	cmp	r0, #0
 8001802:	d164      	bne.n	80018ce <arp_read+0xf6>
    {
	  sprintf(str1,"request\r\nmac_src %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001804:	7ee1      	ldrb	r1, [r4, #27]
 8001806:	7de3      	ldrb	r3, [r4, #23]
 8001808:	9103      	str	r1, [sp, #12]
 800180a:	7ea1      	ldrb	r1, [r4, #26]
 800180c:	7da2      	ldrb	r2, [r4, #22]
 800180e:	9102      	str	r1, [sp, #8]
 8001810:	7e61      	ldrb	r1, [r4, #25]
 8001812:	4831      	ldr	r0, [pc, #196]	; (80018d8 <arp_read+0x100>)
 8001814:	9101      	str	r1, [sp, #4]
 8001816:	7e21      	ldrb	r1, [r4, #24]
 8001818:	9100      	str	r1, [sp, #0]
 800181a:	4930      	ldr	r1, [pc, #192]	; (80018dc <arp_read+0x104>)
 800181c:	f000 fac6 	bl	8001dac <siprintf>
      msg->macaddr_src[0],msg->macaddr_src[1],msg->macaddr_src[2],msg->macaddr_src[3],msg->macaddr_src[4],msg->macaddr_src[5]);
      HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001820:	482d      	ldr	r0, [pc, #180]	; (80018d8 <arp_read+0x100>)
 8001822:	f7fe fc93 	bl	800014c <strlen>
 8001826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182a:	b282      	uxth	r2, r0
 800182c:	492a      	ldr	r1, [pc, #168]	; (80018d8 <arp_read+0x100>)
 800182e:	482c      	ldr	r0, [pc, #176]	; (80018e0 <arp_read+0x108>)
 8001830:	f7ff fbb8 	bl	8000fa4 <HAL_UART_Transmit>
      sprintf(str1,"ip_src %d.%d.%d.%d\r\n",
 8001834:	7fe1      	ldrb	r1, [r4, #31]
 8001836:	7f63      	ldrb	r3, [r4, #29]
 8001838:	9101      	str	r1, [sp, #4]
 800183a:	7fa1      	ldrb	r1, [r4, #30]
 800183c:	7f22      	ldrb	r2, [r4, #28]
 800183e:	9100      	str	r1, [sp, #0]
 8001840:	4825      	ldr	r0, [pc, #148]	; (80018d8 <arp_read+0x100>)
 8001842:	4928      	ldr	r1, [pc, #160]	; (80018e4 <arp_read+0x10c>)
 8001844:	f000 fab2 	bl	8001dac <siprintf>
      msg->ipaddr_src[0],msg->ipaddr_src[1],msg->ipaddr_src[2],msg->ipaddr_src[3]);
      HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001848:	4823      	ldr	r0, [pc, #140]	; (80018d8 <arp_read+0x100>)
 800184a:	f7fe fc7f 	bl	800014c <strlen>
 800184e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001852:	b282      	uxth	r2, r0
 8001854:	4920      	ldr	r1, [pc, #128]	; (80018d8 <arp_read+0x100>)
 8001856:	4822      	ldr	r0, [pc, #136]	; (80018e0 <arp_read+0x108>)
 8001858:	f7ff fba4 	bl	8000fa4 <HAL_UART_Transmit>
      sprintf(str1,"mac_dst %02X:%02X:%02X:%02X:%02X:%02X\r\n",msg->macaddr_dst[0],msg->macaddr_dst[1],msg->macaddr_dst[2],msg->macaddr_dst[3],msg->macaddr_dst[4],msg->macaddr_dst[5]);
 800185c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8001860:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001864:	9103      	str	r1, [sp, #12]
 8001866:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800186a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800186e:	9102      	str	r1, [sp, #8]
 8001870:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
 8001874:	4818      	ldr	r0, [pc, #96]	; (80018d8 <arp_read+0x100>)
 8001876:	9101      	str	r1, [sp, #4]
 8001878:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 800187c:	9100      	str	r1, [sp, #0]
 800187e:	491a      	ldr	r1, [pc, #104]	; (80018e8 <arp_read+0x110>)
 8001880:	f000 fa94 	bl	8001dac <siprintf>
      HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001884:	4814      	ldr	r0, [pc, #80]	; (80018d8 <arp_read+0x100>)
 8001886:	f7fe fc61 	bl	800014c <strlen>
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	b282      	uxth	r2, r0
 8001890:	4911      	ldr	r1, [pc, #68]	; (80018d8 <arp_read+0x100>)
 8001892:	4813      	ldr	r0, [pc, #76]	; (80018e0 <arp_read+0x108>)
 8001894:	f7ff fb86 	bl	8000fa4 <HAL_UART_Transmit>
      sprintf(str1,"ip_dst %d.%d.%d.%d\r\n",
 8001898:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800189c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80018a0:	9101      	str	r1, [sp, #4]
 80018a2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80018a6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80018aa:	9100      	str	r1, [sp, #0]
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <arp_read+0x100>)
 80018ae:	490f      	ldr	r1, [pc, #60]	; (80018ec <arp_read+0x114>)
 80018b0:	f000 fa7c 	bl	8001dac <siprintf>
      msg->ipaddr_dst[0],msg->ipaddr_dst[1],msg->ipaddr_dst[2],msg->ipaddr_dst[3]);
      HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80018b4:	4808      	ldr	r0, [pc, #32]	; (80018d8 <arp_read+0x100>)
 80018b6:	f7fe fc49 	bl	800014c <strlen>
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	b282      	uxth	r2, r0
 80018c0:	4905      	ldr	r1, [pc, #20]	; (80018d8 <arp_read+0x100>)
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <arp_read+0x108>)
 80018c4:	f7ff fb6e 	bl	8000fa4 <HAL_UART_Transmit>
 80018c8:	2001      	movs	r0, #1
      res=1; // Detect arp message request
    }
   }
  }
	return res;
}
 80018ca:	b004      	add	sp, #16
 80018cc:	bd10      	pop	{r4, pc}
	uint8_t res=0;
 80018ce:	2000      	movs	r0, #0
 80018d0:	e7fb      	b.n	80018ca <arp_read+0xf2>
 80018d2:	bf00      	nop
 80018d4:	2000000e 	.word	0x2000000e
 80018d8:	200000a0 	.word	0x200000a0
 80018dc:	0800265c 	.word	0x0800265c
 80018e0:	200000ec 	.word	0x200000ec
 80018e4:	0800268d 	.word	0x0800268d
 80018e8:	080026a2 	.word	0x080026a2
 80018ec:	080026ca 	.word	0x080026ca

080018f0 <eth_send>:
  }
}
//--------------------------------------------------
void eth_send(enc28j60_frame_ptr *frame, uint16_t len)
{
  memcpy(frame->addr_dest,frame->addr_src,6);
 80018f0:	4603      	mov	r3, r0
{
 80018f2:	b430      	push	{r4, r5}
  memcpy(frame->addr_dest,frame->addr_src,6);
 80018f4:	f853 4f06 	ldr.w	r4, [r3, #6]!
  memcpy(frame->addr_src,macaddr,6);
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80018f8:	310e      	adds	r1, #14
  memcpy(frame->addr_dest,frame->addr_src,6);
 80018fa:	6004      	str	r4, [r0, #0]
 80018fc:	889c      	ldrh	r4, [r3, #4]
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 80018fe:	b289      	uxth	r1, r1
  memcpy(frame->addr_dest,frame->addr_src,6);
 8001900:	8084      	strh	r4, [r0, #4]
  memcpy(frame->addr_src,macaddr,6);
 8001902:	4c04      	ldr	r4, [pc, #16]	; (8001914 <eth_send+0x24>)
 8001904:	6825      	ldr	r5, [r4, #0]
 8001906:	f8c0 5006 	str.w	r5, [r0, #6]
 800190a:	88a2      	ldrh	r2, [r4, #4]
 800190c:	809a      	strh	r2, [r3, #4]
}
 800190e:	bc30      	pop	{r4, r5}
  enc28j60_packetSend((void*)frame,len + sizeof(enc28j60_frame_ptr));
 8001910:	f7ff be34 	b.w	800157c <enc28j60_packetSend>
 8001914:	20000008 	.word	0x20000008

08001918 <arp_send>:
  msg->op = ARP_REPLY;
 8001918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191c:	8282      	strh	r2, [r0, #20]
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 800191e:	4602      	mov	r2, r0
{
 8001920:	b410      	push	{r4}
  memcpy(msg->macaddr_dst,msg->macaddr_src,6);
 8001922:	f852 1f16 	ldr.w	r1, [r2, #22]!
 8001926:	6201      	str	r1, [r0, #32]
 8001928:	8891      	ldrh	r1, [r2, #4]
 800192a:	8481      	strh	r1, [r0, #36]	; 0x24
  memcpy(msg->macaddr_src,macaddr,6);
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <arp_send+0x34>)
 800192e:	680c      	ldr	r4, [r1, #0]
 8001930:	8889      	ldrh	r1, [r1, #4]
 8001932:	f8c0 4016 	str.w	r4, [r0, #22]
 8001936:	8091      	strh	r1, [r2, #4]
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 8001938:	69c2      	ldr	r2, [r0, #28]
  eth_send(frame,sizeof(arp_msg_ptr));
 800193a:	211c      	movs	r1, #28
  memcpy(msg->ipaddr_dst,msg->ipaddr_src,4);
 800193c:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <arp_send+0x38>)
}
 8001942:	bc10      	pop	{r4}
  memcpy(msg->ipaddr_src,ipaddr,4);
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	61c2      	str	r2, [r0, #28]
  eth_send(frame,sizeof(arp_msg_ptr));
 8001948:	f7ff bfd2 	b.w	80018f0 <eth_send>
 800194c:	20000008 	.word	0x20000008
 8001950:	2000000e 	.word	0x2000000e

08001954 <ip_send>:
  ip_pkt->len=be16toword(len);
 8001954:	ba4b      	rev16	r3, r1
{
 8001956:	b570      	push	{r4, r5, r6, lr}
  ip_pkt->len=be16toword(len);
 8001958:	8203      	strh	r3, [r0, #16]
  ip_pkt->ttl=128;
 800195a:	2380      	movs	r3, #128	; 0x80
  ip_pkt->fl_frg_of=0;
 800195c:	2500      	movs	r5, #0
  ip_pkt->ttl=128;
 800195e:	7583      	strb	r3, [r0, #22]
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 8001960:	f8d0 301a 	ldr.w	r3, [r0, #26]
{
 8001964:	4604      	mov	r4, r0
  memcpy(ip_pkt->ipaddr_dst,ip_pkt->ipaddr_src,4);
 8001966:	f8c0 301e 	str.w	r3, [r0, #30]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <ip_send+0x3c>)
{
 800196c:	460e      	mov	r6, r1
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 800196e:	681b      	ldr	r3, [r3, #0]
  ip_pkt->fl_frg_of=0;
 8001970:	8285      	strh	r5, [r0, #20]
  memcpy(ip_pkt->ipaddr_src,ipaddr,4);
 8001972:	f8c0 301a 	str.w	r3, [r0, #26]
  ip_pkt->cs = 0;
 8001976:	8305      	strh	r5, [r0, #24]
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr));
 8001978:	2114      	movs	r1, #20
 800197a:	300e      	adds	r0, #14
 800197c:	f7ff ff00 	bl	8001780 <checksum>
  eth_send(frame,len);
 8001980:	4631      	mov	r1, r6
  ip_pkt->cs = checksum((void*)ip_pkt,sizeof(ip_pkt_ptr));
 8001982:	8320      	strh	r0, [r4, #24]
  eth_send(frame,len);
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff ffb3 	bl	80018f0 <eth_send>
}
 800198a:	4628      	mov	r0, r5
 800198c:	bd70      	pop	{r4, r5, r6, pc}
 800198e:	bf00      	nop
 8001990:	2000000e 	.word	0x2000000e

08001994 <icmp_read>:
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 8001994:	2907      	cmp	r1, #7
{
 8001996:	b538      	push	{r3, r4, r5, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
	if ((len>=sizeof(icmp_pkt_ptr))&&(icmp_pkt->msg_tp==ICMP_REQ))
 800199c:	d921      	bls.n	80019e2 <icmp_read+0x4e>
 800199e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d11d      	bne.n	80019e2 <icmp_read+0x4e>
    sprintf(str1,"icmp request\r\n");
 80019a6:	4910      	ldr	r1, [pc, #64]	; (80019e8 <icmp_read+0x54>)
 80019a8:	4810      	ldr	r0, [pc, #64]	; (80019ec <icmp_read+0x58>)
 80019aa:	f000 fa23 	bl	8001df4 <strcpy>
    HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <icmp_read+0x58>)
 80019b0:	f7fe fbcc 	bl	800014c <strlen>
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	b282      	uxth	r2, r0
 80019ba:	490c      	ldr	r1, [pc, #48]	; (80019ec <icmp_read+0x58>)
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <icmp_read+0x5c>)
 80019be:	f7ff faf1 	bl	8000fa4 <HAL_UART_Transmit>
	icmp_pkt->msg_tp=ICMP_REPLY;
 80019c2:	2300      	movs	r3, #0
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 80019c4:	4629      	mov	r1, r5
	icmp_pkt->msg_tp=ICMP_REPLY;
 80019c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    icmp_pkt->cs=0;
 80019ca:	84a3      	strh	r3, [r4, #36]	; 0x24
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 80019cc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 80019d0:	f7ff fed6 	bl	8001780 <checksum>
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 80019d4:	f105 0114 	add.w	r1, r5, #20
    icmp_pkt->cs=checksum((void*)icmp_pkt,len);
 80019d8:	84a0      	strh	r0, [r4, #36]	; 0x24
	ip_send(frame,len+sizeof(ip_pkt_ptr));
 80019da:	b289      	uxth	r1, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff ffb9 	bl	8001954 <ip_send>
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	bf00      	nop
 80019e8:	0800276c 	.word	0x0800276c
 80019ec:	200000a0 	.word	0x200000a0
 80019f0:	200000ec 	.word	0x200000ec

080019f4 <ip_read>:
{
 80019f4:	b510      	push	{r4, lr}
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 80019f6:	7b83      	ldrb	r3, [r0, #14]
{
 80019f8:	4604      	mov	r4, r0
	if((ip_pkt->verlen==0x45)&&(!memcmp(ip_pkt->ipaddr_dst,ipaddr,4)))
 80019fa:	2b45      	cmp	r3, #69	; 0x45
 80019fc:	d111      	bne.n	8001a22 <ip_read+0x2e>
 80019fe:	2204      	movs	r2, #4
 8001a00:	4909      	ldr	r1, [pc, #36]	; (8001a28 <ip_read+0x34>)
 8001a02:	301e      	adds	r0, #30
 8001a04:	f000 f9c2 	bl	8001d8c <memcmp>
 8001a08:	b958      	cbnz	r0, 8001a22 <ip_read+0x2e>
		if (ip_pkt->prt==IP_ICMP)
 8001a0a:	7de3      	ldrb	r3, [r4, #23]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <ip_read+0x2e>
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 8001a10:	8a23      	ldrh	r3, [r4, #16]
      icmp_read(frame,len1);
 8001a12:	4620      	mov	r0, r4
    len1 = be16toword(ip_pkt->len) - sizeof(ip_pkt_ptr); //len1 = len - sizeof(ip_pkt_ptr)
 8001a14:	0219      	lsls	r1, r3, #8
 8001a16:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
 8001a1a:	3914      	subs	r1, #20
      icmp_read(frame,len1);
 8001a1c:	b289      	uxth	r1, r1
 8001a1e:	f7ff ffb9 	bl	8001994 <icmp_read>
}
 8001a22:	2000      	movs	r0, #0
 8001a24:	bd10      	pop	{r4, pc}
 8001a26:	bf00      	nop
 8001a28:	2000000e 	.word	0x2000000e

08001a2c <eth_read>:
{
 8001a2c:	b530      	push	{r4, r5, lr}
	if (len>=sizeof(enc28j60_frame_ptr))
 8001a2e:	290d      	cmp	r1, #13
{
 8001a30:	b08d      	sub	sp, #52	; 0x34
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
	if (len>=sizeof(enc28j60_frame_ptr))
 8001a36:	d966      	bls.n	8001b06 <eth_read+0xda>
    if(frame->type==ETH_ARP)
 8001a38:	8983      	ldrh	r3, [r0, #12]
 8001a3a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8001a3e:	d132      	bne.n	8001aa6 <eth_read+0x7a>
     sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; arp\r\n",
 8001a40:	79c3      	ldrb	r3, [r0, #7]
 8001a42:	7982      	ldrb	r2, [r0, #6]
 8001a44:	910a      	str	r1, [sp, #40]	; 0x28
 8001a46:	7941      	ldrb	r1, [r0, #5]
 8001a48:	9109      	str	r1, [sp, #36]	; 0x24
 8001a4a:	7901      	ldrb	r1, [r0, #4]
 8001a4c:	9108      	str	r1, [sp, #32]
 8001a4e:	78c1      	ldrb	r1, [r0, #3]
 8001a50:	9107      	str	r1, [sp, #28]
 8001a52:	7881      	ldrb	r1, [r0, #2]
 8001a54:	9106      	str	r1, [sp, #24]
 8001a56:	7841      	ldrb	r1, [r0, #1]
 8001a58:	9105      	str	r1, [sp, #20]
 8001a5a:	7801      	ldrb	r1, [r0, #0]
 8001a5c:	9104      	str	r1, [sp, #16]
 8001a5e:	7ac1      	ldrb	r1, [r0, #11]
 8001a60:	9103      	str	r1, [sp, #12]
 8001a62:	7a81      	ldrb	r1, [r0, #10]
 8001a64:	9102      	str	r1, [sp, #8]
 8001a66:	7a41      	ldrb	r1, [r0, #9]
 8001a68:	9101      	str	r1, [sp, #4]
 8001a6a:	7a01      	ldrb	r1, [r0, #8]
 8001a6c:	4827      	ldr	r0, [pc, #156]	; (8001b0c <eth_read+0xe0>)
 8001a6e:	9100      	str	r1, [sp, #0]
 8001a70:	4927      	ldr	r1, [pc, #156]	; (8001b10 <eth_read+0xe4>)
 8001a72:	f000 f99b 	bl	8001dac <siprintf>
     HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001a76:	4825      	ldr	r0, [pc, #148]	; (8001b0c <eth_read+0xe0>)
 8001a78:	f7fe fb68 	bl	800014c <strlen>
 8001a7c:	4923      	ldr	r1, [pc, #140]	; (8001b0c <eth_read+0xe0>)
 8001a7e:	b282      	uxth	r2, r0
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	4823      	ldr	r0, [pc, #140]	; (8001b14 <eth_read+0xe8>)
 8001a86:	f7ff fa8d 	bl	8000fa4 <HAL_UART_Transmit>
		 if (arp_read(frame,len-sizeof(enc28j60_frame_ptr))) // Ham sizeof voi struct se bo qua thanh phan mang[] nen ta chi doc kich thuoc data (payload) khong doc lai header ethernet frame
 8001a8a:	f1a5 010e 	sub.w	r1, r5, #14
 8001a8e:	b289      	uxth	r1, r1
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff fea1 	bl	80017d8 <arp_read>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d035      	beq.n	8001b06 <eth_read+0xda>
			 arp_send(frame); // Reply
 8001a9a:	4620      	mov	r0, r4
}
 8001a9c:	b00d      	add	sp, #52	; 0x34
 8001a9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			 arp_send(frame); // Reply
 8001aa2:	f7ff bf39 	b.w	8001918 <arp_send>
    else if (frame->type==ETH_IP)
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d12d      	bne.n	8001b06 <eth_read+0xda>
     sprintf(str1,"%02X:%02X:%02X:%02X:%02X:%02X-%02X:%02X:%02X:%02X:%02X:%02X; %d; ip\r\n",
 8001aaa:	79c3      	ldrb	r3, [r0, #7]
 8001aac:	7982      	ldrb	r2, [r0, #6]
 8001aae:	910a      	str	r1, [sp, #40]	; 0x28
 8001ab0:	7941      	ldrb	r1, [r0, #5]
 8001ab2:	9109      	str	r1, [sp, #36]	; 0x24
 8001ab4:	7901      	ldrb	r1, [r0, #4]
 8001ab6:	9108      	str	r1, [sp, #32]
 8001ab8:	78c1      	ldrb	r1, [r0, #3]
 8001aba:	9107      	str	r1, [sp, #28]
 8001abc:	7881      	ldrb	r1, [r0, #2]
 8001abe:	9106      	str	r1, [sp, #24]
 8001ac0:	7841      	ldrb	r1, [r0, #1]
 8001ac2:	9105      	str	r1, [sp, #20]
 8001ac4:	7801      	ldrb	r1, [r0, #0]
 8001ac6:	9104      	str	r1, [sp, #16]
 8001ac8:	7ac1      	ldrb	r1, [r0, #11]
 8001aca:	9103      	str	r1, [sp, #12]
 8001acc:	7a81      	ldrb	r1, [r0, #10]
 8001ace:	9102      	str	r1, [sp, #8]
 8001ad0:	7a41      	ldrb	r1, [r0, #9]
 8001ad2:	9101      	str	r1, [sp, #4]
 8001ad4:	7a01      	ldrb	r1, [r0, #8]
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <eth_read+0xe0>)
 8001ad8:	9100      	str	r1, [sp, #0]
 8001ada:	490f      	ldr	r1, [pc, #60]	; (8001b18 <eth_read+0xec>)
 8001adc:	f000 f966 	bl	8001dac <siprintf>
     HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8001ae0:	480a      	ldr	r0, [pc, #40]	; (8001b0c <eth_read+0xe0>)
 8001ae2:	f7fe fb33 	bl	800014c <strlen>
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	b282      	uxth	r2, r0
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <eth_read+0xe0>)
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <eth_read+0xe8>)
 8001af0:	f7ff fa58 	bl	8000fa4 <HAL_UART_Transmit>
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 8001af4:	4620      	mov	r0, r4
 8001af6:	f1a5 010e 	sub.w	r1, r5, #14
 8001afa:	b289      	uxth	r1, r1
}
 8001afc:	b00d      	add	sp, #52	; 0x34
 8001afe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	 ip_read(frame,len-sizeof(enc28j60_frame_ptr)); // Sua lai cho dung voi ly thuyet
 8001b02:	f7ff bf77 	b.w	80019f4 <ip_read>
}
 8001b06:	b00d      	add	sp, #52	; 0x34
 8001b08:	bd30      	pop	{r4, r5, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a0 	.word	0x200000a0
 8001b10:	080026df 	.word	0x080026df
 8001b14:	200000ec 	.word	0x200000ec
 8001b18:	08002726 	.word	0x08002726

08001b1c <net_poll>:
//--------------------------------------------------
void net_poll(void)
{
 8001b1c:	b510      	push	{r4, lr}
  uint16_t len;
  enc28j60_frame_ptr *frame=(void*)net_buf;
	while ((len=enc28j60_packetReceive(net_buf,sizeof(net_buf)))>0)
 8001b1e:	4c06      	ldr	r4, [pc, #24]	; (8001b38 <net_poll+0x1c>)
 8001b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <net_poll+0x1c>)
 8001b26:	f7ff fceb 	bl	8001500 <enc28j60_packetReceive>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	b900      	cbnz	r0, 8001b30 <net_poll+0x14>
  {
    eth_read(frame,len);
  }
}
 8001b2e:	bd10      	pop	{r4, pc}
    eth_read(frame,len);
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff ff7b 	bl	8001a2c <eth_read>
 8001b36:	e7f3      	b.n	8001b20 <net_poll+0x4>
 8001b38:	20000184 	.word	0x20000184

08001b3c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_MspInit+0x80>)
{
 8001b3e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b42:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	619a      	str	r2, [r3, #24]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	f7fe fb5c 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f06f 000b 	mvn.w	r0, #11
 8001b5e:	4611      	mov	r1, r2
 8001b60:	f7fe fb68 	bl	8000234 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f06f 000a 	mvn.w	r0, #10
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	f7fe fb62 	bl	8000234 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f06f 0009 	mvn.w	r0, #9
 8001b76:	4611      	mov	r1, r2
 8001b78:	f7fe fb5c 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f06f 0004 	mvn.w	r0, #4
 8001b82:	4611      	mov	r1, r2
 8001b84:	f7fe fb56 	bl	8000234 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f06f 0003 	mvn.w	r0, #3
 8001b8e:	4611      	mov	r1, r2
 8001b90:	f7fe fb50 	bl	8000234 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f06f 0001 	mvn.w	r0, #1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	f7fe fb4a 	bl	8000234 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f7fe fb44 	bl	8000234 <HAL_NVIC_SetPriority>

    /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
    */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_MspInit+0x84>)
 8001bae:	6853      	ldr	r3, [r2, #4]
 8001bb0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	b003      	add	sp, #12
 8001bb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001bc6:	6802      	ldr	r2, [r0, #0]
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_SPI_MspInit+0x4c>)
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d11d      	bne.n	8001c0a <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bce:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001bd2:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	480d      	ldr	r0, [pc, #52]	; (8001c14 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001be8:	23a0      	movs	r3, #160	; 0xa0
 8001bea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f7fe fbce 	bl	8000394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	a902      	add	r1, sp, #8
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f7fe fbc5 	bl	8000394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c0a:	b007      	add	sp, #28
 8001c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40010800 	.word	0x40010800

08001c18 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c18:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001c1a:	6802      	ldr	r2, [r0, #0]
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_UART_MspInit+0x60>)
{
 8001c1e:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d127      	bne.n	8001c74 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c24:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c28:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	4811      	ldr	r0, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c48:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f7fe fba1 	bl	8000394 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	a902      	add	r1, sp, #8
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c5a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f7fe fb98 	bl	8000394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c64:	2025      	movs	r0, #37	; 0x25
 8001c66:	4622      	mov	r2, r4
 8001c68:	4621      	mov	r1, r4
 8001c6a:	f7fe fae3 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c6e:	2025      	movs	r0, #37	; 0x25
 8001c70:	f7fe fb14 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c74:	b006      	add	sp, #24
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40010800 	.word	0x40010800

08001c80 <NMI_Handler>:
 8001c80:	4770      	bx	lr

08001c82 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler>

08001c84 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler>

08001c86 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler>

08001c88 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler>

08001c8a <SVC_Handler>:
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c92:	f7fe fa99 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001c9a:	f7fe bb2e 	b.w	80002fa <HAL_SYSTICK_IRQHandler>
	...

08001ca0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ca0:	4801      	ldr	r0, [pc, #4]	; (8001ca8 <USART1_IRQHandler+0x8>)
 8001ca2:	f7ff ba1d 	b.w	80010e0 <HAL_UART_IRQHandler>
 8001ca6:	bf00      	nop
 8001ca8:	200000ec 	.word	0x200000ec

08001cac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <SystemInit+0x40>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <SystemInit+0x44>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cc8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cda:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cde:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <SystemInit+0x48>)
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	f8ff0000 	.word	0xf8ff0000
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cfa:	e003      	b.n	8001d04 <LoopCopyDataInit>

08001cfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d02:	3104      	adds	r1, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d0c:	d3f6      	bcc.n	8001cfc <CopyDataInit>
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d10:	e002      	b.n	8001d18 <LoopFillZerobss>

08001d12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d14:	f842 3b04 	str.w	r3, [r2], #4

08001d18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d1c:	d3f9      	bcc.n	8001d12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d1e:	f7ff ffc5 	bl	8001cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f000 f80f 	bl	8001d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d26:	f7ff fc95 	bl	8001654 <main>
  bx lr
 8001d2a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d2c:	080027f4 	.word	0x080027f4
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d34:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001d38:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001d3c:	20000388 	.word	0x20000388

08001d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>
	...

08001d44 <__libc_init_array>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	2500      	movs	r5, #0
 8001d48:	4e0c      	ldr	r6, [pc, #48]	; (8001d7c <__libc_init_array+0x38>)
 8001d4a:	4c0d      	ldr	r4, [pc, #52]	; (8001d80 <__libc_init_array+0x3c>)
 8001d4c:	1ba4      	subs	r4, r4, r6
 8001d4e:	10a4      	asrs	r4, r4, #2
 8001d50:	42a5      	cmp	r5, r4
 8001d52:	d109      	bne.n	8001d68 <__libc_init_array+0x24>
 8001d54:	f000 fc6c 	bl	8002630 <_init>
 8001d58:	2500      	movs	r5, #0
 8001d5a:	4e0a      	ldr	r6, [pc, #40]	; (8001d84 <__libc_init_array+0x40>)
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <__libc_init_array+0x44>)
 8001d5e:	1ba4      	subs	r4, r4, r6
 8001d60:	10a4      	asrs	r4, r4, #2
 8001d62:	42a5      	cmp	r5, r4
 8001d64:	d105      	bne.n	8001d72 <__libc_init_array+0x2e>
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d6c:	4798      	blx	r3
 8001d6e:	3501      	adds	r5, #1
 8001d70:	e7ee      	b.n	8001d50 <__libc_init_array+0xc>
 8001d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d76:	4798      	blx	r3
 8001d78:	3501      	adds	r5, #1
 8001d7a:	e7f2      	b.n	8001d62 <__libc_init_array+0x1e>
 8001d7c:	080027ec 	.word	0x080027ec
 8001d80:	080027ec 	.word	0x080027ec
 8001d84:	080027ec 	.word	0x080027ec
 8001d88:	080027f0 	.word	0x080027f0

08001d8c <memcmp>:
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	3901      	subs	r1, #1
 8001d90:	4402      	add	r2, r0
 8001d92:	4290      	cmp	r0, r2
 8001d94:	d101      	bne.n	8001d9a <memcmp+0xe>
 8001d96:	2000      	movs	r0, #0
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001d9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	d0f5      	beq.n	8001d92 <memcmp+0x6>
 8001da6:	1b18      	subs	r0, r3, r4
 8001da8:	bd10      	pop	{r4, pc}
	...

08001dac <siprintf>:
 8001dac:	b40e      	push	{r1, r2, r3}
 8001dae:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001db2:	b500      	push	{lr}
 8001db4:	b09c      	sub	sp, #112	; 0x70
 8001db6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001dba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001dbe:	9104      	str	r1, [sp, #16]
 8001dc0:	9107      	str	r1, [sp, #28]
 8001dc2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8001dc8:	9002      	str	r0, [sp, #8]
 8001dca:	9006      	str	r0, [sp, #24]
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <siprintf+0x44>)
 8001dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dd2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001dd6:	6800      	ldr	r0, [r0, #0]
 8001dd8:	a902      	add	r1, sp, #8
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f000 f86e 	bl	8001ebc <_svfiprintf_r>
 8001de0:	2200      	movs	r2, #0
 8001de2:	9b02      	ldr	r3, [sp, #8]
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	b01c      	add	sp, #112	; 0x70
 8001de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dec:	b003      	add	sp, #12
 8001dee:	4770      	bx	lr
 8001df0:	20000018 	.word	0x20000018

08001df4 <strcpy>:
 8001df4:	4603      	mov	r3, r0
 8001df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001dfa:	f803 2b01 	strb.w	r2, [r3], #1
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d1f9      	bne.n	8001df6 <strcpy+0x2>
 8001e02:	4770      	bx	lr

08001e04 <__ssputs_r>:
 8001e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e08:	688e      	ldr	r6, [r1, #8]
 8001e0a:	4682      	mov	sl, r0
 8001e0c:	429e      	cmp	r6, r3
 8001e0e:	460c      	mov	r4, r1
 8001e10:	4691      	mov	r9, r2
 8001e12:	4698      	mov	r8, r3
 8001e14:	d835      	bhi.n	8001e82 <__ssputs_r+0x7e>
 8001e16:	898a      	ldrh	r2, [r1, #12]
 8001e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e1c:	d031      	beq.n	8001e82 <__ssputs_r+0x7e>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	6825      	ldr	r5, [r4, #0]
 8001e22:	6909      	ldr	r1, [r1, #16]
 8001e24:	1a6f      	subs	r7, r5, r1
 8001e26:	6965      	ldr	r5, [r4, #20]
 8001e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001e30:	f108 0301 	add.w	r3, r8, #1
 8001e34:	443b      	add	r3, r7
 8001e36:	429d      	cmp	r5, r3
 8001e38:	bf38      	it	cc
 8001e3a:	461d      	movcc	r5, r3
 8001e3c:	0553      	lsls	r3, r2, #21
 8001e3e:	d531      	bpl.n	8001ea4 <__ssputs_r+0xa0>
 8001e40:	4629      	mov	r1, r5
 8001e42:	f000 fb47 	bl	80024d4 <_malloc_r>
 8001e46:	4606      	mov	r6, r0
 8001e48:	b950      	cbnz	r0, 8001e60 <__ssputs_r+0x5c>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	f8ca 3000 	str.w	r3, [sl]
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e5a:	81a3      	strh	r3, [r4, #12]
 8001e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e60:	463a      	mov	r2, r7
 8001e62:	6921      	ldr	r1, [r4, #16]
 8001e64:	f000 fac4 	bl	80023f0 <memcpy>
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e72:	81a3      	strh	r3, [r4, #12]
 8001e74:	6126      	str	r6, [r4, #16]
 8001e76:	443e      	add	r6, r7
 8001e78:	6026      	str	r6, [r4, #0]
 8001e7a:	4646      	mov	r6, r8
 8001e7c:	6165      	str	r5, [r4, #20]
 8001e7e:	1bed      	subs	r5, r5, r7
 8001e80:	60a5      	str	r5, [r4, #8]
 8001e82:	4546      	cmp	r6, r8
 8001e84:	bf28      	it	cs
 8001e86:	4646      	movcs	r6, r8
 8001e88:	4649      	mov	r1, r9
 8001e8a:	4632      	mov	r2, r6
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f000 faba 	bl	8002406 <memmove>
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	2000      	movs	r0, #0
 8001e96:	1b9b      	subs	r3, r3, r6
 8001e98:	60a3      	str	r3, [r4, #8]
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	441e      	add	r6, r3
 8001e9e:	6026      	str	r6, [r4, #0]
 8001ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea4:	462a      	mov	r2, r5
 8001ea6:	f000 fb73 	bl	8002590 <_realloc_r>
 8001eaa:	4606      	mov	r6, r0
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1e1      	bne.n	8001e74 <__ssputs_r+0x70>
 8001eb0:	6921      	ldr	r1, [r4, #16]
 8001eb2:	4650      	mov	r0, sl
 8001eb4:	f000 fac2 	bl	800243c <_free_r>
 8001eb8:	e7c7      	b.n	8001e4a <__ssputs_r+0x46>
	...

08001ebc <_svfiprintf_r>:
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	b09d      	sub	sp, #116	; 0x74
 8001ec2:	9303      	str	r3, [sp, #12]
 8001ec4:	898b      	ldrh	r3, [r1, #12]
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	061c      	lsls	r4, r3, #24
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4616      	mov	r6, r2
 8001ece:	d50f      	bpl.n	8001ef0 <_svfiprintf_r+0x34>
 8001ed0:	690b      	ldr	r3, [r1, #16]
 8001ed2:	b96b      	cbnz	r3, 8001ef0 <_svfiprintf_r+0x34>
 8001ed4:	2140      	movs	r1, #64	; 0x40
 8001ed6:	f000 fafd 	bl	80024d4 <_malloc_r>
 8001eda:	6028      	str	r0, [r5, #0]
 8001edc:	6128      	str	r0, [r5, #16]
 8001ede:	b928      	cbnz	r0, 8001eec <_svfiprintf_r+0x30>
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	f8c8 3000 	str.w	r3, [r8]
 8001ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eea:	e0c4      	b.n	8002076 <_svfiprintf_r+0x1ba>
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	616b      	str	r3, [r5, #20]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001efa:	2330      	movs	r3, #48	; 0x30
 8001efc:	f04f 0b01 	mov.w	fp, #1
 8001f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f04:	4637      	mov	r7, r6
 8001f06:	463c      	mov	r4, r7
 8001f08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d13c      	bne.n	8001f8a <_svfiprintf_r+0xce>
 8001f10:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f14:	d00b      	beq.n	8001f2e <_svfiprintf_r+0x72>
 8001f16:	4653      	mov	r3, sl
 8001f18:	4632      	mov	r2, r6
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	4640      	mov	r0, r8
 8001f1e:	f7ff ff71 	bl	8001e04 <__ssputs_r>
 8001f22:	3001      	adds	r0, #1
 8001f24:	f000 80a2 	beq.w	800206c <_svfiprintf_r+0x1b0>
 8001f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f2a:	4453      	add	r3, sl
 8001f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f2e:	783b      	ldrb	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 809b 	beq.w	800206c <_svfiprintf_r+0x1b0>
 8001f36:	2300      	movs	r3, #0
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	9304      	str	r3, [sp, #16]
 8001f3e:	9307      	str	r3, [sp, #28]
 8001f40:	9205      	str	r2, [sp, #20]
 8001f42:	9306      	str	r3, [sp, #24]
 8001f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f48:	931a      	str	r3, [sp, #104]	; 0x68
 8001f4a:	2205      	movs	r2, #5
 8001f4c:	7821      	ldrb	r1, [r4, #0]
 8001f4e:	4850      	ldr	r0, [pc, #320]	; (8002090 <_svfiprintf_r+0x1d4>)
 8001f50:	f000 fa40 	bl	80023d4 <memchr>
 8001f54:	1c67      	adds	r7, r4, #1
 8001f56:	9b04      	ldr	r3, [sp, #16]
 8001f58:	b9d8      	cbnz	r0, 8001f92 <_svfiprintf_r+0xd6>
 8001f5a:	06d9      	lsls	r1, r3, #27
 8001f5c:	bf44      	itt	mi
 8001f5e:	2220      	movmi	r2, #32
 8001f60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f64:	071a      	lsls	r2, r3, #28
 8001f66:	bf44      	itt	mi
 8001f68:	222b      	movmi	r2, #43	; 0x2b
 8001f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f6e:	7822      	ldrb	r2, [r4, #0]
 8001f70:	2a2a      	cmp	r2, #42	; 0x2a
 8001f72:	d016      	beq.n	8001fa2 <_svfiprintf_r+0xe6>
 8001f74:	2100      	movs	r1, #0
 8001f76:	200a      	movs	r0, #10
 8001f78:	9a07      	ldr	r2, [sp, #28]
 8001f7a:	4627      	mov	r7, r4
 8001f7c:	783b      	ldrb	r3, [r7, #0]
 8001f7e:	3401      	adds	r4, #1
 8001f80:	3b30      	subs	r3, #48	; 0x30
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	d950      	bls.n	8002028 <_svfiprintf_r+0x16c>
 8001f86:	b1c9      	cbz	r1, 8001fbc <_svfiprintf_r+0x100>
 8001f88:	e011      	b.n	8001fae <_svfiprintf_r+0xf2>
 8001f8a:	2b25      	cmp	r3, #37	; 0x25
 8001f8c:	d0c0      	beq.n	8001f10 <_svfiprintf_r+0x54>
 8001f8e:	4627      	mov	r7, r4
 8001f90:	e7b9      	b.n	8001f06 <_svfiprintf_r+0x4a>
 8001f92:	4a3f      	ldr	r2, [pc, #252]	; (8002090 <_svfiprintf_r+0x1d4>)
 8001f94:	463c      	mov	r4, r7
 8001f96:	1a80      	subs	r0, r0, r2
 8001f98:	fa0b f000 	lsl.w	r0, fp, r0
 8001f9c:	4318      	orrs	r0, r3
 8001f9e:	9004      	str	r0, [sp, #16]
 8001fa0:	e7d3      	b.n	8001f4a <_svfiprintf_r+0x8e>
 8001fa2:	9a03      	ldr	r2, [sp, #12]
 8001fa4:	1d11      	adds	r1, r2, #4
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	9103      	str	r1, [sp, #12]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	db01      	blt.n	8001fb2 <_svfiprintf_r+0xf6>
 8001fae:	9207      	str	r2, [sp, #28]
 8001fb0:	e004      	b.n	8001fbc <_svfiprintf_r+0x100>
 8001fb2:	4252      	negs	r2, r2
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	9207      	str	r2, [sp, #28]
 8001fba:	9304      	str	r3, [sp, #16]
 8001fbc:	783b      	ldrb	r3, [r7, #0]
 8001fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8001fc0:	d10d      	bne.n	8001fde <_svfiprintf_r+0x122>
 8001fc2:	787b      	ldrb	r3, [r7, #1]
 8001fc4:	1c79      	adds	r1, r7, #1
 8001fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8001fc8:	d132      	bne.n	8002030 <_svfiprintf_r+0x174>
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	3702      	adds	r7, #2
 8001fce:	1d1a      	adds	r2, r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	9203      	str	r2, [sp, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bfb8      	it	lt
 8001fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fdc:	9305      	str	r3, [sp, #20]
 8001fde:	4c2d      	ldr	r4, [pc, #180]	; (8002094 <_svfiprintf_r+0x1d8>)
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	7839      	ldrb	r1, [r7, #0]
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f000 f9f5 	bl	80023d4 <memchr>
 8001fea:	b138      	cbz	r0, 8001ffc <_svfiprintf_r+0x140>
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	1b00      	subs	r0, r0, r4
 8001ff0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ff4:	9b04      	ldr	r3, [sp, #16]
 8001ff6:	3701      	adds	r7, #1
 8001ff8:	4303      	orrs	r3, r0
 8001ffa:	9304      	str	r3, [sp, #16]
 8001ffc:	7839      	ldrb	r1, [r7, #0]
 8001ffe:	2206      	movs	r2, #6
 8002000:	4825      	ldr	r0, [pc, #148]	; (8002098 <_svfiprintf_r+0x1dc>)
 8002002:	1c7e      	adds	r6, r7, #1
 8002004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002008:	f000 f9e4 	bl	80023d4 <memchr>
 800200c:	2800      	cmp	r0, #0
 800200e:	d035      	beq.n	800207c <_svfiprintf_r+0x1c0>
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <_svfiprintf_r+0x1e0>)
 8002012:	b9fb      	cbnz	r3, 8002054 <_svfiprintf_r+0x198>
 8002014:	9b03      	ldr	r3, [sp, #12]
 8002016:	3307      	adds	r3, #7
 8002018:	f023 0307 	bic.w	r3, r3, #7
 800201c:	3308      	adds	r3, #8
 800201e:	9303      	str	r3, [sp, #12]
 8002020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002022:	444b      	add	r3, r9
 8002024:	9309      	str	r3, [sp, #36]	; 0x24
 8002026:	e76d      	b.n	8001f04 <_svfiprintf_r+0x48>
 8002028:	fb00 3202 	mla	r2, r0, r2, r3
 800202c:	2101      	movs	r1, #1
 800202e:	e7a4      	b.n	8001f7a <_svfiprintf_r+0xbe>
 8002030:	2300      	movs	r3, #0
 8002032:	240a      	movs	r4, #10
 8002034:	4618      	mov	r0, r3
 8002036:	9305      	str	r3, [sp, #20]
 8002038:	460f      	mov	r7, r1
 800203a:	783a      	ldrb	r2, [r7, #0]
 800203c:	3101      	adds	r1, #1
 800203e:	3a30      	subs	r2, #48	; 0x30
 8002040:	2a09      	cmp	r2, #9
 8002042:	d903      	bls.n	800204c <_svfiprintf_r+0x190>
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ca      	beq.n	8001fde <_svfiprintf_r+0x122>
 8002048:	9005      	str	r0, [sp, #20]
 800204a:	e7c8      	b.n	8001fde <_svfiprintf_r+0x122>
 800204c:	fb04 2000 	mla	r0, r4, r0, r2
 8002050:	2301      	movs	r3, #1
 8002052:	e7f1      	b.n	8002038 <_svfiprintf_r+0x17c>
 8002054:	ab03      	add	r3, sp, #12
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	462a      	mov	r2, r5
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <_svfiprintf_r+0x1e4>)
 800205c:	a904      	add	r1, sp, #16
 800205e:	4640      	mov	r0, r8
 8002060:	f3af 8000 	nop.w
 8002064:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002068:	4681      	mov	r9, r0
 800206a:	d1d9      	bne.n	8002020 <_svfiprintf_r+0x164>
 800206c:	89ab      	ldrh	r3, [r5, #12]
 800206e:	065b      	lsls	r3, r3, #25
 8002070:	f53f af39 	bmi.w	8001ee6 <_svfiprintf_r+0x2a>
 8002074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002076:	b01d      	add	sp, #116	; 0x74
 8002078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207c:	ab03      	add	r3, sp, #12
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	462a      	mov	r2, r5
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <_svfiprintf_r+0x1e4>)
 8002084:	a904      	add	r1, sp, #16
 8002086:	4640      	mov	r0, r8
 8002088:	f000 f884 	bl	8002194 <_printf_i>
 800208c:	e7ea      	b.n	8002064 <_svfiprintf_r+0x1a8>
 800208e:	bf00      	nop
 8002090:	080027b6 	.word	0x080027b6
 8002094:	080027bc 	.word	0x080027bc
 8002098:	080027c0 	.word	0x080027c0
 800209c:	00000000 	.word	0x00000000
 80020a0:	08001e05 	.word	0x08001e05

080020a4 <_printf_common>:
 80020a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020a8:	4691      	mov	r9, r2
 80020aa:	461f      	mov	r7, r3
 80020ac:	688a      	ldr	r2, [r1, #8]
 80020ae:	690b      	ldr	r3, [r1, #16]
 80020b0:	4606      	mov	r6, r0
 80020b2:	4293      	cmp	r3, r2
 80020b4:	bfb8      	it	lt
 80020b6:	4613      	movlt	r3, r2
 80020b8:	f8c9 3000 	str.w	r3, [r9]
 80020bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020c0:	460c      	mov	r4, r1
 80020c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020c6:	b112      	cbz	r2, 80020ce <_printf_common+0x2a>
 80020c8:	3301      	adds	r3, #1
 80020ca:	f8c9 3000 	str.w	r3, [r9]
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	0699      	lsls	r1, r3, #26
 80020d2:	bf42      	ittt	mi
 80020d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020d8:	3302      	addmi	r3, #2
 80020da:	f8c9 3000 	strmi.w	r3, [r9]
 80020de:	6825      	ldr	r5, [r4, #0]
 80020e0:	f015 0506 	ands.w	r5, r5, #6
 80020e4:	d107      	bne.n	80020f6 <_printf_common+0x52>
 80020e6:	f104 0a19 	add.w	sl, r4, #25
 80020ea:	68e3      	ldr	r3, [r4, #12]
 80020ec:	f8d9 2000 	ldr.w	r2, [r9]
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	429d      	cmp	r5, r3
 80020f4:	db2a      	blt.n	800214c <_printf_common+0xa8>
 80020f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020fa:	6822      	ldr	r2, [r4, #0]
 80020fc:	3300      	adds	r3, #0
 80020fe:	bf18      	it	ne
 8002100:	2301      	movne	r3, #1
 8002102:	0692      	lsls	r2, r2, #26
 8002104:	d42f      	bmi.n	8002166 <_printf_common+0xc2>
 8002106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800210a:	4639      	mov	r1, r7
 800210c:	4630      	mov	r0, r6
 800210e:	47c0      	blx	r8
 8002110:	3001      	adds	r0, #1
 8002112:	d022      	beq.n	800215a <_printf_common+0xb6>
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	68e5      	ldr	r5, [r4, #12]
 8002118:	f003 0306 	and.w	r3, r3, #6
 800211c:	2b04      	cmp	r3, #4
 800211e:	bf18      	it	ne
 8002120:	2500      	movne	r5, #0
 8002122:	f8d9 2000 	ldr.w	r2, [r9]
 8002126:	f04f 0900 	mov.w	r9, #0
 800212a:	bf08      	it	eq
 800212c:	1aad      	subeq	r5, r5, r2
 800212e:	68a3      	ldr	r3, [r4, #8]
 8002130:	6922      	ldr	r2, [r4, #16]
 8002132:	bf08      	it	eq
 8002134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002138:	4293      	cmp	r3, r2
 800213a:	bfc4      	itt	gt
 800213c:	1a9b      	subgt	r3, r3, r2
 800213e:	18ed      	addgt	r5, r5, r3
 8002140:	341a      	adds	r4, #26
 8002142:	454d      	cmp	r5, r9
 8002144:	d11b      	bne.n	800217e <_printf_common+0xda>
 8002146:	2000      	movs	r0, #0
 8002148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214c:	2301      	movs	r3, #1
 800214e:	4652      	mov	r2, sl
 8002150:	4639      	mov	r1, r7
 8002152:	4630      	mov	r0, r6
 8002154:	47c0      	blx	r8
 8002156:	3001      	adds	r0, #1
 8002158:	d103      	bne.n	8002162 <_printf_common+0xbe>
 800215a:	f04f 30ff 	mov.w	r0, #4294967295
 800215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002162:	3501      	adds	r5, #1
 8002164:	e7c1      	b.n	80020ea <_printf_common+0x46>
 8002166:	2030      	movs	r0, #48	; 0x30
 8002168:	18e1      	adds	r1, r4, r3
 800216a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002174:	4422      	add	r2, r4
 8002176:	3302      	adds	r3, #2
 8002178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800217c:	e7c3      	b.n	8002106 <_printf_common+0x62>
 800217e:	2301      	movs	r3, #1
 8002180:	4622      	mov	r2, r4
 8002182:	4639      	mov	r1, r7
 8002184:	4630      	mov	r0, r6
 8002186:	47c0      	blx	r8
 8002188:	3001      	adds	r0, #1
 800218a:	d0e6      	beq.n	800215a <_printf_common+0xb6>
 800218c:	f109 0901 	add.w	r9, r9, #1
 8002190:	e7d7      	b.n	8002142 <_printf_common+0x9e>
	...

08002194 <_printf_i>:
 8002194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002198:	4617      	mov	r7, r2
 800219a:	7e0a      	ldrb	r2, [r1, #24]
 800219c:	b085      	sub	sp, #20
 800219e:	2a6e      	cmp	r2, #110	; 0x6e
 80021a0:	4698      	mov	r8, r3
 80021a2:	4606      	mov	r6, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021a8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80021ac:	f000 80bc 	beq.w	8002328 <_printf_i+0x194>
 80021b0:	d81a      	bhi.n	80021e8 <_printf_i+0x54>
 80021b2:	2a63      	cmp	r2, #99	; 0x63
 80021b4:	d02e      	beq.n	8002214 <_printf_i+0x80>
 80021b6:	d80a      	bhi.n	80021ce <_printf_i+0x3a>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	f000 80c8 	beq.w	800234e <_printf_i+0x1ba>
 80021be:	2a58      	cmp	r2, #88	; 0x58
 80021c0:	f000 808a 	beq.w	80022d8 <_printf_i+0x144>
 80021c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021c8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80021cc:	e02a      	b.n	8002224 <_printf_i+0x90>
 80021ce:	2a64      	cmp	r2, #100	; 0x64
 80021d0:	d001      	beq.n	80021d6 <_printf_i+0x42>
 80021d2:	2a69      	cmp	r2, #105	; 0x69
 80021d4:	d1f6      	bne.n	80021c4 <_printf_i+0x30>
 80021d6:	6821      	ldr	r1, [r4, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021de:	d023      	beq.n	8002228 <_printf_i+0x94>
 80021e0:	1d11      	adds	r1, r2, #4
 80021e2:	6019      	str	r1, [r3, #0]
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	e027      	b.n	8002238 <_printf_i+0xa4>
 80021e8:	2a73      	cmp	r2, #115	; 0x73
 80021ea:	f000 80b4 	beq.w	8002356 <_printf_i+0x1c2>
 80021ee:	d808      	bhi.n	8002202 <_printf_i+0x6e>
 80021f0:	2a6f      	cmp	r2, #111	; 0x6f
 80021f2:	d02a      	beq.n	800224a <_printf_i+0xb6>
 80021f4:	2a70      	cmp	r2, #112	; 0x70
 80021f6:	d1e5      	bne.n	80021c4 <_printf_i+0x30>
 80021f8:	680a      	ldr	r2, [r1, #0]
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	600a      	str	r2, [r1, #0]
 8002200:	e003      	b.n	800220a <_printf_i+0x76>
 8002202:	2a75      	cmp	r2, #117	; 0x75
 8002204:	d021      	beq.n	800224a <_printf_i+0xb6>
 8002206:	2a78      	cmp	r2, #120	; 0x78
 8002208:	d1dc      	bne.n	80021c4 <_printf_i+0x30>
 800220a:	2278      	movs	r2, #120	; 0x78
 800220c:	496f      	ldr	r1, [pc, #444]	; (80023cc <_printf_i+0x238>)
 800220e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002212:	e064      	b.n	80022de <_printf_i+0x14a>
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800221a:	1d11      	adds	r1, r2, #4
 800221c:	6019      	str	r1, [r3, #0]
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002224:	2301      	movs	r3, #1
 8002226:	e0a3      	b.n	8002370 <_printf_i+0x1dc>
 8002228:	f011 0f40 	tst.w	r1, #64	; 0x40
 800222c:	f102 0104 	add.w	r1, r2, #4
 8002230:	6019      	str	r1, [r3, #0]
 8002232:	d0d7      	beq.n	80021e4 <_printf_i+0x50>
 8002234:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da03      	bge.n	8002244 <_printf_i+0xb0>
 800223c:	222d      	movs	r2, #45	; 0x2d
 800223e:	425b      	negs	r3, r3
 8002240:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002244:	4962      	ldr	r1, [pc, #392]	; (80023d0 <_printf_i+0x23c>)
 8002246:	220a      	movs	r2, #10
 8002248:	e017      	b.n	800227a <_printf_i+0xe6>
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002252:	d003      	beq.n	800225c <_printf_i+0xc8>
 8002254:	1d08      	adds	r0, r1, #4
 8002256:	6018      	str	r0, [r3, #0]
 8002258:	680b      	ldr	r3, [r1, #0]
 800225a:	e006      	b.n	800226a <_printf_i+0xd6>
 800225c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002260:	f101 0004 	add.w	r0, r1, #4
 8002264:	6018      	str	r0, [r3, #0]
 8002266:	d0f7      	beq.n	8002258 <_printf_i+0xc4>
 8002268:	880b      	ldrh	r3, [r1, #0]
 800226a:	2a6f      	cmp	r2, #111	; 0x6f
 800226c:	bf14      	ite	ne
 800226e:	220a      	movne	r2, #10
 8002270:	2208      	moveq	r2, #8
 8002272:	4957      	ldr	r1, [pc, #348]	; (80023d0 <_printf_i+0x23c>)
 8002274:	2000      	movs	r0, #0
 8002276:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800227a:	6865      	ldr	r5, [r4, #4]
 800227c:	2d00      	cmp	r5, #0
 800227e:	60a5      	str	r5, [r4, #8]
 8002280:	f2c0 809c 	blt.w	80023bc <_printf_i+0x228>
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	f020 0004 	bic.w	r0, r0, #4
 800228a:	6020      	str	r0, [r4, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d13f      	bne.n	8002310 <_printf_i+0x17c>
 8002290:	2d00      	cmp	r5, #0
 8002292:	f040 8095 	bne.w	80023c0 <_printf_i+0x22c>
 8002296:	4675      	mov	r5, lr
 8002298:	2a08      	cmp	r2, #8
 800229a:	d10b      	bne.n	80022b4 <_printf_i+0x120>
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	07da      	lsls	r2, r3, #31
 80022a0:	d508      	bpl.n	80022b4 <_printf_i+0x120>
 80022a2:	6923      	ldr	r3, [r4, #16]
 80022a4:	6862      	ldr	r2, [r4, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	bfde      	ittt	le
 80022aa:	2330      	movle	r3, #48	; 0x30
 80022ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022b4:	ebae 0305 	sub.w	r3, lr, r5
 80022b8:	6123      	str	r3, [r4, #16]
 80022ba:	f8cd 8000 	str.w	r8, [sp]
 80022be:	463b      	mov	r3, r7
 80022c0:	aa03      	add	r2, sp, #12
 80022c2:	4621      	mov	r1, r4
 80022c4:	4630      	mov	r0, r6
 80022c6:	f7ff feed 	bl	80020a4 <_printf_common>
 80022ca:	3001      	adds	r0, #1
 80022cc:	d155      	bne.n	800237a <_printf_i+0x1e6>
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295
 80022d2:	b005      	add	sp, #20
 80022d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022d8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80022dc:	493c      	ldr	r1, [pc, #240]	; (80023d0 <_printf_i+0x23c>)
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022e6:	f100 0504 	add.w	r5, r0, #4
 80022ea:	601d      	str	r5, [r3, #0]
 80022ec:	d001      	beq.n	80022f2 <_printf_i+0x15e>
 80022ee:	6803      	ldr	r3, [r0, #0]
 80022f0:	e002      	b.n	80022f8 <_printf_i+0x164>
 80022f2:	0655      	lsls	r5, r2, #25
 80022f4:	d5fb      	bpl.n	80022ee <_printf_i+0x15a>
 80022f6:	8803      	ldrh	r3, [r0, #0]
 80022f8:	07d0      	lsls	r0, r2, #31
 80022fa:	bf44      	itt	mi
 80022fc:	f042 0220 	orrmi.w	r2, r2, #32
 8002300:	6022      	strmi	r2, [r4, #0]
 8002302:	b91b      	cbnz	r3, 800230c <_printf_i+0x178>
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	f022 0220 	bic.w	r2, r2, #32
 800230a:	6022      	str	r2, [r4, #0]
 800230c:	2210      	movs	r2, #16
 800230e:	e7b1      	b.n	8002274 <_printf_i+0xe0>
 8002310:	4675      	mov	r5, lr
 8002312:	fbb3 f0f2 	udiv	r0, r3, r2
 8002316:	fb02 3310 	mls	r3, r2, r0, r3
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002320:	4603      	mov	r3, r0
 8002322:	2800      	cmp	r0, #0
 8002324:	d1f5      	bne.n	8002312 <_printf_i+0x17e>
 8002326:	e7b7      	b.n	8002298 <_printf_i+0x104>
 8002328:	6808      	ldr	r0, [r1, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002330:	6949      	ldr	r1, [r1, #20]
 8002332:	d004      	beq.n	800233e <_printf_i+0x1aa>
 8002334:	1d10      	adds	r0, r2, #4
 8002336:	6018      	str	r0, [r3, #0]
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	6019      	str	r1, [r3, #0]
 800233c:	e007      	b.n	800234e <_printf_i+0x1ba>
 800233e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002342:	f102 0004 	add.w	r0, r2, #4
 8002346:	6018      	str	r0, [r3, #0]
 8002348:	6813      	ldr	r3, [r2, #0]
 800234a:	d0f6      	beq.n	800233a <_printf_i+0x1a6>
 800234c:	8019      	strh	r1, [r3, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	4675      	mov	r5, lr
 8002352:	6123      	str	r3, [r4, #16]
 8002354:	e7b1      	b.n	80022ba <_printf_i+0x126>
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	1d11      	adds	r1, r2, #4
 800235a:	6019      	str	r1, [r3, #0]
 800235c:	6815      	ldr	r5, [r2, #0]
 800235e:	2100      	movs	r1, #0
 8002360:	6862      	ldr	r2, [r4, #4]
 8002362:	4628      	mov	r0, r5
 8002364:	f000 f836 	bl	80023d4 <memchr>
 8002368:	b108      	cbz	r0, 800236e <_printf_i+0x1da>
 800236a:	1b40      	subs	r0, r0, r5
 800236c:	6060      	str	r0, [r4, #4]
 800236e:	6863      	ldr	r3, [r4, #4]
 8002370:	6123      	str	r3, [r4, #16]
 8002372:	2300      	movs	r3, #0
 8002374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002378:	e79f      	b.n	80022ba <_printf_i+0x126>
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	462a      	mov	r2, r5
 800237e:	4639      	mov	r1, r7
 8002380:	4630      	mov	r0, r6
 8002382:	47c0      	blx	r8
 8002384:	3001      	adds	r0, #1
 8002386:	d0a2      	beq.n	80022ce <_printf_i+0x13a>
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	079b      	lsls	r3, r3, #30
 800238c:	d507      	bpl.n	800239e <_printf_i+0x20a>
 800238e:	2500      	movs	r5, #0
 8002390:	f104 0919 	add.w	r9, r4, #25
 8002394:	68e3      	ldr	r3, [r4, #12]
 8002396:	9a03      	ldr	r2, [sp, #12]
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	429d      	cmp	r5, r3
 800239c:	db05      	blt.n	80023aa <_printf_i+0x216>
 800239e:	68e0      	ldr	r0, [r4, #12]
 80023a0:	9b03      	ldr	r3, [sp, #12]
 80023a2:	4298      	cmp	r0, r3
 80023a4:	bfb8      	it	lt
 80023a6:	4618      	movlt	r0, r3
 80023a8:	e793      	b.n	80022d2 <_printf_i+0x13e>
 80023aa:	2301      	movs	r3, #1
 80023ac:	464a      	mov	r2, r9
 80023ae:	4639      	mov	r1, r7
 80023b0:	4630      	mov	r0, r6
 80023b2:	47c0      	blx	r8
 80023b4:	3001      	adds	r0, #1
 80023b6:	d08a      	beq.n	80022ce <_printf_i+0x13a>
 80023b8:	3501      	adds	r5, #1
 80023ba:	e7eb      	b.n	8002394 <_printf_i+0x200>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1a7      	bne.n	8002310 <_printf_i+0x17c>
 80023c0:	780b      	ldrb	r3, [r1, #0]
 80023c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023ca:	e765      	b.n	8002298 <_printf_i+0x104>
 80023cc:	080027d8 	.word	0x080027d8
 80023d0:	080027c7 	.word	0x080027c7

080023d4 <memchr>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	b2c9      	uxtb	r1, r1
 80023d8:	4402      	add	r2, r0
 80023da:	4290      	cmp	r0, r2
 80023dc:	4603      	mov	r3, r0
 80023de:	d101      	bne.n	80023e4 <memchr+0x10>
 80023e0:	2000      	movs	r0, #0
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	781c      	ldrb	r4, [r3, #0]
 80023e6:	3001      	adds	r0, #1
 80023e8:	428c      	cmp	r4, r1
 80023ea:	d1f6      	bne.n	80023da <memchr+0x6>
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <memcpy>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	1e43      	subs	r3, r0, #1
 80023f4:	440a      	add	r2, r1
 80023f6:	4291      	cmp	r1, r2
 80023f8:	d100      	bne.n	80023fc <memcpy+0xc>
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002404:	e7f7      	b.n	80023f6 <memcpy+0x6>

08002406 <memmove>:
 8002406:	4288      	cmp	r0, r1
 8002408:	b510      	push	{r4, lr}
 800240a:	eb01 0302 	add.w	r3, r1, r2
 800240e:	d803      	bhi.n	8002418 <memmove+0x12>
 8002410:	1e42      	subs	r2, r0, #1
 8002412:	4299      	cmp	r1, r3
 8002414:	d10c      	bne.n	8002430 <memmove+0x2a>
 8002416:	bd10      	pop	{r4, pc}
 8002418:	4298      	cmp	r0, r3
 800241a:	d2f9      	bcs.n	8002410 <memmove+0xa>
 800241c:	1881      	adds	r1, r0, r2
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	42d3      	cmn	r3, r2
 8002422:	d100      	bne.n	8002426 <memmove+0x20>
 8002424:	bd10      	pop	{r4, pc}
 8002426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800242a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800242e:	e7f7      	b.n	8002420 <memmove+0x1a>
 8002430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002434:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002438:	e7eb      	b.n	8002412 <memmove+0xc>
	...

0800243c <_free_r>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4605      	mov	r5, r0
 8002440:	2900      	cmp	r1, #0
 8002442:	d043      	beq.n	80024cc <_free_r+0x90>
 8002444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002448:	1f0c      	subs	r4, r1, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	bfb8      	it	lt
 800244e:	18e4      	addlt	r4, r4, r3
 8002450:	f000 f8d4 	bl	80025fc <__malloc_lock>
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <_free_r+0x94>)
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	4610      	mov	r0, r2
 800245a:	b933      	cbnz	r3, 800246a <_free_r+0x2e>
 800245c:	6063      	str	r3, [r4, #4]
 800245e:	6014      	str	r4, [r2, #0]
 8002460:	4628      	mov	r0, r5
 8002462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002466:	f000 b8ca 	b.w	80025fe <__malloc_unlock>
 800246a:	42a3      	cmp	r3, r4
 800246c:	d90b      	bls.n	8002486 <_free_r+0x4a>
 800246e:	6821      	ldr	r1, [r4, #0]
 8002470:	1862      	adds	r2, r4, r1
 8002472:	4293      	cmp	r3, r2
 8002474:	bf01      	itttt	eq
 8002476:	681a      	ldreq	r2, [r3, #0]
 8002478:	685b      	ldreq	r3, [r3, #4]
 800247a:	1852      	addeq	r2, r2, r1
 800247c:	6022      	streq	r2, [r4, #0]
 800247e:	6063      	str	r3, [r4, #4]
 8002480:	6004      	str	r4, [r0, #0]
 8002482:	e7ed      	b.n	8002460 <_free_r+0x24>
 8002484:	4613      	mov	r3, r2
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	b10a      	cbz	r2, 800248e <_free_r+0x52>
 800248a:	42a2      	cmp	r2, r4
 800248c:	d9fa      	bls.n	8002484 <_free_r+0x48>
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	1858      	adds	r0, r3, r1
 8002492:	42a0      	cmp	r0, r4
 8002494:	d10b      	bne.n	80024ae <_free_r+0x72>
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	4401      	add	r1, r0
 800249a:	1858      	adds	r0, r3, r1
 800249c:	4282      	cmp	r2, r0
 800249e:	6019      	str	r1, [r3, #0]
 80024a0:	d1de      	bne.n	8002460 <_free_r+0x24>
 80024a2:	6810      	ldr	r0, [r2, #0]
 80024a4:	6852      	ldr	r2, [r2, #4]
 80024a6:	4401      	add	r1, r0
 80024a8:	6019      	str	r1, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	e7d8      	b.n	8002460 <_free_r+0x24>
 80024ae:	d902      	bls.n	80024b6 <_free_r+0x7a>
 80024b0:	230c      	movs	r3, #12
 80024b2:	602b      	str	r3, [r5, #0]
 80024b4:	e7d4      	b.n	8002460 <_free_r+0x24>
 80024b6:	6820      	ldr	r0, [r4, #0]
 80024b8:	1821      	adds	r1, r4, r0
 80024ba:	428a      	cmp	r2, r1
 80024bc:	bf01      	itttt	eq
 80024be:	6811      	ldreq	r1, [r2, #0]
 80024c0:	6852      	ldreq	r2, [r2, #4]
 80024c2:	1809      	addeq	r1, r1, r0
 80024c4:	6021      	streq	r1, [r4, #0]
 80024c6:	6062      	str	r2, [r4, #4]
 80024c8:	605c      	str	r4, [r3, #4]
 80024ca:	e7c9      	b.n	8002460 <_free_r+0x24>
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
 80024ce:	bf00      	nop
 80024d0:	200000dc 	.word	0x200000dc

080024d4 <_malloc_r>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	1ccd      	adds	r5, r1, #3
 80024d8:	f025 0503 	bic.w	r5, r5, #3
 80024dc:	3508      	adds	r5, #8
 80024de:	2d0c      	cmp	r5, #12
 80024e0:	bf38      	it	cc
 80024e2:	250c      	movcc	r5, #12
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	4606      	mov	r6, r0
 80024e8:	db01      	blt.n	80024ee <_malloc_r+0x1a>
 80024ea:	42a9      	cmp	r1, r5
 80024ec:	d903      	bls.n	80024f6 <_malloc_r+0x22>
 80024ee:	230c      	movs	r3, #12
 80024f0:	6033      	str	r3, [r6, #0]
 80024f2:	2000      	movs	r0, #0
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
 80024f6:	f000 f881 	bl	80025fc <__malloc_lock>
 80024fa:	4a23      	ldr	r2, [pc, #140]	; (8002588 <_malloc_r+0xb4>)
 80024fc:	6814      	ldr	r4, [r2, #0]
 80024fe:	4621      	mov	r1, r4
 8002500:	b991      	cbnz	r1, 8002528 <_malloc_r+0x54>
 8002502:	4c22      	ldr	r4, [pc, #136]	; (800258c <_malloc_r+0xb8>)
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	b91b      	cbnz	r3, 8002510 <_malloc_r+0x3c>
 8002508:	4630      	mov	r0, r6
 800250a:	f000 f867 	bl	80025dc <_sbrk_r>
 800250e:	6020      	str	r0, [r4, #0]
 8002510:	4629      	mov	r1, r5
 8002512:	4630      	mov	r0, r6
 8002514:	f000 f862 	bl	80025dc <_sbrk_r>
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	d126      	bne.n	800256a <_malloc_r+0x96>
 800251c:	230c      	movs	r3, #12
 800251e:	4630      	mov	r0, r6
 8002520:	6033      	str	r3, [r6, #0]
 8002522:	f000 f86c 	bl	80025fe <__malloc_unlock>
 8002526:	e7e4      	b.n	80024f2 <_malloc_r+0x1e>
 8002528:	680b      	ldr	r3, [r1, #0]
 800252a:	1b5b      	subs	r3, r3, r5
 800252c:	d41a      	bmi.n	8002564 <_malloc_r+0x90>
 800252e:	2b0b      	cmp	r3, #11
 8002530:	d90f      	bls.n	8002552 <_malloc_r+0x7e>
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	18cc      	adds	r4, r1, r3
 8002536:	50cd      	str	r5, [r1, r3]
 8002538:	4630      	mov	r0, r6
 800253a:	f000 f860 	bl	80025fe <__malloc_unlock>
 800253e:	f104 000b 	add.w	r0, r4, #11
 8002542:	1d23      	adds	r3, r4, #4
 8002544:	f020 0007 	bic.w	r0, r0, #7
 8002548:	1ac3      	subs	r3, r0, r3
 800254a:	d01b      	beq.n	8002584 <_malloc_r+0xb0>
 800254c:	425a      	negs	r2, r3
 800254e:	50e2      	str	r2, [r4, r3]
 8002550:	bd70      	pop	{r4, r5, r6, pc}
 8002552:	428c      	cmp	r4, r1
 8002554:	bf0b      	itete	eq
 8002556:	6863      	ldreq	r3, [r4, #4]
 8002558:	684b      	ldrne	r3, [r1, #4]
 800255a:	6013      	streq	r3, [r2, #0]
 800255c:	6063      	strne	r3, [r4, #4]
 800255e:	bf18      	it	ne
 8002560:	460c      	movne	r4, r1
 8002562:	e7e9      	b.n	8002538 <_malloc_r+0x64>
 8002564:	460c      	mov	r4, r1
 8002566:	6849      	ldr	r1, [r1, #4]
 8002568:	e7ca      	b.n	8002500 <_malloc_r+0x2c>
 800256a:	1cc4      	adds	r4, r0, #3
 800256c:	f024 0403 	bic.w	r4, r4, #3
 8002570:	42a0      	cmp	r0, r4
 8002572:	d005      	beq.n	8002580 <_malloc_r+0xac>
 8002574:	1a21      	subs	r1, r4, r0
 8002576:	4630      	mov	r0, r6
 8002578:	f000 f830 	bl	80025dc <_sbrk_r>
 800257c:	3001      	adds	r0, #1
 800257e:	d0cd      	beq.n	800251c <_malloc_r+0x48>
 8002580:	6025      	str	r5, [r4, #0]
 8002582:	e7d9      	b.n	8002538 <_malloc_r+0x64>
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	bf00      	nop
 8002588:	200000dc 	.word	0x200000dc
 800258c:	200000e0 	.word	0x200000e0

08002590 <_realloc_r>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	4607      	mov	r7, r0
 8002594:	4614      	mov	r4, r2
 8002596:	460e      	mov	r6, r1
 8002598:	b921      	cbnz	r1, 80025a4 <_realloc_r+0x14>
 800259a:	4611      	mov	r1, r2
 800259c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80025a0:	f7ff bf98 	b.w	80024d4 <_malloc_r>
 80025a4:	b922      	cbnz	r2, 80025b0 <_realloc_r+0x20>
 80025a6:	f7ff ff49 	bl	800243c <_free_r>
 80025aa:	4625      	mov	r5, r4
 80025ac:	4628      	mov	r0, r5
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	f000 f826 	bl	8002600 <_malloc_usable_size_r>
 80025b4:	4284      	cmp	r4, r0
 80025b6:	d90f      	bls.n	80025d8 <_realloc_r+0x48>
 80025b8:	4621      	mov	r1, r4
 80025ba:	4638      	mov	r0, r7
 80025bc:	f7ff ff8a 	bl	80024d4 <_malloc_r>
 80025c0:	4605      	mov	r5, r0
 80025c2:	2800      	cmp	r0, #0
 80025c4:	d0f2      	beq.n	80025ac <_realloc_r+0x1c>
 80025c6:	4631      	mov	r1, r6
 80025c8:	4622      	mov	r2, r4
 80025ca:	f7ff ff11 	bl	80023f0 <memcpy>
 80025ce:	4631      	mov	r1, r6
 80025d0:	4638      	mov	r0, r7
 80025d2:	f7ff ff33 	bl	800243c <_free_r>
 80025d6:	e7e9      	b.n	80025ac <_realloc_r+0x1c>
 80025d8:	4635      	mov	r5, r6
 80025da:	e7e7      	b.n	80025ac <_realloc_r+0x1c>

080025dc <_sbrk_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	2300      	movs	r3, #0
 80025e0:	4c05      	ldr	r4, [pc, #20]	; (80025f8 <_sbrk_r+0x1c>)
 80025e2:	4605      	mov	r5, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	f000 f814 	bl	8002614 <_sbrk>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_sbrk_r+0x1a>
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_sbrk_r+0x1a>
 80025f4:	602b      	str	r3, [r5, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	20000384 	.word	0x20000384

080025fc <__malloc_lock>:
 80025fc:	4770      	bx	lr

080025fe <__malloc_unlock>:
 80025fe:	4770      	bx	lr

08002600 <_malloc_usable_size_r>:
 8002600:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002604:	2800      	cmp	r0, #0
 8002606:	f1a0 0004 	sub.w	r0, r0, #4
 800260a:	bfbc      	itt	lt
 800260c:	580b      	ldrlt	r3, [r1, r0]
 800260e:	18c0      	addlt	r0, r0, r3
 8002610:	4770      	bx	lr
	...

08002614 <_sbrk>:
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <_sbrk+0x14>)
 8002616:	4602      	mov	r2, r0
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	b909      	cbnz	r1, 8002620 <_sbrk+0xc>
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <_sbrk+0x18>)
 800261e:	6019      	str	r1, [r3, #0]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	4402      	add	r2, r0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4770      	bx	lr
 8002628:	200000e4 	.word	0x200000e4
 800262c:	20000388 	.word	0x20000388

08002630 <_init>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr

0800263c <_fini>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	bf00      	nop
 8002640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002642:	bc08      	pop	{r3}
 8002644:	469e      	mov	lr, r3
 8002646:	4770      	bx	lr
